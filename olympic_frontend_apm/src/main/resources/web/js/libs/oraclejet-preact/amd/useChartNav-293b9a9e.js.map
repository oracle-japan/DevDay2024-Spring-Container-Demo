{"version":3,"file":"useChartNav-293b9a9e.js","sources":["../../src/hooks/PRIVATE_useChartNav/useChartNav.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref, useRef, useState } from 'preact/hooks';\nimport { getRandomId } from '../../UNSAFE_Legend/LegendUtils';\nimport { getInfo, cancelEvent } from '../../utils/UNSAFE_visUtils';\nimport { GroupInfo, Info } from '../../UNSAFE_Chart';\n\ntype Props = {\n  rootRef: Ref<HTMLElement>;\n  getNextChartItem: (\n    info: Info,\n    arrow: 'ArrowLeft' | 'ArrowRight' | 'ArrowDown' | 'ArrowUp'\n  ) => Info;\n  getNextNavGroup: (info: GroupInfo, arrow: 'ArrowLeft' | 'ArrowRight') => GroupInfo;\n  getDefaultNavGroup: (info: GroupInfo) => GroupInfo | undefined;\n  xIndexExtent: { startIndex: number; endIndex: number };\n  onItemInput?: (detail: { seriesIndex?: number; groupIndex?: number }) => void;\n  drilling?: 'on' | 'groupsOnly' | 'off';\n};\n\n/**\n * Returns whether the two groups are same.\n * @param g1 GroupInfo\n * @param g2 GroupInfo\n * @returns\n */\nfunction isGroupEqual(g1?: Partial<GroupInfo>, g2?: Partial<GroupInfo>) {\n  return (\n    g1?.groupIndex === g2?.groupIndex &&\n    g1?.isCurrent === g2?.isCurrent &&\n    g1?.isFocusVisible === g2?.isFocusVisible\n  );\n}\n\n/**\n * Returns whether the two item info are same.\n * @param i1 ItemInfo\n * @param i2 ItemInfo\n * @returns\n */\nfunction isItemEqual(i1?: Info, i2?: Info) {\n  return i1?.seriesIndex === i2?.seriesIndex && isGroupEqual(i1, i2);\n}\n\n/**\n * Returns whether the two item info are same.\n * @param i1 ItemInfo\n * @param i2 ItemInfo\n * @returns\n */\nfunction isItemInfoEqual(i1?: Info, i2?: Info) {\n  return i1?.seriesIndex === i2?.seriesIndex && i2?.groupIndex === i1?.groupIndex;\n}\n\n/**\n * Hook to handle chart navigation.\n */\nexport function useChartNav({\n  rootRef,\n  getNextChartItem,\n  getDefaultNavGroup,\n  getNextNavGroup,\n  xIndexExtent,\n  onItemInput,\n  drilling\n}: Props) {\n  const [focusedItemInfo, setfocusedItemInfo] = useState<Info>({\n    groupIndex: xIndexExtent.startIndex,\n    seriesIndex: 0\n  });\n\n  const isGroupDrillEnabled = drilling === 'on' || drilling === 'groupsOnly';\n  const [hoveredItemInfo, setHoveredItemInfo] = useState<Info>();\n\n  const [focusedGroupInfo, setFocusedGroupInfo] = useState<GroupInfo>({ groupIndex: 0 });\n  const activeId = useRef<string>();\n  const previousInputRef = useRef<Info>();\n\n  const isItemFocused = focusedItemInfo.isCurrent;\n  const isGroupFocused = focusedGroupInfo.isCurrent;\n\n  const updateGroupInfo = (groupInfo: GroupInfo) => {\n    if (!isGroupEqual(groupInfo, focusedGroupInfo)) {\n      setFocusedGroupInfo(groupInfo);\n    }\n  };\n\n  const updateInput = (info?: Info) => {\n    if (!isItemEqual(info, previousInputRef.current)) {\n      const input = { groupIndex: info?.groupIndex, seriesIndex: info?.seriesIndex };\n      onItemInput?.(input);\n      previousInputRef.current = info;\n    }\n  };\n\n  const updateFocusedItemInfo = (itemInfo: Info) => {\n    if (!isItemEqual(itemInfo, focusedItemInfo)) {\n      setfocusedItemInfo(itemInfo);\n      // preserve hovered effect if same item is focused\n      if (hoveredItemInfo && !isItemInfoEqual(hoveredItemInfo, itemInfo)) {\n        setHoveredItemInfo({ ...hoveredItemInfo, isCurrent: false });\n      }\n      if (itemInfo.isCurrent) {\n        updateInput(itemInfo);\n      }\n    }\n  };\n\n  const updateHoveredItemInfo = (itemInfo?: Info) => {\n    if (!hoveredItemInfo || !isItemEqual(itemInfo, hoveredItemInfo)) {\n      setHoveredItemInfo(itemInfo);\n      setfocusedItemInfo({ ...focusedItemInfo, isCurrent: false });\n      updateInput(itemInfo);\n    }\n  };\n\n  const handleTab = (event: KeyboardEvent) => {\n    const defaultGroup = getDefaultNavGroup(focusedGroupInfo);\n    const validItemInfoIndex = Math.max(\n      xIndexExtent.startIndex,\n      Math.min(xIndexExtent.endIndex, focusedItemInfo.groupIndex!)\n    );\n    if (event.shiftKey) {\n      if (isItemFocused) {\n        updateFocusedItemInfo({\n          ...focusedItemInfo,\n          groupIndex: validItemInfoIndex,\n          isCurrent: false,\n          isFocusVisible: false\n        });\n        updateInput(undefined);\n      } else if (isGroupFocused) {\n        updateFocusedItemInfo({\n          ...focusedItemInfo,\n          groupIndex: validItemInfoIndex,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        if (isGroupDrillEnabled) {\n          updateGroupInfo({\n            ...focusedGroupInfo,\n            ...defaultGroup,\n            isCurrent: false,\n            isFocusVisible: false\n          });\n          cancelEvent(event);\n        }\n      } else if (isGroupDrillEnabled) {\n        updateGroupInfo({\n          ...focusedGroupInfo,\n          ...defaultGroup,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n      }\n    } else {\n      if (isItemFocused) {\n        updateFocusedItemInfo({\n          ...focusedItemInfo,\n          groupIndex: validItemInfoIndex,\n          isCurrent: false,\n          isFocusVisible: false\n        });\n        if (isGroupDrillEnabled) {\n          updateGroupInfo({\n            ...focusedGroupInfo,\n            ...defaultGroup,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n          cancelEvent(event);\n        }\n        updateInput(undefined);\n      } else if (isGroupFocused && isGroupDrillEnabled) {\n        updateGroupInfo({\n          ...focusedGroupInfo,\n          ...defaultGroup,\n          isCurrent: false,\n          isFocusVisible: false\n        });\n      } else {\n        updateFocusedItemInfo({\n          ...focusedItemInfo,\n          groupIndex: validItemInfoIndex,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n      }\n    }\n    activeId.current = getRandomId();\n  };\n\n  const onKeyUp = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'Tab': {\n        if (!isItemFocused && !isGroupFocused) {\n          handleTab(event);\n        }\n        break;\n      }\n    }\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'Tab': {\n        handleTab(event);\n        break;\n      }\n      case 'ArrowRight': {\n        if (isGroupFocused) {\n          const info = getNextNavGroup(focusedGroupInfo, key);\n          updateGroupInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        } else {\n          const info = getNextChartItem(focusedItemInfo, key);\n          updateFocusedItemInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        }\n        setHoveredItemInfo(undefined);\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowLeft': {\n        if (isGroupFocused) {\n          const info = getNextNavGroup(focusedGroupInfo, key);\n          updateGroupInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        } else {\n          const info = getNextChartItem(focusedItemInfo, key);\n          updateFocusedItemInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        }\n        setHoveredItemInfo(undefined);\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowUp': {\n        if (isItemFocused) {\n          const info = getNextChartItem(focusedItemInfo, key);\n          updateFocusedItemInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        }\n        setHoveredItemInfo(undefined);\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowDown': {\n        if (isItemFocused) {\n          const info = getNextChartItem(focusedItemInfo, key);\n          updateFocusedItemInfo({\n            ...info,\n            isCurrent: true,\n            isFocusVisible: true\n          });\n        }\n        setHoveredItemInfo(undefined);\n        cancelEvent(event);\n        break;\n      }\n    }\n  };\n\n  const onPointerUp = (event: PointerEvent) => {\n    const info = getInfo(rootRef, event);\n\n    if (!info) {\n      return;\n    }\n    const { seriesIndex, groupIndex } = info;\n\n    if (seriesIndex != undefined && groupIndex != undefined) {\n      updateFocusedItemInfo({\n        seriesIndex,\n        groupIndex,\n        isCurrent: false,\n        isFocusVisible: false\n      });\n      updateGroupInfo({\n        ...focusedGroupInfo,\n        isCurrent: false,\n        isFocusVisible: false\n      });\n    } else if (groupIndex !== undefined && seriesIndex === undefined) {\n      updateGroupInfo({\n        groupIndex,\n        isCurrent: true,\n        isFocusVisible: false\n      });\n      updateFocusedItemInfo({\n        ...focusedItemInfo,\n        isCurrent: false,\n        isFocusVisible: false\n      });\n    }\n  };\n\n  const onPointerMove = (event: PointerEvent) => {\n    const info = getInfo(rootRef, event);\n    if (!info) {\n      updateHoveredItemInfo(undefined);\n      return;\n    }\n    const { seriesIndex, groupIndex } = info;\n\n    if (seriesIndex != undefined) {\n      updateHoveredItemInfo({\n        seriesIndex,\n        groupIndex,\n        isCurrent: true\n      });\n      updateFocusedItemInfo({\n        ...focusedItemInfo,\n        isCurrent: false\n      });\n    }\n  };\n\n  const onBlur = () => {\n    updateFocusedItemInfo({\n      ...focusedItemInfo,\n      isCurrent: false,\n      isFocusVisible: false\n    });\n  };\n\n  return {\n    focusedItemInfo,\n    focusedGroupInfo,\n    hoveredItemInfo,\n    activeId: activeId.current,\n    navProps: {\n      onKeyDown,\n      onKeyUp,\n      onPointerUp,\n      onPointerMove,\n      onBlur\n    }\n  };\n}\n"],"names":["isGroupEqual","g1","g2","groupIndex","isCurrent","isFocusVisible","isItemEqual","i1","i2","seriesIndex","rootRef","getNextChartItem","getDefaultNavGroup","getNextNavGroup","xIndexExtent","onItemInput","drilling","focusedItemInfo","setfocusedItemInfo","useState","startIndex","isGroupDrillEnabled","hoveredItemInfo","setHoveredItemInfo","focusedGroupInfo","setFocusedGroupInfo","activeId","useRef","previousInputRef","isItemFocused","isGroupFocused","updateGroupInfo","groupInfo","updateInput","info","current","input","updateFocusedItemInfo","itemInfo","updateHoveredItemInfo","handleTab","event","defaultGroup","validItemInfoIndex","Math","max","min","endIndex","shiftKey","undefined","cancelEvent","getRandomId","navProps","onKeyDown","key","onKeyUp","onPointerUp","getInfo","onPointerMove","onBlur"],"mappings":"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"}