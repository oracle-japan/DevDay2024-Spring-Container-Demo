{"version":3,"file":"NavigationListItem-86df62a9.js","sources":["../../src/UNSAFE_NavigationList/useNavigationList.ts","../../src/UNSAFE_NavigationList/NavigationList.tsx","../../src/UNSAFE_NavigationList/NavigationListItem.tsx"],"sourcesContent":["import { useState, useCallback, MutableRef, useRef, useEffect } from 'preact/hooks';\nimport {\n  keyExtractor,\n  getFirstVisibleKey,\n  getKey,\n  getPrevNextKeyUsingRef\n} from '../utils/PRIVATE_collectionUtils';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { NavigationListContextProps } from '../UNSAFE_NavigationListCommon';\n\nimport { ComponentChildren } from 'preact';\n\n/**\n * type for payload of current key change event handler\n */\ntype CurrentKeyDetail<K> = {\n  value: K;\n};\n/**\n * type for payload of selection change event handler\n */\ntype SelectionDetail<K> = {\n  value: K;\n  reason: 'pointer' | 'keyboard';\n};\n/**\n * type for payload of remove event handler\n */\ntype RemoveDetail<K> = {\n  value: K;\n};\n\n/*TODO: JET-58534. Create a hook to share some logic between navlist and tabbar. Hook will be used inside this one. */\nexport function useNavigationList<K extends string | number>({\n  containerRef,\n  selection,\n  onRemove,\n  onSelectionChange,\n  children\n}: {\n  containerRef: MutableRef<HTMLUListElement>;\n  selection?: K;\n  onRemove?: <K extends string | number>(detail: RemoveDetail<K>) => void;\n  onSelectionChange?: <K extends string | number>(detail: SelectionDetail<K>) => void;\n  children: ComponentChildren;\n}) {\n  const ITEM_SELECTOR = '[role=\"option\"]';\n  const REMOVAL_ICON_SELECTOR = '[data-oj-navigationlist-item-remove-icon]';\n  const [currentKey, setCurrentKey] = useState<K | undefined>(selection);\n\n  const onCurrentKeyChange = useCallback((detail: CurrentKeyDetail<K | undefined>) => {\n    setCurrentKey(detail.value);\n  }, []) as NavigationListContextProps<K>['onCurrentKeyChange'];\n\n  const { currentKeyProps } = useCurrentKey(\n    (element) =>\n      onRemove\n        ? (extractOnlyItemKey(element, ITEM_SELECTOR, REMOVAL_ICON_SELECTOR) as K)\n        : keyExtractor(element, ITEM_SELECTOR),\n    false,\n    getPrevNextKeyUsingRef(containerRef, currentKey, true, ITEM_SELECTOR),\n    getPrevNextKeyUsingRef(containerRef, currentKey, false, ITEM_SELECTOR),\n    undefined,\n    undefined,\n    currentKey,\n    onCurrentKeyChange\n  );\n\n  const [showFocusRing, focusRingProps] = useCollectionFocusRing(containerRef, [\n    'Home',\n    'End',\n    'ArrowUp',\n    'ArrowDown'\n  ]);\n\n  const onFocus = useCallback(() => {\n    if (containerRef.current && currentKey === undefined) {\n      const key = getFirstVisibleKey(containerRef.current, ITEM_SELECTOR);\n      if (key) {\n        setCurrentKey(key as K);\n      }\n    }\n  }, [currentKey, containerRef]);\n\n  const onFocusProps = { onFocus };\n  const prevNavItems = useRef<K[]>();\n\n  useEffect(() => {\n    if (containerRef.current) {\n      const navListItemKey = Array.from(\n        containerRef.current.querySelectorAll(ITEM_SELECTOR),\n        (elem) => getKey(elem as HTMLElement) as K\n      );\n      if (currentKey && navListItemKey.indexOf(currentKey) === -1 && prevNavItems.current) {\n        setCurrentKey(findNextCurrentKey(currentKey, navListItemKey, prevNavItems.current));\n      }\n      prevNavItems.current = navListItemKey;\n    }\n  }, [children, currentKey, containerRef]);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if ((event.key === 'Home' || event.key === 'End') && containerRef.current && currentKey) {\n        const navListItemKey = Array.from(\n          containerRef.current.querySelectorAll(ITEM_SELECTOR),\n          (elem) => getKey(elem as HTMLElement) as K\n        );\n        onCurrentKeyChange?.({\n          value: navListItemKey[event.key === 'Home' ? 0 : navListItemKey.length - 1] as K\n        });\n      }\n      if (currentKey && event.key === 'Enter') {\n        onSelectionChange?.({\n          value: currentKey as K,\n          reason: 'keyboard'\n        });\n      }\n      if (currentKey && event.key === 'Delete') {\n        onRemove?.({ value: currentKey as K });\n      }\n    },\n    [currentKey, onSelectionChange, onRemove, onCurrentKeyChange, containerRef]\n  );\n\n  return {\n    showFocusRing,\n    currentKey,\n    onCurrentKeyChange,\n    onKeyDown,\n    containerHandlers: mergeProps(focusRingProps, currentKeyProps, onFocusProps)\n  };\n}\n\nconst extractOnlyItemKey = (element: HTMLElement, itemSelector: string, itemEliminator: string) => {\n  const navigationListItem = element.closest(itemSelector);\n  const removeButton = element.closest(itemEliminator);\n  return navigationListItem?.contains(removeButton) ? null : keyExtractor(element, itemSelector);\n};\n\nconst findNextCurrentKey = <K>(currentKey: K, currNavs: K[], prevNavs: K[]) => {\n  const index = prevNavs.indexOf(currentKey);\n  if (index > 0) {\n    const nextIndex = index === prevNavs.length - 1 ? index - 1 : index + 1;\n    const nextKey = prevNavs[nextIndex];\n    if (currNavs.indexOf(nextKey) !== -1) {\n      return nextKey;\n    }\n  }\n  // update current key to be the first one if we can't find a suitable next key\n  return currNavs[0];\n};\n","import { Ref } from 'preact';\nimport { MutableRef, useRef } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { navigationListStyles } from './themes/NavigationListStyles.css';\nimport { useNavigationList } from './useNavigationList';\nimport { forwardRef, useImperativeHandle } from 'preact/compat';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { NavigationListProps, NavigationListContext } from '../UNSAFE_NavigationListCommon';\nexport { RemovableNavigationListItem } from '../UNSAFE_NavigationListCommon';\n\nexport type FocusableHandle = {\n  focus: () => void;\n};\n\nexport const NavigationList = forwardRef(\n  <K extends string | number>(\n    {\n      children,\n      selection,\n      onSelectionChange,\n      onRemove,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelLedBy,\n      testId\n    }: NavigationListProps<K> & TestIdProps,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const containerRef = useRef<HTMLUListElement>(null);\n\n    const { showFocusRing, currentKey, onCurrentKeyChange, containerHandlers, onKeyDown } =\n      useNavigationList({\n        containerRef: containerRef as MutableRef<HTMLUListElement>,\n        selection,\n        onRemove,\n        onSelectionChange,\n        children\n      });\n\n    const eventProps = { onKeyDown };\n    const navigationListClass = classNames([navigationListStyles.uListStyle]);\n    const navigationListItemPrefix = useId() + '_';\n    const testIdProps = useTestId(testId);\n\n    //Allows to call focus on rootRef without having to expose it\n    useImperativeHandle(ref!, () => ({\n      focus: () => {\n        if (containerRef.current) {\n          containerRef.current.focus();\n        }\n      }\n    }));\n\n    return (\n      <ul\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelLedBy}\n        role=\"listbox\"\n        ref={containerRef}\n        tabIndex={0}\n        aria-activedescendant={currentKey ? navigationListItemPrefix + currentKey : ''}\n        {...mergeProps(eventProps, containerHandlers)}\n        {...testIdProps}\n        class={navigationListClass}>\n        <NavigationListContext.Provider\n          value={{\n            selection,\n            onSelectionChange,\n            onCurrentKeyChange,\n            currentKey,\n            showFocusRing,\n            navigationListItemPrefix,\n            onRemove\n          }}>\n          {children}\n        </NavigationListContext.Provider>\n      </ul>\n    );\n  }\n);\n","import {\n  BaseNavigationListItem,\n  BaseNavigationListItemProps\n} from '../UNSAFE_NavigationListCommon/BaseNavigationListItem';\n\nexport type NavigationListItemProps<K extends string | number> = Omit<\n  BaseNavigationListItemProps<K>,\n  'removeIcon'\n>;\n\nexport function NavigationListItem<K extends string | number>({\n  itemKey,\n  label,\n  badge,\n  metadata,\n  severity\n}: NavigationListItemProps<K>) {\n  return (\n    <BaseNavigationListItem\n      itemKey={itemKey}\n      label={label}\n      badge={badge}\n      metadata={metadata}\n      severity={severity}\n    />\n  );\n}\n"],"names":["extractOnlyItemKey","element","itemSelector","itemEliminator","navigationListItem","closest","removeButton","contains","keyExtractor","findNextCurrentKey","currentKey","currNavs","prevNavs","index","indexOf","nextKey","length","NavigationList","forwardRef","children","selection","onSelectionChange","onRemove","ariaLabel","ariaLabelLedBy","testId","ref","containerRef","useRef","showFocusRing","onCurrentKeyChange","containerHandlers","onKeyDown","ITEM_SELECTOR","setCurrentKey","useState","useCallback","detail","value","currentKeyProps","useCurrentKey","getPrevNextKeyUsingRef","undefined","focusRingProps","useCollectionFocusRing","onFocusProps","onFocus","current","key","getFirstVisibleKey","prevNavItems","useEffect","navListItemKey","Array","from","querySelectorAll","elem","getKey","event","reason","mergeProps","useNavigationList","eventProps","navigationListClass","classNames","navigationListStyles","uListStyle","navigationListItemPrefix","useId","testIdProps","useTestId","useImperativeHandle","focus","_jsx","role","tabIndex","class","NavigationListContext","Provider","itemKey","label","badge","metadata","severity","jsx","BaseNavigationListItem"],"mappings":"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"}