{"version":3,"file":"useChartDatatip-020b63ad.js","sources":["../../src/utils/PRIVATE_chartUtils/dataTipUtils.tsx","../../src/hooks/PRIVATE_useChartDatatip/useChartDatatip.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Group } from '../../UNSAFE_Axis/axis.types';\nimport { ChartItem, ChartSeries, ValueFormats } from '../../UNSAFE_Chart';\nimport { VisTabularDatatip } from '../../PRIVATE_VisTabularDatatip';\nimport { TableRowData } from '../../PRIVATE_VisTabularDatatip';\n/**\n * Returns the data required for the VisTabularDatatip to render.\n * @param activeInfo active item info.\n * @param series The array of chart series.\n * @param groups The array of chart groups.\n * @param valueFormats The array of chart series.\n * @param getDataItem function which returns chartItem\n */\nexport function getChartTabularData<K, D extends ChartItem<K>>(\n  data: D,\n  seriesValue: string,\n  groupValue: string,\n  valueFormats?: ValueFormats\n) {\n  //TODO: Use translation strings\n  const value = data.value;\n  const itemValue = valueFormats?.value?.format ? valueFormats?.value?.format?.(value) : value;\n  const tableData: TableRowData[] = [];\n\n  if (valueFormats?.series?.isDisplayed != false) {\n    tableData.push({ key: valueFormats?.series?.label || 'Series', value: seriesValue });\n  }\n  if (valueFormats?.group?.isDisplayed != false) {\n    tableData.push({ key: valueFormats?.group?.label || 'Group', value: groupValue });\n  }\n  if (valueFormats?.value?.isDisplayed != false) {\n    tableData.push({ key: valueFormats?.value?.label || 'Value', value: itemValue });\n  }\n  return tableData;\n}\n\nexport function getDefaultDatatipRenderer<\n  K extends string | number,\n  D extends ChartItem<K>\n>(options: { series: ChartSeries<K, D>; groups: Group; valueFormats?: ValueFormats }) {\n  return (context: { data: D }) => ({\n    content: (\n      <VisTabularDatatip\n        tableData={getChartTabularData(\n          context.data,\n          options.series.name || options.series.id.toString(),\n          options.groups.name || options.groups.id,\n          options.valueFormats\n        )}\n      />\n    ),\n    borderColor: context.data.color || options.series.color\n  });\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { Scale } from '../../UNSAFE_Chart';\nimport { calculateOffset, useDatatip } from '../PRIVATE_useDatatip';\nimport { DataCursorPosition } from '../UNSAFE_useChartDataCursor/DataCursor.types';\nimport { BarSeries } from '../../UNSAFE_BarChart/barChart.types';\nimport { Dimension, Group } from '../../UNSAFE_Axis/axis.types';\nimport { ChartItem, Info, ValueFormats } from '../../UNSAFE_Chart';\nimport { getDefaultDatatipRenderer } from '../../utils/PRIVATE_chartUtils/dataTipUtils';\nimport { LineAreaSeries } from '../../UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { getColorRamp } from '../../utils/UNSAFE_visUtils';\nimport { Placement } from '../../UNSAFE_Floating';\nimport { useUser } from '../../hooks/UNSAFE_useUser';\nimport { Property } from 'csstype';\n\ntype Props<K extends string | number, D extends ChartItem<K>> = {\n  series: (BarSeries<K, D> | LineAreaSeries<K, D>)[];\n  groups: Group[];\n  isDataCursorEnabled?: boolean;\n  dataCursorPosition?: DataCursorPosition;\n  isHoriz: boolean;\n  getDataItemPos: (seriesIndex: number, groupIndex: number) => Dimension | undefined;\n  datatip?: (context: { data: D; seriesIndex: number; groupIndex: number; id: K }) => {\n    content: ComponentChildren;\n    borderColor?: Property.BorderColor;\n  };\n  xScale: Scale;\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined;\n  hoveredItemInfo?: Info;\n  focusedItemInfo?: Info;\n  width: number;\n  height: number;\n  valueFormats?: ValueFormats;\n  findNearest: (x: number, y: number) => any;\n};\nconst DATA_CURSOR_OFFSET = 10;\n\nexport const useChartDatatip = <K extends string | number, D extends ChartItem<K>>({\n  isDataCursorEnabled,\n  dataCursorPosition,\n  isHoriz,\n  datatip,\n  xScale,\n  getDataItem,\n  getDataItemPos,\n  hoveredItemInfo,\n  focusedItemInfo,\n  series,\n  valueFormats,\n  groups,\n  width,\n  height,\n  findNearest\n}: Props<K, D>) => {\n  let activeInfo = focusedItemInfo?.isCurrent\n    ? focusedItemInfo\n    : hoveredItemInfo?.isCurrent &&\n      hoveredItemInfo.seriesIndex !== undefined &&\n      hoveredItemInfo.groupIndex !== undefined\n    ? hoveredItemInfo\n    : undefined;\n\n  const anchor = focusedItemInfo?.isCurrent || isDataCursorEnabled ? 'element' : 'pointer';\n  const elementBounds = focusedItemInfo?.isCurrent\n    ? getDataItemPos(focusedItemInfo.seriesIndex!, focusedItemInfo.groupIndex!)\n    : undefined;\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  let placement = 'top-start' as Placement;\n  let offset = calculateOffset(isRtl, width, elementBounds);\n  if (isDataCursorEnabled && dataCursorPosition?.x != null && dataCursorPosition?.y != null) {\n    // TOD0: The offset for data cursor should be calculated according to\n    // datatip content dimensions as well.\n    activeInfo = activeInfo || findNearest?.(dataCursorPosition.x, dataCursorPosition.y);\n    const xPos = xScale.transform(dataCursorPosition.x);\n    offset = { mainAxis: -1, crossAxis: -1 };\n    if (isHoriz) {\n      placement = 'end';\n      offset.mainAxis = -1 * DATA_CURSOR_OFFSET;\n      offset.crossAxis = xPos - height / 2;\n    } else {\n      placement = 'top';\n      offset.crossAxis = isRtl ? width / 2 - xPos : xPos - width / 2;\n      offset.mainAxis = -1 * DATA_CURSOR_OFFSET;\n    }\n  }\n\n  let dtContent;\n  let item: D | undefined;\n  if (activeInfo?.seriesIndex != null && activeInfo?.groupIndex != null) {\n    item = getDataItem(activeInfo.seriesIndex, activeInfo.groupIndex!);\n    const datatipContext = item\n      ? {\n          data: item,\n          seriesIndex: activeInfo.seriesIndex,\n          groupIndex: activeInfo.groupIndex,\n          id: item.id\n        }\n      : undefined;\n\n    if (datatipContext) {\n      const datatipRenderer =\n        datatip ||\n        getDefaultDatatipRenderer({\n          series: series[activeInfo.seriesIndex],\n          groups: groups[activeInfo.groupIndex],\n          valueFormats\n        });\n      dtContent = datatipRenderer(datatipContext);\n    }\n  }\n  const colors = getColorRamp();\n  const borderColor =\n    dtContent?.borderColor ||\n    (activeInfo &&\n      ((series[activeInfo.seriesIndex!] as BarSeries<K, D>).color ||\n        (series[activeInfo.seriesIndex!] as LineAreaSeries<K, D>).lineColor ||\n        (series[activeInfo.seriesIndex!] as LineAreaSeries<K, D>).areaColor)) ||\n    (activeInfo && colors[activeInfo.seriesIndex! % colors.length]);\n\n  const { datatipContent, datatipProps } = useDatatip({\n    content: dtContent?.content,\n    anchor,\n    placement,\n    offset,\n    borderColor\n  });\n\n  return { datatipContent, datatipProps };\n};\n"],"names":["getChartTabularData","data","seriesValue","groupValue","valueFormats","value","itemValue","format","tableData","series","isDisplayed","push","key","label","group","isDataCursorEnabled","dataCursorPosition","isHoriz","datatip","xScale","getDataItem","getDataItemPos","hoveredItemInfo","focusedItemInfo","groups","width","height","findNearest","activeInfo","isCurrent","undefined","seriesIndex","groupIndex","anchor","elementBounds","direction","useUser","isRtl","dtContent","item","placement","offset","calculateOffset","x","y","xPos","transform","mainAxis","crossAxis","datatipContext","id","options","context","content","_jsx","jsx","VisTabularDatatip","name","toString","borderColor","color","colors","getColorRamp","lineColor","areaColor","length","datatipContent","datatipProps","useDatatip"],"mappings":"4NAoBM,SAAUA,EACdC,EACAC,EACAC,EACAC,GAGA,MAAMC,EAAQJ,EAAKI,MACbC,EAAYF,GAAcC,OAAOE,OAASH,GAAcC,OAAOE,SAASF,GAASA,EACjFG,EAA4B,GAWlC,OATyC,GAArCJ,GAAcK,QAAQC,aACxBF,EAAUG,KAAK,CAAEC,IAAKR,GAAcK,QAAQI,OAAS,SAAUR,MAAOH,IAEhC,GAApCE,GAAcU,OAAOJ,aACvBF,EAAUG,KAAK,CAAEC,IAAKR,GAAcU,OAAOD,OAAS,QAASR,MAAOF,IAE9B,GAApCC,GAAcC,OAAOK,aACvBF,EAAUG,KAAK,CAAEC,IAAKR,GAAcC,OAAOQ,OAAS,QAASR,MAAOC,IAE/DE,CACT,mBCE+B,EAC7BO,sBACAC,qBACAC,UACAC,UACAC,SACAC,cACAC,iBACAC,kBACAC,kBACAd,SACAL,eACAoB,SACAC,QACAC,SACAC,kBAEA,IAAIC,EAAaL,GAAiBM,UAC9BN,EACAD,GAAiBO,gBACeC,IAAhCR,EAAgBS,kBACeD,IAA/BR,EAAgBU,WAChBV,OACAQ,EAEJ,MAAMG,EAASV,GAAiBM,WAAad,EAAsB,UAAY,UACzEmB,EAAgBX,GAAiBM,UACnCR,EAAeE,EAAgBQ,YAAcR,EAAgBS,iBAC7DF,GAEEK,UAAEA,GAAcC,EAAAA,UAChBC,EAAsB,QAAdF,EAEd,IAmBIG,EACAC,EApBAC,EAAY,YACZC,EAASC,EAAeA,gBAACL,EAAOZ,EAAOS,GAC3C,GAAInB,GAAgD,MAAzBC,GAAoB2B,GAAsC,MAAzB3B,GAAoB4B,EAAW,CAGzFhB,EAAaA,GAAcD,IAAcX,EAAmB2B,EAAG3B,EAAmB4B,GAClF,MAAMC,EAAO1B,EAAO2B,UAAU9B,EAAmB2B,GACjDF,EAAS,CAAEM,UAAW,EAAGC,WAAY,GACjC/B,GACFuB,EAAY,MACZC,EAAOM,UAAW,GAClBN,EAAOO,UAAYH,EAAOnB,EAAS,IAEnCc,EAAY,MACZC,EAAOO,UAAYX,EAAQZ,EAAQ,EAAIoB,EAAOA,EAAOpB,EAAQ,EAC7DgB,EAAOM,UAAW,GAErB,CAID,GAA+B,MAA3BnB,GAAYG,aAAiD,MAA1BH,GAAYI,WAAoB,CACrEO,EAAOnB,EAAYQ,EAAWG,YAAaH,EAAWI,YACtD,MAAMiB,EAAiBV,EACnB,CACEtC,KAAMsC,EACNR,YAAaH,EAAWG,YACxBC,WAAYJ,EAAWI,WACvBkB,GAAIX,EAAKW,SAEXpB,EAEJ,GAAImB,EAAgB,CAQlBX,GANEpB,IDhENiC,ECiEgC,CACxB1C,OAAQA,EAAOmB,EAAWG,aAC1BP,OAAQA,EAAOI,EAAWI,YAC1B5B,gBDnEAgD,IAA0B,CAChCC,QACEC,EAACC,IAAAC,qBACChD,UAAWR,EACToD,EAAQnD,KACRkD,EAAQ1C,OAAOgD,MAAQN,EAAQ1C,OAAOyC,GAAGQ,WACzCP,EAAQ3B,OAAOiC,MAAQN,EAAQ3B,OAAO0B,GACtCC,EAAQ/C,gBAIduD,YAAaP,EAAQnD,KAAK2D,OAAST,EAAQ1C,OAAOmD,UC0DpBX,EAC7B,CACF,CD3EG,IAGJE,ECyEA,MAAMU,EAASC,EAAAA,eACTH,EACJrB,GAAWqB,aACV/B,IACGnB,EAAOmB,EAAWG,aAAkC6B,OACnDnD,EAAOmB,EAAWG,aAAuCgC,WACzDtD,EAAOmB,EAAWG,aAAuCiC,YAC7DpC,GAAciC,EAAOjC,EAAWG,YAAe8B,EAAOI,SAEnDC,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDf,QAASf,GAAWe,QACpBpB,SACAO,YACAC,SACAkB,gBAGF,MAAO,CAAEO,iBAAgBC,eAAc"}