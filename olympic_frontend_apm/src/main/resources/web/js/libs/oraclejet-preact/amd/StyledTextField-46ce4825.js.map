{"version":3,"file":"StyledTextField-46ce4825.js","sources":["../../src/UNSAFE_TextField/ReadonlyTextField.tsx","../../src/UNSAFE_TextField/StyledTextField.tsx"],"sourcesContent":["import { ComponentChildren, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { LabelValueLayout } from '../UNSAFE_LabelValueLayout';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { Size } from '../utils/UNSAFE_size';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { ReadonlyTextFieldVariantOptions } from './themes/ReadonlyTextFieldStyles.css';\nimport { TextFieldStyles } from './themes/TextFieldStyles.css';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport { LabelRedwoodTheme } from '../UNSAFE_Label/themes/redwood/LabelTheme';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { ReadonlyTextFieldRedwoodTheme } from './themes/redwood/ReadonlyTextFieldTheme';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { layoutSpanStyles, LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\n\ntype DivProps = HTMLAttributesSignalExcluded<HTMLDivElement>;\ntype UAProps = {\n  compactUserAssistance?: ComponentChildren;\n  inlineUserAssistance?: ComponentChildren;\n};\ntype InnerOuterClassNamesProps = {\n  outerClassNames?: string;\n  innerClassNames?: string;\n};\n\ntype StartTopLabelReadonlyTextFieldProps = Omit<DivProps, 'label'> &\n  UAProps &\n  InnerOuterClassNamesProps & {\n    label?: ComponentChildren;\n    labelEdge?: 'start' | 'top';\n    labelStartWidth?: Size;\n  };\n\nconst StartTopLabelReadonlyTextField = forwardRef(\n  (\n    {\n      outerClassNames,\n      innerClassNames,\n      label,\n      labelEdge,\n      labelStartWidth,\n      compactUserAssistance,\n      inlineUserAssistance,\n      children,\n      ...props\n    }: StartTopLabelReadonlyTextFieldProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    return (\n      <div {...props} ref={ref} class={outerClassNames}>\n        {compactUserAssistance}\n        <LabelValueLayout label={label} labelEdge={labelEdge} labelStartWidth={labelStartWidth}>\n          <div class={innerClassNames}>{children}</div>\n        </LabelValueLayout>\n        {inlineUserAssistance}\n      </div>\n    );\n  }\n);\n\ntype InsideLabelReadonlyTextFieldProps = DivProps & UAProps & InnerOuterClassNamesProps;\nconst InsideLabelReadonlyTextField = forwardRef(\n  (\n    {\n      outerClassNames,\n      innerClassNames,\n      compactUserAssistance,\n      inlineUserAssistance,\n      children,\n      ...props\n    }: InsideLabelReadonlyTextFieldProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    return (\n      <div {...props} ref={ref} class={outerClassNames}>\n        {compactUserAssistance}\n        <div class={innerClassNames}>{children}</div>\n        {inlineUserAssistance}\n      </div>\n    );\n  }\n);\n\nexport type StyleProps = UAProps & {\n  columnSpan?: LayoutColumnSpan;\n  label?: ComponentChildren;\n  labelEdge?: 'inside' | 'start' | 'top';\n  variant?: 'textarea';\n};\n\ntype Props = TestIdProps & StyledComponentProps<'div', StyleProps>;\n\nexport const ReadonlyTextField = forwardRef(\n  (\n    { columnSpan = 1, label, labelEdge, children, variant, testId, ...props }: Props,\n    ref?: Ref<HTMLElement>\n  ) => {\n    const testIdProps = useTestId(testId);\n    const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n    const { isLoading } = useFormFieldContext();\n    const hasInsideLabel = label !== undefined && labelEdge === 'inside';\n    const isInsideNonReadonlyForm = isFormLayout && !isReadonlyForm;\n    const { direction } = useUser();\n    const isLtr = direction === 'ltr';\n    const inputGroupContext = useInputGroupContext();\n    const hasGroupContext = inputGroupContext !== null;\n    // depending on browser direction, apply the appropriate styling.\n    // when 'rtl' the flex row direction is reversed.\n    const inputGroupPosition = inputGroupContext\n      ? inputGroupContext.last\n        ? isLtr\n          ? 'groupRight'\n          : 'groupLeft'\n        : inputGroupContext.index === 0\n        ? isLtr\n          ? 'groupLeft'\n          : 'groupRight'\n        : 'groupMiddle'\n      : undefined;\n\n    const { classes, styles } = useComponentTheme(TextFieldRedwoodTheme, {\n      readonly: 'isReadonly'\n    });\n    const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n    const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n    const { classes: readonlyClassNames } = useComponentTheme<\n      ReadonlyTextFieldVariantOptions,\n      TextFieldStyles\n    >(ReadonlyTextFieldRedwoodTheme, {\n      insideNonReadonlyForm: isInsideNonReadonlyForm\n        ? 'isInsideNonReadonlyForm'\n        : 'notInsideNonReadonlyForm',\n      insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n      textarea: variant === 'textarea' ? 'isTextArea' : 'notTextArea',\n      loading: isLoading ? 'isLoading' : 'notLoading',\n      withinGroup: hasGroupContext ? 'isWithinGroup' : undefined,\n      inputGroupPosition\n    });\n\n    const { formControlBase } = styles;\n    const outerClassNames = classNames([\n      classes,\n      formControlBase,\n      formLayoutTheme,\n      labelBaseTheme,\n      layoutSpanStyles.layoutSpanColumn[columnSpan]\n    ]);\n\n    if (label !== undefined && (labelEdge === 'start' || labelEdge === 'top')) {\n      return (\n        <StartTopLabelReadonlyTextField\n          outerClassNames={outerClassNames}\n          innerClassNames={readonlyClassNames}\n          label={label}\n          labelEdge={labelEdge}\n          ref={ref as Ref<HTMLDivElement> | undefined}\n          {...props}\n          {...testIdProps}>\n          {children}\n        </StartTopLabelReadonlyTextField>\n      );\n    }\n\n    return (\n      <InsideLabelReadonlyTextField\n        outerClassNames={outerClassNames}\n        innerClassNames={readonlyClassNames}\n        ref={ref as Ref<HTMLDivElement> | undefined}\n        {...props}\n        {...testIdProps}>\n        {label}\n        {children}\n      </InsideLabelReadonlyTextField>\n    );\n  }\n);\n","import { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { LabelRedwoodTheme } from '../UNSAFE_Label/themes/redwood/LabelTheme';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport { SkeletonRedwoodTheme } from '../UNSAFE_Skeleton/themes/redwood/SkeletonTheme';\nimport { layoutSpanStyles, LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\n\nexport type StyleProps = {\n  columnSpan?: LayoutColumnSpan;\n  hasInsideLabel?: boolean;\n  variant?: 'default' | 'embedded';\n};\ntype Props = StyledComponentProps<'div', StyleProps>;\n\nexport const StyledTextField = forwardRef(\n  ({ columnSpan = 1, hasInsideLabel = false, variant = 'default', ...props }: Props, ref?: Ref<HTMLElement>) => {\n    // because of the mismatch of height for inputs with inside labels and no labels,\n    // we'll have to set everything to the same min-height while within an input group context.\n    // Here we'll look to see if it's present and apply the style as needed\n    const groupContext = useInputGroupContext();\n    const { isReadonly } = useFormFieldContext();\n    const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n    const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n    const { classes: textFieldClasses, styles } = useComponentTheme<\n      TextFieldVariantOptions,\n      TextFieldStyles\n    >(TextFieldRedwoodTheme, {\n      readonly: isReadonly ? 'isReadonly' : 'notReadonly',\n      formControlInsideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n      withinGroup: groupContext !== null ? 'isWithinGroup' : undefined\n    });\n\n    const { formControlBase, textFieldBase, textFieldEmbedded } = styles;\n\n    // because TextField components reference Skeleton scoped vars, we need to bring in the Skeleton base theme\n    // to pick up the scoped var definitions.\n    const { baseTheme: skeletonBaseTheme } = useComponentTheme(SkeletonRedwoodTheme);\n\n    const classes = classNames([\n      skeletonBaseTheme,\n      formControlBase,\n      textFieldBase,\n      variant === 'embedded' && textFieldEmbedded,\n      textFieldClasses,\n      formLayoutTheme,\n      labelBaseTheme,\n      layoutSpanStyles.layoutSpanColumn[columnSpan]\n    ]);\n\n    return <div {...props} class={classes} ref={ref as Ref<HTMLDivElement> | undefined} />;\n  }\n);\n"],"names":["StartTopLabelReadonlyTextField","forwardRef","outerClassNames","innerClassNames","label","labelEdge","labelStartWidth","compactUserAssistance","inlineUserAssistance","children","props","ref","_jsxs","class","_jsx","LabelValueLayout","jsx","InsideLabelReadonlyTextField","jsxs","ReadonlyTextField","columnSpan","variant","testId","testIdProps","useTestId","isFormLayout","isReadonly","isReadonlyForm","useFormContext","isLoading","useFormFieldContext","hasInsideLabel","undefined","isInsideNonReadonlyForm","direction","useUser","isLtr","inputGroupContext","useInputGroupContext","hasGroupContext","inputGroupPosition","last","index","classes","styles","useComponentTheme","TextFieldRedwoodTheme","readonly","baseTheme","labelBaseTheme","LabelRedwoodTheme","formLayoutTheme","FormLayoutRedwoodTheme","readonlyClassNames","ReadonlyTextFieldRedwoodTheme","insideNonReadonlyForm","insideLabel","textarea","loading","withinGroup","formControlBase","classNames","layoutSpanStyles","layoutSpanColumn","StyledTextField","groupContext","textFieldClasses","formControlInsideLabel","textFieldBase","textFieldEmbedded","skeletonBaseTheme","SkeletonRedwoodTheme"],"mappings":"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"}