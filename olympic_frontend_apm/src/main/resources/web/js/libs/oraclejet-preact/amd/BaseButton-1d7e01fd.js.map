{"version":3,"file":"BaseButton-1d7e01fd.js","sources":["../../src/UNSAFE_BaseButton/BaseButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Vers.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { useActive } from '../hooks/UNSAFE_useActive';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { useColorScheme } from '../hooks/UNSAFE_useColorScheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { multiVariantStyles } from './themes/BaseButtonStyles.css';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\n\nexport type ActionDetail = {\n  reason: 'pointer' | 'keyboard';\n};\n\ntype BaseButtonElementDetails =\n  | { type: 'button'; isFocusable?: never; buttonType?: 'button' | 'submit' }\n  | { type: 'a'; href: string; target?: string; rel?: string; isFocusable?: never }\n  | { type: 'span'; isFocusable?: boolean };\n\ntype IntrinsicProps = Pick<\n  HTMLAttributesSignalExcluded<HTMLElement>,\n  | 'autofocus'\n  | 'title'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onTouchEnd'\n  | 'onTouchStart'\n  | 'onKeyDown'\n>;\nexport type StylingOptions =\n  | 'default'\n  | 'min'\n  | 'embedded'\n  | 'container'\n  | 'unstyled'\n  | 'fill'\n  | 'noBorderRadiusEnd'\n  | 'noBorderRadiusStart'\n  | 'active';\n\ntype AriaProps = {\n  'aria-label'?: string;\n  'aria-hidden'?: boolean;\n  'aria-expanded'?: boolean;\n  'aria-roledescription'?: string;\n  'aria-describedby'?: string;\n  'aria-haspopup'?: string;\n};\n\nexport type Props = IntrinsicProps &\n  AriaProps &\n  DimensionProps &\n  TestIdProps & {\n    /**\n     *The default slot is the button's text label. The oj-c-base-button element accepts plain text or DOM nodes as children for the default slot.\"\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies if repeated events are dispatched for key or pointer held down\n     */\n    isRepeat?: boolean;\n\n    /**\n     *\n     * Indicates in what states the button has chrome (background and border).\n     *     \"ghost\": \"Ghost buttons are the least prominent variation.  Ghost buttons are\n     * useful for performing low-priority tasks, such as manipulating the UI.\",\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\"\n     */\n    variant?: 'ghost' | 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';\n\n    /**\n     * The size indicates how large the button is rendered: 'xs', \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'xs' | 'sm' | 'md' | 'lg';\n\n    /**\n     * Edge can be used to specify that the button is intended to go at the bottom of\n     * a region, stretching from left to right: \"bottom\" or \"none\" (default).\n     */\n    edge?: 'none' | 'bottom';\n\n    /**\n     * Styling can be used for customizing buttons by removing label padding (\"min\") or\n     * removing all styling (\"unstyled\").\n     */\n    styling?: StylingOptions[];\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: (details: ActionDetail) => void;\n\n    /**\n     * Indicate element type and associated details\n     */\n    elementDetails?: BaseButtonElementDetails;\n  };\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\nconst clientHints = getClientHints();\n// :active only works on IOS devices if a touch handler exists\nconst iosProps = clientHints.platform === 'ios' ? { ontouchstart: function () {} } : {};\nconst isHybrid = getClientHints().hoverSupport === 'events';\n\nconst roleProps = (\n  elType: string,\n  hidden: boolean,\n  isFocusable: boolean\n): { role?: HTMLAttributesSignalExcluded['role'] } => {\n  switch (elType) {\n    case 'link':\n      return { role: 'link' };\n    case 'button':\n      return {};\n    default:\n      return hidden ? { role: 'none' } : isFocusable ? { role: 'button' } : { role: 'img' };\n  }\n};\n\nexport const BaseButton = forwardRef(\n  (\n    {\n      variant,\n      isDisabled = false,\n      isRepeat = false,\n      size,\n      elementDetails = { type: 'button', buttonType: 'button' },\n      styling = ['default'],\n      edge = 'none',\n      'aria-label': accessibleLabel,\n      'aria-hidden': ariaHidden,\n      'aria-expanded': ariaExpanded,\n      'aria-roledescription': ariaRoledescription,\n      'aria-haspopup': ariaHasPopup,\n      'aria-describedby': ariaDescribedBy,\n      testId,\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart,\n      onKeyDown,\n      ...props\n    }: Props,\n    ref?:\n      | ForwardedRef<HTMLButtonElement>\n      | ForwardedRef<HTMLAnchorElement>\n      | ForwardedRef<HTMLSpanElement>\n  ) => {\n    const pressHandler = (e: Event) => {\n      if (props.onAction) {\n        props.onAction({\n          reason: e.type == 'keyup' ? 'keyboard' : 'pointer'\n        });\n      }\n    };\n\n    const { pressProps } = usePress(pressHandler, {\n      isDisabled,\n      isRepeat\n    });\n    const isStyled = (name: StylingOptions) => {\n      return styling.indexOf(name) > -1;\n    };\n    const { hoverProps, isHover } = useHover({ isDisabled: !isHybrid });\n    const { activeProps, isActive } = useActive();\n    const { class: cls, ...styles } = styleInterpolations(props);\n    const {\n      type: elementType = 'button',\n      isFocusable: isElementFocusable = true,\n      buttonType = 'button',\n      ...elementProps\n    } = { ...elementDetails };\n    const typeProps =\n      elementType === 'button' && buttonType === 'button' ? { type: buttonType } : {};\n\n    // 'role' should be 'none' when aria-hidden is true or 'img' when false and not focusable\n    const role = roleProps(elementType, ariaHidden ?? false, isElementFocusable);\n    const ElementType = elementDetails.type;\n    const isSpan = ElementType == 'span';\n    const isBaseButton = ElementType == 'button';\n    const { tabbableModeProps } = useTabbableMode(isDisabled);\n    const colorScheme = useColorScheme();\n\n    const variantClasses = multiVariantStyles({\n      size,\n      variant,\n      unstyled: isStyled('unstyled') ? 'isUnstyled' : 'notUnstyled',\n      embedded: isStyled('embedded') ? 'isEmbedded' : 'notEmbedded',\n      container: isStyled('container') ? 'isContainer' : 'notContainer',\n      noBorderRadiusStart: isStyled('noBorderRadiusStart')\n        ? 'isNoBorderRadiusStart'\n        : 'notNoBorderRadiusStart',\n      noBorderRadiusEnd: isStyled('noBorderRadiusEnd')\n        ? 'isNoBorderRadiusEnd'\n        : 'notNoBorderRadiusEnd',\n      activeStyle: isStyled('active') ? 'isActiveStyle' : 'notActiveStyle',\n      fill: isStyled('fill') ? 'isFill' : 'notFill',\n      min: isStyled('min') ? 'isMin' : 'notMin',\n      disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      edge,\n      hybrid: isHybrid ? 'isHybrid' : 'notHybrid',\n      active: isActive ? 'isActive' : 'notActive',\n      hover: isHover ? 'isHover' : 'notHover',\n      span: isSpan ? 'isSpan' : 'notSpan',\n      colorScheme\n    });\n\n    const globalEventProps = {\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart,\n      onKeyDown\n    };\n\n    const mergedProps = mergeProps(\n      elementProps,\n      pressProps,\n      iosProps,\n      hoverProps,\n      isStyled('container') ? {} : activeProps,\n      isBaseButton ? {} : { 'aria-disabled': isDisabled },\n      globalEventProps\n    );\n\n    const wrapperClasses = classNames([cls, variantClasses]);\n    const testIdProps = useTestId(testId);\n\n    const getTabIndex = () => {\n      if (isSpan && (isElementFocusable === false || isDisabled)) {\n        // no tabIndex value should be defined for a span element when disabled or non-focusable\n        return { tabIndex: undefined };\n      }\n      return tabbableModeProps;\n    };\n\n    return (\n      <ElementType\n        // The ref casting was done to satisfy TS compiler, when the forwardRef had to be updated to ForwardedRef.\n        ref={\n          ref as ForwardedRef<HTMLButtonElement> &\n            ForwardedRef<HTMLAnchorElement> &\n            ForwardedRef<HTMLSpanElement>\n        }\n        disabled={isDisabled}\n        class={wrapperClasses}\n        style={styles}\n        autofocus={props['autofocus']}\n        title={props.title}\n        {...getTabIndex()}\n        aria-label={accessibleLabel}\n        aria-haspopup={ariaHasPopup ? 'menu' : undefined}\n        aria-describedby={ariaDescribedBy}\n        aria-hidden={ariaHidden}\n        aria-roledescription={ariaRoledescription}\n        aria-expanded={ariaExpanded}\n        {...typeProps}\n        {...testIdProps}\n        {...mergedProps}\n        {...role}>\n        {props.children}\n      </ElementType>\n    );\n  }\n);\n\nBaseButton.displayName = 'BaseButton';\n"],"names":["interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","iosProps","getClientHints","platform","ontouchstart","isHybrid","hoverSupport","BaseButton","forwardRef","variant","isDisabled","isRepeat","size","elementDetails","type","buttonType","styling","edge","accessibleLabel","ariaHidden","ariaExpanded","ariaRoledescription","ariaHasPopup","ariaDescribedBy","testId","onBlur","onFocus","onMouseEnter","onMouseLeave","onTouchEnd","onTouchStart","onKeyDown","props","ref","pressProps","usePress","e","onAction","reason","isStyled","name","indexOf","hoverProps","isHover","useHover","activeProps","isActive","useActive","class","cls","styles","elementType","isFocusable","isElementFocusable","elementProps","typeProps","role","elType","hidden","roleProps","ElementType","isSpan","isBaseButton","tabbableModeProps","useTabbableMode","colorScheme","useColorScheme","variantClasses","multiVariantStyles","unstyled","embedded","container","noBorderRadiusStart","noBorderRadiusEnd","activeStyle","fill","min","disabled","hybrid","active","hover","span","globalEventProps","mergedProps","mergeProps","wrapperClasses","classNames","testIdProps","useTestId","_jsx","style","autofocus","title","tabIndex","undefined","children","displayName"],"mappings":"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"}