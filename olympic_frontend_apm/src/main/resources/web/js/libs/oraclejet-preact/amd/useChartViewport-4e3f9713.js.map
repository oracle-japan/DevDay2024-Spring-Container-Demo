{"version":3,"file":"useChartViewport-4e3f9713.js","sources":["../../src/hooks/PRIVATE_useChartViewport/utils.ts","../../src/hooks/PRIVATE_useChartViewport/useChartViewport.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Scale } from '../../UNSAFE_Chart';\nexport function getAxisBoundsByDelta(\n  xViewportExtent: { viewportMin: number; viewportMax: number },\n  xAxisExtent: { min: number; max: number },\n  yViewportExtent: { viewportMin: number; viewportMax: number },\n  yAxisExtent: { min: number; max: number },\n  xScale: Scale,\n  yScale: Scale,\n  xMin: number,\n  xMax: number,\n  yMin: number,\n  yMax: number,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  const { viewportMin: xViewportMin, viewportMax: xViewportMax } = xViewportExtent;\n  const { min: xAxisMin, max: xAxisMax } = xAxisExtent;\n  const { viewportMin: yViewportMin, viewportMax: yViewportMax } = yViewportExtent;\n  const { min: yAxisMin, max: yAxisMax } = yAxisExtent;\n  const deltas = convertToAxisCoord(xMin, xMax, yMin, yMax, isRtl, isHoriz);\n  const xExtents = getAxisMinMaxByDelta(\n    xViewportMin,\n    xViewportMax,\n    xAxisMin,\n    xAxisMax,\n    xScale,\n    deltas['xMin'],\n    deltas['xMax']\n  );\n  const yExtents = getAxisMinMaxByDelta(\n    yViewportMin,\n    yViewportMax,\n    yAxisMin,\n    yAxisMax,\n    yScale,\n    deltas['yMin'],\n    deltas['yMax']\n  );\n\n  return { xExtents, yExtents };\n}\n\nexport function convertToAxisCoord(\n  xMin: number,\n  xMax: number,\n  yMin: number,\n  yMax: number,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  const axisCoord: Record<string, any> = {};\n  if (isHoriz) {\n    axisCoord['xMin'] = yMin;\n    axisCoord['xMax'] = yMax;\n    axisCoord['yMin'] = isRtl ? xMax : xMin;\n    axisCoord['yMax'] = isRtl ? xMin : xMax;\n  } else {\n    axisCoord['xMin'] = isRtl ? xMax : xMin;\n    axisCoord['xMax'] = isRtl ? xMin : xMax;\n    axisCoord['yMin'] = yMax;\n    axisCoord['yMax'] = yMin;\n  }\n  return axisCoord;\n}\n\nexport function getAxisMinMaxByDelta(\n  viewportMin: number,\n  viewportMax: number,\n  globalMin: number,\n  globalMax: number,\n  axisScale: Scale,\n  minDelta: number,\n  maxDelta: number\n) {\n  const minDeltaVal = axisScale.invert(minDelta) - axisScale.invert(0);\n  const maxDeltaVal = axisScale.invert(maxDelta) - axisScale.invert(0);\n\n  let weight = 1;\n  const newExtent = viewportMax + maxDeltaVal - (viewportMin + minDeltaVal);\n  const minExtent = 1; //axisInfo.getMinExtent();\n  if (minDelta != maxDelta && newExtent < minExtent)\n    weight = (viewportMax - viewportMin - minExtent) / (minDeltaVal - maxDeltaVal);\n\n  viewportMin += minDeltaVal * weight;\n  viewportMax += maxDeltaVal * weight;\n\n  // Limit to global min/max\n  if (viewportMax - viewportMin >= globalMax - globalMin) {\n    viewportMin = globalMin;\n    viewportMax = globalMax;\n  } else if (viewportMin < globalMin) {\n    viewportMax += globalMin - viewportMin;\n    viewportMin = globalMin;\n  } else if (viewportMax > globalMax) {\n    viewportMin -= viewportMax - globalMax;\n    viewportMax = globalMax;\n  }\n\n  return { viewportMin, viewportMax };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Scale } from '../../UNSAFE_Chart';\nimport { getAxisBoundsByDelta } from './utils';\ntype ViewportHandlerProps = {\n  width: number;\n  height: number;\n  plotAreaSpace: { x: number; y: number; width: number; height: number };\n  isRtl: boolean;\n  isHoriz: boolean;\n  xViewportExtent: { viewportMin: number; viewportMax: number };\n  yViewportExtent: { viewportMin: number; viewportMax: number };\n  xAxisExtent: { min: number; max: number };\n  yAxisExtent: { min: number; max: number };\n  yScale: Scale;\n  xScale: Scale;\n  zoomAndScroll: 'live' | 'off';\n  onViewportChange?: (detail: any) => void;\n};\n\nconst VIEWPORT_SCALE = 0.05;\n\nexport function useChartViewport({\n  plotAreaSpace,\n  xViewportExtent,\n  xAxisExtent,\n  yAxisExtent,\n  yViewportExtent,\n  yScale,\n  xScale,\n  onViewportChange,\n  isHoriz,\n  zoomAndScroll,\n  isRtl\n}: ViewportHandlerProps) {\n  const onWheel = (event: WheelEvent) => {\n    const delta = (isHoriz ? 1 : -1) * event.deltaY * VIEWPORT_SCALE;\n    const deltaXMin = delta * (event.offsetX - plotAreaSpace.x);\n    const deltaXMax = -delta * (plotAreaSpace.x + plotAreaSpace.width - event.offsetX);\n    const deltaYMin = delta * (event.offsetY - plotAreaSpace.y);\n    const deltaYMax = -delta * (plotAreaSpace.y + plotAreaSpace.height - event.offsetY);\n    const extents = getAxisBoundsByDelta(\n      xViewportExtent,\n      xAxisExtent,\n      yViewportExtent,\n      yAxisExtent,\n      xScale,\n      yScale,\n      deltaXMin,\n      deltaXMax,\n      deltaYMin,\n      deltaYMax,\n      isRtl,\n      isHoriz\n    );\n    onViewportChange?.({\n      xMin: extents.xExtents.viewportMin,\n      yMin: extents.yExtents.viewportMin,\n      xMax: extents.xExtents.viewportMax,\n      yMax: extents.yExtents.viewportMax\n    });\n    event.preventDefault();\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    const zoomIn = key === '+' || key === '=';\n    const zoomOut = key === '-' || key === '_';\n\n    if (!zoomIn && !zoomOut) {\n      return;\n    }\n    const zoomRatio = zoomIn ? 1.5 : 1 / 1.5;\n    const shiftRatio = (1 / zoomRatio - 1) / 2;\n\n    const deltaXMin = -1 * shiftRatio * plotAreaSpace.width;\n    const deltaXMax = shiftRatio * plotAreaSpace.width;\n    const deltaYMin = -1 * shiftRatio * plotAreaSpace.height;\n    const deltaYMax = shiftRatio * plotAreaSpace.height;\n\n    const extents = getAxisBoundsByDelta(\n      xViewportExtent,\n      xAxisExtent,\n      yViewportExtent,\n      yAxisExtent,\n      xScale,\n      yScale,\n      deltaXMin,\n      deltaXMax,\n      deltaYMin,\n      deltaYMax,\n      isRtl,\n      isHoriz\n    );\n    onViewportChange?.({\n      xMin: extents.xExtents.viewportMin,\n      yMin: extents.yExtents.viewportMin,\n      xMax: extents.xExtents.viewportMax,\n      yMax: extents.yExtents.viewportMax\n    });\n  };\n\n  return onViewportChange && zoomAndScroll === 'live' ? { onWheel, onKeyDown } : {};\n}\n"],"names":["getAxisBoundsByDelta","xViewportExtent","xAxisExtent","yViewportExtent","yAxisExtent","xScale","yScale","xMin","xMax","yMin","yMax","isRtl","isHoriz","viewportMin","xViewportMin","viewportMax","xViewportMax","min","xAxisMin","max","xAxisMax","yViewportMin","yViewportMax","yAxisMin","yAxisMax","deltas","axisCoord","convertToAxisCoord","xExtents","getAxisMinMaxByDelta","yExtents","globalMin","globalMax","axisScale","minDelta","maxDelta","minDeltaVal","invert","maxDeltaVal","weight","plotAreaSpace","onViewportChange","zoomAndScroll","onWheel","event","delta","deltaY","deltaXMin","offsetX","x","deltaXMax","width","deltaYMin","offsetY","y","deltaYMax","height","extents","preventDefault","onKeyDown","key","zoomIn","shiftRatio"],"mappings":"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"}