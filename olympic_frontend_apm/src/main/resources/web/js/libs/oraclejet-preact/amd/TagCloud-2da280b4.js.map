{"version":3,"file":"TagCloud-2da280b4.js","sources":["../../src/UNSAFE_TagCloud/TagCloudNavUtils.ts","../../src/UNSAFE_TagCloud/TagCloudUtils.ts","../../src/UNSAFE_TagCloud/TagCloudItem.tsx","../../src/UNSAFE_TagCloud/useTagCloudDatatip.ts","../../src/UNSAFE_TagCloud/TagCloudWithDimensions.tsx","../../src/UNSAFE_TagCloud/useEvents.tsx","../../src/UNSAFE_TagCloud/TagCloud.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ItemInputDetail, ItemInfo, TagCloudItemProps } from './TagCloud.type';\n\n/**\n * Returns the item based on item info in a tag cloud.\n * @param itemInfo\n * @param items\n * @returns\n */\nfunction getItem<K>(itemInfo: ItemInfo, items: TagCloudItemProps<K>[]) {\n  const { idx } = itemInfo;\n  return items[idx];\n}\n\nexport function getItemPadding(height: number | undefined) {\n  return height != null ? 0.15 * height : 0;\n}\n\n/**\n * Returns the next item's info in a tag cloud.\n * @param itemInfo\n * @param items\n * @returns\n */\nfunction getNextItemInfo<K>(itemInfo: ItemInfo, items: TagCloudItemProps<K>[]) {\n  let idx = itemInfo.idx;\n\n  idx = Math.min(items.length - 1, idx + 1);\n  return { idx, id: items[idx].id };\n}\n\n/**\n * Returns the previous item's info in a tag cloud.\n * @param itemInfo\n * @param items\n * @returns\n */\nfunction getPrevItemInfo<K>(itemInfo: ItemInfo, items: TagCloudItemProps<K>[]) {\n  let idx = itemInfo.idx;\n\n  idx = Math.max(0, idx - 1);\n  return { idx, id: items[idx].id };\n}\n\n/**\n * Returns utils functions for navigation in a tag cloud.\n * @param items\n * @returns\n */\nexport function getTagCloudNavUtils<K>(items: TagCloudItemProps<K>[]) {\n  return {\n    getItem: (itemInfo: ItemInfo) => {\n      return getItem(itemInfo, items);\n    },\n    getDetailFromInfo: (itemInfo?: ItemInfo): ItemInputDetail<K> => {\n      if (!itemInfo) {\n        return { id: undefined };\n      }\n      const item = getItem(itemInfo, items);\n      return { id: item.id };\n    },\n    getPrevItemInfo: (itemInfo: ItemInfo) => {\n      return getPrevItemInfo(itemInfo, items);\n    },\n    getNextItemInfo: (itemInfo: ItemInfo) => {\n      return getNextItemInfo(itemInfo, items);\n    }\n  };\n}\n","import { ItemInfo, TagCloudItemProps } from './TagCloud.type';\nimport { getContrastingTextColor } from '../utils/PRIVATE_colorUtils/colorUtils';\nimport { getUnion, intersects } from '../utils/PRIVATE_visLayoutUtils/LayoutUtils';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { BundleType } from '../resources/nls/bundle';\nimport { TagItemProps } from './TagCloudItem';\nimport { Font, TextDimensions } from '../hooks/PRIVATE_useTextDimensions';\nimport { getItemPadding } from './TagCloudNavUtils';\nimport { DatatipType } from './TagCloud.type';\n\nconst BOTTOM_PADDING = 20;\nconst DEFAULT_FONT_SIZE = 12;\n\n/**\n * helper layout functions for font size calc\n * @param {number} minValue\n * @param {number} maxValue\n * @param {number} range\n * @return {number}\n */\nexport const fontSizeCalc = (value: number, minValue: number, maxValue: number, range: number) => {\n  return minValue === maxValue\n    ? DEFAULT_FONT_SIZE\n    : DEFAULT_FONT_SIZE +\n        Math.ceil((((range - 1) * (value - minValue)) / (maxValue - minValue)) * DEFAULT_FONT_SIZE);\n};\n\n/**\n * returns initial font size arr of items for layout\n * @param {Array} items\n * @return {Array}\n */\nexport function getInitialFontSize<K>(items: TagCloudItemProps<K>[]): TagItemProps<K>[] {\n  const fontSizeArr = [];\n  let minValue = Number.MAX_VALUE;\n  let maxValue = -Number.MAX_VALUE;\n  // First iterate thru data items to find the min and max values\n  for (let i = 0; i < items.length; i++) {\n    minValue = Math.min(minValue, items[i].value);\n    maxValue = Math.max(maxValue, items[i].value);\n  }\n\n  for (let i = 0; i < items.length; i++) {\n    const x = fontSizeCalc(items[i].value, minValue, maxValue, 3);\n    fontSizeArr.push({ ...items[i], fontSize: x });\n  }\n  return fontSizeArr;\n}\n\n/**\n * Calculates the line breaks for rectangular layout\n * @param {Array} arDims an array of dvt.Dimension objects for each tag\n * @param {number} width the available width\n * @return {Array} an array containing the starting tag index for each line in the layout\n * @private\n */\nexport function calculateLineBreaks(arDims: any, width: any) {\n  const hPadding = 2;\n  const lines = [0];\n  let curWidth = arDims[0].w + hPadding;\n  if (arDims.length > 1) {\n    for (let i = 1; i < arDims.length; i++) {\n      if (curWidth + arDims[i].w > width) {\n        lines.push(i);\n        curWidth = 0;\n      }\n      curWidth += arDims[i].w + hPadding;\n    }\n  }\n  return lines;\n}\n\n/**\n * Returns the items position and font size in cloud layout.\n * @param items\n * @param tagcloudH\n * @param tagcloudW\n */\nexport function getCloudLayout<K>(\n  items: TagCloudItemProps<K>[],\n  tagcloudW: number,\n  tagcloudH: number,\n  isRTL: boolean,\n  getTextDimensions: (textString: string, font: Font) => TextDimensions\n): TagItemProps<K>[] {\n  const positions: any[] = [];\n  const steps = 180;\n  let xrStep = 10 / steps;\n  let yrStep = 10 / steps;\n  if (tagcloudW > tagcloudH) xrStep *= tagcloudW / tagcloudH;\n  else yrStep *= tagcloudH / tagcloudW;\n  const thetaStep = (2 * Math.PI) / steps;\n  let bounds = null;\n  let maxFontSize = 0;\n  const cosCache = [];\n  const sinCache = [];\n  const tagWordData = [];\n  const tagCloudX = 0; // availSpace.x\n  const tagCloudY = 0; // availSpace.y\n\n  const initialFontItems = getInitialFontSize(items);\n\n  for (let i = 0; i < initialFontItems.length; i++) {\n    let placed = false;\n    let step = 0;\n    let stepIncrement = 4;\n    const tag = initialFontItems[i];\n    const tagDimensions = getTextDimensions(tag.label, {\n      fontSize: tag.fontSize + 'px'\n    });\n    maxFontSize = Math.max(maxFontSize, tag.fontSize);\n    let lastCollisionIndex = -1;\n    while (!placed) {\n      // cache sin/cos values because Chrome is slow at these calculations\n      const lookup = step % steps;\n      if (cosCache[lookup] === undefined) cosCache[lookup] = Math.cos(step * thetaStep);\n      if (sinCache[lookup] === undefined) sinCache[lookup] = Math.sin(step * thetaStep);\n      const _x = xrStep * step * cosCache[lookup];\n      const _y = yrStep * step * sinCache[lookup];\n      const padding = getItemPadding(tagDimensions.height);\n      const tagCloudDiv = {\n        x: _x,\n        y: _y,\n        w: tagDimensions.width + 2 * padding,\n        h: tagDimensions.height + 2 * padding\n      }; // this needs to change\n      placed = true;\n      if (lastCollisionIndex !== -1) {\n        if (intersects(positions[lastCollisionIndex], tagCloudDiv)) {\n          placed = false;\n        }\n      }\n\n      if (placed) {\n        for (let j = 0; j < i; j++) {\n          if (intersects(positions[j], tagCloudDiv)) {\n            lastCollisionIndex = j;\n            placed = false;\n            break;\n          }\n        }\n      }\n\n      if (placed) {\n        if (!bounds) {\n          bounds = tagCloudDiv;\n        } else {\n          bounds = getUnion(bounds, tagCloudDiv);\n        }\n        lastCollisionIndex = -1;\n        positions[i] = tagCloudDiv;\n        tag.x = _x; // tag.setX(x)\n        tag.y = _y; // tag.setY(-tagCloudDiv.y + y);\n        tag.w = tagDimensions.width;\n        tag.h = tagDimensions.height;\n      }\n      // Adjust stepIncrement so we check smaller degrees as spiral loops out\n      if (step == 3600) {\n        // 20 loops\n        stepIncrement = 3;\n      } else if (step == 5400) {\n        // 30 loops\n        stepIncrement = 2;\n      } else if (step == 10800) {\n        // 60 loops\n        stepIncrement = 1;\n      }\n      step += stepIncrement;\n    }\n  }\n\n  if (bounds) {\n    const scale = Math.max(bounds.w / tagcloudW, bounds.h / tagcloudH);\n    const cx = bounds.x + bounds.w / 2;\n    const cy = bounds.y + bounds.h / 2;\n\n    for (let k = 0; k < initialFontItems.length; k++) {\n      let tagItemX;\n      const tagItem = initialFontItems[k];\n      if (!isRTL) {\n        tagItemX =\n          tagItem.x != null ? tagCloudX + tagItem.x / scale + (tagcloudW / 2 - cx / scale) : 0;\n      } else {\n        tagItemX =\n          tagItem.x != null ? tagCloudX - tagItem.x / scale - (tagcloudW / 2 - cx / scale) : 0;\n      }\n\n      const tagItemY =\n        tagItem.y != null ? tagCloudY + tagItem.y / scale + (tagcloudH / 2 - cy / scale) : 0;\n      const tagItemW = tagItem.w != null ? tagItem.w / scale : 0;\n      const tagItemH = tagItem.h != null ? tagItem.h / scale : 0;\n      const fontSize = tagItem.fontSize;\n      const tagItemFontSize = fontSize / scale;\n      tagWordData.push({\n        ...tagItem,\n        x: tagItemX,\n        y: tagItemY,\n        fontSize: tagItemFontSize,\n        w: tagItemW,\n        h: tagItemH\n      });\n    }\n  }\n  return tagWordData;\n}\n\n/**\n * Returns the items position and font size in rectangle layout.\n * @param items\n * @param hiddenIds\n * @param tagcloudH\n * @param tagcloudW\n */\nexport function getRectangleLayout<K>(\n  items: TagCloudItemProps<K>[],\n  tagcloudW: number,\n  tagcloudH: number,\n  isRTL: boolean,\n  getTextDimensions: (textString: string, font: Font) => TextDimensions\n) {\n  const tagWordData: any[] = [];\n  const arDims = [];\n  let maxWidth = 0;\n  let maxHeight = 0;\n  let maxFontSize = 0;\n  const vPadding = 2;\n  const margin = 0;\n  const tagCloudX = 0; // availSpace.x\n  const tagCloudY = 0; // availSpace.y\n\n  // initial items processing\n  const initialFontItems = getInitialFontSize(items);\n\n  // Get the unscaled dimensions\n  for (let i = 0; i < initialFontItems.length; i++) {\n    const tag = initialFontItems[i];\n    const tagDimensions = getTextDimensions(tag.label, {\n      fontSize: tag.fontSize + 'px'\n    });\n    maxWidth = Math.max(maxWidth, tagDimensions.width);\n    maxHeight = Math.max(maxHeight, tagDimensions.height);\n    maxFontSize = Math.max(maxFontSize, tag.fontSize);\n    arDims.push({\n      w: tagDimensions.width,\n      h: tagDimensions.height,\n      x: tagDimensions.x,\n      y: tagDimensions.y\n    });\n  }\n\n  // Iteratively calculate the ideal font scale\n  let minScale = 0;\n  let maxScale = (tagcloudW - 2 * margin) / maxWidth; // This is the max scale that can be applied before the longest word will no longer fit\n  let scale;\n  let arLines;\n  while (maxScale - minScale > 0.001) {\n    scale = (minScale + maxScale) / 2;\n    arLines = calculateLineBreaks(arDims, (tagcloudW - 2 * margin) / scale);\n    const h = arLines.length * (scale * maxHeight + vPadding) - vPadding;\n    if (h > tagcloudH - 2 * margin) {\n      maxScale = scale;\n    } else {\n      minScale = scale;\n    }\n  }\n\n  // Calculate final line breaks\n  scale = minScale;\n  arLines = calculateLineBreaks(arDims, (tagcloudW - 2 * margin) / scale);\n  arLines.push(initialFontItems.length);\n  for (let k = 0; k < arLines.length - 1; k++) {\n    const lineStart = arLines[k];\n    const lineEnd = arLines[k + 1];\n    let hPadding = 5;\n    let maxLineHeight = 0;\n    let justified = true;\n    if (lineEnd - lineStart > 1) {\n      let lineWidth = 0;\n      for (let j = lineStart; j < lineEnd; j++) {\n        lineWidth += arDims[j].w * scale;\n        maxLineHeight = Math.max(maxLineHeight, arDims[j].h * scale);\n      }\n      hPadding = (tagcloudW - 2 * margin - lineWidth) / (lineEnd - lineStart - 1);\n\n      if (k == arLines.length - 2) {\n        // Don't justify the last line unless flowing it with a gap of .5 * maxLineHeight fills more than\n        // 90% of the width\n        const flowPadding = 0.5 * maxLineHeight;\n        if (\n          flowPadding < hPadding &&\n          lineWidth + (lineEnd - lineStart) * flowPadding < 0.9 * (tagcloudW - 2 * margin)\n        ) {\n          hPadding = flowPadding;\n          justified = false;\n        }\n      }\n    }\n\n    const bottomY = margin + (k + 1) * (maxHeight * scale + vPadding) - vPadding;\n    let curX = margin;\n    for (let m = lineStart; m < lineEnd; m++) {\n      const tagLine = initialFontItems[m];\n      const fontSize = tagLine.fontSize;\n      const tagItemFontSize = fontSize * scale;\n      tagLine.fontSize = tagItemFontSize;\n      const tagDimensionsWidth = arDims[m].w * scale;\n      tagLine.y = tagCloudY + bottomY + arDims[m].y * scale - BOTTOM_PADDING;\n      if (justified && m === lineEnd - 1 && m !== lineStart) {\n        if (!isRTL) tagLine.x = tagCloudX + tagcloudW - tagDimensionsWidth - margin;\n        else tagLine.x = tagCloudX + tagDimensionsWidth + margin - tagcloudW;\n        // alignRight(tagLine);\n      } else {\n        // alignLeft(tagLine);\n        tagLine.x = tagCloudX + curX;\n        if (!isRTL) {\n          curX += arDims[m].w * scale + hPadding;\n        } else {\n          // tagLine.alignRight();\n          curX -= arDims[m].w * scale + hPadding;\n        }\n      }\n      tagWordData.push({ ...tagLine, w: tagDimensionsWidth, h: arDims[m].h * scale });\n    }\n  }\n  return tagWordData;\n}\n\n/**\n * Calls the right layout algorithm based on tagcloud type.\n * @param layout cloud or rectangle. cloud if not defined.\n * @param items\n * @param hiddenIds\n * @param tagcloudH tagcloud height\n * @param tagcloudW tagcloud width\n */\nexport function getLayout<K>(\n  layout: string | undefined,\n  items: TagCloudItemProps<K>[],\n  tagcloudW: number,\n  tagcloudH: number,\n  isRTL: boolean,\n  getTextDimensions: (textString: string, font: Font) => TextDimensions\n) {\n  let layoutTagCloud: any[];\n  if (layout === 'cloud' || !layout) {\n    layoutTagCloud = getCloudLayout(items, tagcloudW, tagcloudH, isRTL, getTextDimensions);\n  } else {\n    layoutTagCloud = getRectangleLayout(items, tagcloudW, tagcloudH, isRTL, getTextDimensions);\n  }\n  return layoutTagCloud;\n}\n\n/**\n * Checks if the item is highlighted.\n * @param id Id of the item\n * @param highlighted The set of highlighted item\n */\nexport function isItemHighlighted<K>(id: K, highlightedIds?: K[]) {\n  if (!highlightedIds) {\n    return;\n  }\n  if (highlightedIds.length === 0) {\n    return true;\n  }\n  return new Set(highlightedIds).has(id);\n}\n\n/**\n * Checks if the item is highlighted.\n * @param id Id of the item\n * @param selectedIds The set of highlighted item\n */\nexport function isItemSelected<K>(id: K, selectedIds?: K[]) {\n  if (!selectedIds || selectedIds.length === 0) {\n    return false;\n  }\n  return new Set(selectedIds).has(id);\n}\n\n/**\n * Checks if the item is hidden.\n * @param id Id of the item.\n * @param hiddenIds The set of hidden items.\n * @returns\n */\nexport function isItemHidden<K>(id: K, hiddenIds?: K[]) {\n  if (!hiddenIds) {\n    return;\n  }\n  return new Set(hiddenIds).has(id);\n}\n\n/**\n * Returns the aria properties for the tag cloud.\n * @param isReadOnly { boolean } If the tag cloud is readonly.\n * @param accessibleLabel { string } The aria-label set by the app.\n * @returns The aria props.\n */\nexport function getAriaProps(\n  translations: BundleType,\n  hasData?: boolean,\n  accessibleLabel?: string,\n  ariaDescribedBy?: string,\n  ariaLabelledBy?: string\n): {\n  'aria-label': HTMLAttributesSignalExcluded['aria-label'];\n  role: HTMLAttributesSignalExcluded['role'];\n  'aria-describedBy': HTMLAttributesSignalExcluded['aria-describedby'];\n  'aria-LabelledBy': HTMLAttributesSignalExcluded['aria-labelledby'];\n} {\n  return {\n    'aria-label': `${accessibleLabel || ''} ${\n      hasData ? '' : translations.dataVisualization_noData()\n    }`,\n    role: 'application',\n    'aria-describedBy': ariaDescribedBy,\n    'aria-LabelledBy': ariaLabelledBy\n  };\n}\n\n/**\n * Returns the aria properties for the tag cloud.\n * @param isReadOnly { boolean } If the tag cloud is readonly.\n * @param accessibleLabel { string } The aria-label set by the app.\n * @returns The aria props.\n */\nexport function getItemAriaProps(\n  supportsSelection: boolean,\n  translations?: BundleType,\n  isSelected?: boolean,\n  accessibleLabel?: string,\n  role?: HTMLAttributesSignalExcluded['role']\n): {\n  'aria-label': HTMLAttributesSignalExcluded['aria-label'];\n  role: HTMLAttributesSignalExcluded['role'];\n} {\n  const selectionAriaLabel = !supportsSelection\n    ? ''\n    : isSelected\n    ? translations?.dataVisualization_stateSelected()\n    : translations?.dataVisualization_stateUnselected();\n\n  return {\n    'aria-label': [accessibleLabel, selectionAriaLabel].filter(Boolean).join('. ') || undefined,\n    role: role || 'img'\n  };\n}\n\n/**\n * Returns the item props for BaseTagCloudItem.\n * @param item The tagcloud item.\n * @param itemId The item index of the item.\n * @param focusedItem The info of currently focused item.\n * @param isReadOnly Whether the tagcloud is readonly.\n * @param hoveredItem The info of the currently hovered item.\n * @param hiddenIds The hidden ids.\n * @param highlightedIds The highlighted ids.\n */\nexport function getItemProps<K>(\n  item: TagCloudItemProps<K>,\n  itemIdx: number,\n  supportsSelection: boolean,\n  isReadOnly: boolean,\n  hoveredItem?: ItemInfo,\n  selectedIds?: Array<K>,\n  focusedItem?: ItemInfo,\n  highlightedIds?: Array<K>,\n  activeId?: string\n) {\n  let isCurrent = false;\n  let style;\n  if (!isReadOnly) {\n    const isFocusedItem = itemIdx === focusedItem?.idx;\n    const isHoveredItem = itemIdx === hoveredItem?.idx;\n    isCurrent = !!(\n      (isFocusedItem && focusedItem?.isCurrent) ||\n      (isHoveredItem && hoveredItem?.isCurrent)\n    );\n  }\n  const isHighlighted = isItemHighlighted(item.id, highlightedIds);\n  const isSelected = isItemSelected(item.id, selectedIds);\n\n  if (item.color) {\n    let color, backgroundColor, backgroundImage;\n\n    if (isSelected) {\n      backgroundColor = item.color;\n      color = getContrastingTextColor(backgroundColor);\n    }\n    // hovered and selection supported\n    else color = item.color;\n\n    style = {\n      color,\n      backgroundColor,\n      backgroundImage\n    };\n  } else if (!supportsSelection) {\n    style = {\n      backgroundColor: 'none'\n    };\n  }\n\n  return {\n    isCurrent,\n    isHighlighted: isHighlighted,\n    isSelected: isSelected,\n    isFocused: focusedItem ? hasFocusRing(focusedItem, itemIdx) : false,\n    key: item.id,\n    itemIdx,\n    style,\n    activeId: isCurrent ? activeId : undefined,\n    isReadOnly,\n    ...item\n  };\n}\n\n/**\n * Returns the text for the tag cloud datatip.\n * @param items The tag cloud items data.\n * @param focusedItem The item currently keyboard focused.\n * @param hoveredItem The item that is currently hovered.\n * @param datatip The datatip.\n */\nexport function getDatatipContent<D extends TagCloudItemProps<number | string>>(\n  items: D[],\n  getItem: (itemInfo: ItemInfo, items: D[]) => D | undefined,\n  focusedItem: ItemInfo,\n  hoveredItem?: ItemInfo,\n  datatip?: DatatipType<D>\n) {\n  const activeItem = focusedItem.isCurrent\n    ? focusedItem\n    : hoveredItem?.isCurrent && hoveredItem.idx != null\n    ? hoveredItem\n    : undefined;\n\n  if (!activeItem) {\n    return {\n      content: undefined,\n      borderColor: undefined\n    };\n  }\n  const item = getItem(activeItem, items);\n  if (datatip && item) {\n    return datatip({ data: item });\n  }\n\n  return {\n    content: item?.accessibleLabel,\n    borderColor: undefined\n  };\n}\n\n/**\n * Returns the value of the data-oj-item-index attribute for a given element.\n * @param element The HTML element.\n */\nexport function getItemInfo(element: HTMLElement) {\n  const itemIdx = element.dataset['idx'];\n  if (itemIdx == null) return;\n\n  return {\n    idx: Number(itemIdx)\n  };\n}\n\n/**\n * Compares if two ItemInfo are equal\n * @param item1\n * @param item2\n * @returns\n */\nexport function isEqualItem(item1?: ItemInfo, item2?: ItemInfo) {\n  return item1?.idx === item2?.idx;\n}\n\n/**\n * Checks if the item is the currentItem and if the focus ring\n * is visible.\n * @param itemInfo ItemInfo\n * @param itemId Item index\n */\nexport function hasFocusRing(itemInfo: ItemInfo, itemIdx: number) {\n  if (!itemInfo.isFocusVisible) return false;\n  const { idx: idx } = itemInfo;\n\n  return idx === itemIdx;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { BundleType } from '../resources/nls/bundle';\nimport { getItemAriaProps } from './TagCloudUtils';\nimport { styles } from './themes/TagCloudStyles.css';\nimport { getItemPadding } from './TagCloudNavUtils';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\nexport type TagItemProps<K> = {\n  id: K;\n  label: string;\n  accessibleLabel?: string;\n  value: number;\n  fontSize: number;\n  role?: HTMLAttributesSignalExcluded['role'];\n  itemIdx?: number;\n  supportsSelection?: boolean;\n  supportsAction?: boolean;\n  translations?: BundleType;\n  x?: number;\n  y?: number;\n  w?: number;\n  h?: number;\n  isHighlighted?: boolean;\n  isSelected?: boolean;\n  isCurrent?: boolean;\n  isFocused?: boolean;\n  isReadonly?: boolean;\n  class?: string;\n  style?: JSX.CSSProperties;\n  activeId?: string;\n};\n\nconst TagCloudItem = <K,>(props: TagItemProps<K>) => {\n  const {\n    itemBase,\n    itemStyle,\n    hoverUnselectedItemStyle,\n    selectedItemStyle,\n    hoveredSelectedItemStyle,\n    dimmedItemStyle,\n    interactiveCursorStyle\n  } = styles;\n  const isNotDimmed = props.isHighlighted || props.isHighlighted == null; // null means no highlighting feature\n\n  const itemClasses = classNames([\n    itemBase,\n    props.isSelected ? selectedItemStyle : itemStyle,\n    props.isCurrent\n      ? props.isSelected\n        ? hoveredSelectedItemStyle\n        : props.isFocused || props.supportsSelection\n        ? hoverUnselectedItemStyle\n        : ''\n      : '',\n    isNotDimmed ? '' : dimmedItemStyle,\n    props.supportsAction || props.supportsSelection ? interactiveCursorStyle : ''\n  ]);\n\n  const itemAriaProps = getItemAriaProps(\n    !!props.supportsSelection,\n    props.translations,\n    props.isSelected,\n    props.accessibleLabel,\n    props.role\n  );\n\n  const padding = getItemPadding(props.h);\n\n  return (\n    <div\n      class={itemClasses}\n      data-id={`${props.id}`}\n      data-idx={props.itemIdx}\n      style={{\n        ...props.style,\n        transform: `translate(${(props.x || 0) - padding}px,${(props.y || 0) - padding}px)`,\n        fontSize: props.fontSize,\n        padding: `${padding}px`,\n        lineHeight: props.fontSize + 'px'\n      }}\n      id={props.activeId}\n      {...itemAriaProps}>\n      {props.label}\n    </div>\n  );\n};\n\nexport { TagCloudItem };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref, useLayoutEffect, useState } from 'preact/hooks';\nimport { ItemInfo } from './TagCloud.type';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { TagItemProps } from './TagCloudItem';\nimport { ComponentChildren } from 'preact';\nimport { useDatatip, calculateOffset } from '../hooks/PRIVATE_useDatatip';\nimport { Property } from 'csstype';\n\ntype props<K> = {\n  datatip?: { content?: ComponentChildren; borderColor?: Property.BorderColor };\n  borderColor?: Property.BorderColor;\n  rootRef: Ref<HTMLDivElement>;\n  focusedItemInfo: ItemInfo;\n  focusedItemRef: Ref<TagItemProps<K> | null>;\n};\n\n/**\n * Calculate the datatip offset for datatip when keyboard focus is active.\n * @param rootRef The ref for root of the tag cloud.\n * @param currentItem The ItemInfo of the current keyboard focused item.\n * @param isRtl The direction.\n * @param focusedItemRef The ref for currentItem node.\n * @returns\n */\nconst calculateTagcloudOffset = <K>(\n  rootRef: Ref<HTMLDivElement>,\n  currentItem: ItemInfo,\n  isRtl: boolean,\n  focusedItemRef: Ref<TagItemProps<K> | null>\n) => {\n  if (\n    focusedItemRef?.current &&\n    currentItem.isCurrent &&\n    rootRef.current &&\n    focusedItemRef?.current.x != null &&\n    focusedItemRef?.current.w != null &&\n    focusedItemRef?.current.y != null &&\n    focusedItemRef?.current.h != null\n  ) {\n    const bounds = {\n      x: focusedItemRef.current.x,\n      y: focusedItemRef.current.y,\n      width: focusedItemRef.current.w,\n      height: focusedItemRef.current.h\n    };\n\n    const rootDims = rootRef.current.getBoundingClientRect();\n    return calculateOffset(isRtl, rootDims.width, bounds);\n  }\n  // fallback to default\n  return calculateOffset(isRtl, 0, undefined);\n};\n\n/**\n * Returns the datatip.\n * @param text The text string for the tag cloud item.\n * @param rootRef The ref for root of the tag cloud.\n * @param focusedItemRef The ref for focused item node.\n * @param focusedItemInfo The ItemInfo for focused item node.\n * @returns\n */\nexport const useTagCloudDatatip = <K>({\n  datatip,\n  rootRef,\n  focusedItemRef,\n  focusedItemInfo\n}: props<K>) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const [offset, setOffset] = useState<{ mainAxis?: number; crossAxis?: number }>(\n    calculateTagcloudOffset(rootRef, focusedItemInfo, isRtl, focusedItemRef)\n  );\n\n  useLayoutEffect(() => {\n    setOffset(calculateTagcloudOffset(rootRef, focusedItemInfo, isRtl, focusedItemRef));\n  }, [focusedItemInfo]);\n\n  const anchor = focusedItemInfo?.isCurrent ? 'element' : 'pointer';\n  const placement = 'top-start' as const;\n\n  const { datatipContent, datatipProps } = useDatatip({\n    content: datatip?.content,\n    borderColor: datatip?.borderColor,\n    anchor,\n    placement,\n    offset: offset\n  });\n  return { datatipContent, datatipProps };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { TagCloudItemProps, TagCloudProps } from './TagCloud.type';\nimport { TagCloudItem, TagItemProps } from './TagCloudItem';\nimport { getAriaProps, getDatatipContent, getItemProps, getLayout } from './TagCloudUtils';\nimport { getTagCloudNavUtils } from './TagCloudNavUtils';\nimport { useEvents } from './useEvents';\nimport { useTagCloudDatatip } from './useTagCloudDatatip';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { useTextDimensions } from '../hooks/PRIVATE_useTextDimensions';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { baseStyles } from './themes/TagCloudStyles.css';\nimport { useSelection } from '../hooks/PRIVATE_useVisSelection';\nimport { getItemInfo } from './TagCloudUtils';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\nimport { ItemInfo } from './TagCloud.type';\n\ntype TagCloudWithDimensionsProps<K, D> = Omit<TagCloudProps<K, D>, 'width' | 'height'> & {\n  width: number;\n  height: number;\n};\n\nexport function TagCloudWithDimensions<K extends string | number, D extends TagCloudItemProps<K>>({\n  selectionMode = 'none',\n  layout = 'cloud',\n  width,\n  height,\n  items,\n  onItemAction,\n  onItemInput,\n  testId,\n  ...props\n}: TagCloudWithDimensionsProps<K, D>) {\n  const testIdProps = useTestId(testId);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const focusedItemRef = useRef<TagItemProps<K> | null>(null);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const filteredItems = items.filter((i) => !props.hiddenIds?.includes(i.id));\n\n  const hasData = filteredItems && filteredItems.length !== 0;\n  const supportsSelection = !!(selectionMode && selectionMode !== 'none');\n  const supportsAction = onItemAction != null;\n  const isReadOnly = supportsAction && onItemInput === null;\n\n  const ariaProps = getAriaProps(\n    translations,\n    hasData,\n    props.accessibleLabel,\n    props['aria-describedby'],\n    props['aria-labelledby']\n  );\n\n  const { getItem, getDetailFromInfo, getPrevItemInfo, getNextItemInfo } =\n    getTagCloudNavUtils(filteredItems);\n\n  const { hoveredItemInfo, focusedItemInfo, ...eventsProps } = useEvents<K>(\n    !isReadOnly && hasData,\n    getDetailFromInfo,\n    getPrevItemInfo,\n    getNextItemInfo,\n    onItemAction,\n    onItemInput\n  );\n\n  const content = getDatatipContent<D>(\n    filteredItems,\n    getItem as (itemInfo: ItemInfo) => D,\n    focusedItemInfo,\n    hoveredItemInfo,\n    props.datatip\n  );\n  const { datatipContent, datatipProps } = useTagCloudDatatip({\n    datatip: content,\n    rootRef,\n    focusedItemInfo,\n    focusedItemRef\n  });\n\n  const idExtracter = (event: Event) => {\n    // return focused item for keyboard event.\n    // eventsProps should have already updated the focused item\n    const info =\n      event.type === 'keyup' ? focusedItemInfo : getItemInfo(event.target as HTMLElement);\n    return getDetailFromInfo(info).id;\n  };\n\n  const selectionProps = useSelection<K>({\n    idExtracter,\n    selection: props.selectedIds,\n    selectionMode: selectionMode,\n    onChange: props.onSelectionChange\n  });\n\n  const mergedProps = mergeProps(eventsProps, datatipProps, selectionProps);\n  const { direction } = useUser();\n\n  const ariaDescribedBy = [datatipProps['aria-describedby'], ariaProps['aria-describedBy']]\n    .filter(Boolean)\n    .join(' ');\n\n  const { textMeasureContent, getTextDimensions } = useTextDimensions();\n  const layoutTags = useMemo(() => {\n    return getTextDimensions && hasData\n      ? getLayout(layout, filteredItems, width, height, direction === 'rtl', getTextDimensions)\n      : [];\n  }, [layout, filteredItems, hasData, width, height, direction, getTextDimensions]);\n\n  return (\n    <div\n      ref={rootRef}\n      tabIndex={isReadOnly ? undefined : 0}\n      style={{ width, height }}\n      class={baseStyles}\n      {...testIdProps}\n      {...ariaProps}\n      {...mergedProps}\n      aria-describedby={ariaDescribedBy}>\n      {layoutTags.map((item, itemIndex) => {\n        const itemProps = getItemProps(\n          item,\n          itemIndex,\n          supportsSelection,\n          isReadOnly,\n          hoveredItemInfo,\n          props.selectedIds,\n          focusedItemInfo,\n          props.highlightedIds,\n          eventsProps['aria-activedescendant']\n        );\n        const isFocusedItem = focusedItemInfo.idx === itemIndex;\n        isFocusedItem ? (focusedItemRef.current = item) : null;\n        return (\n          <TagCloudItem\n            fontSize={item.fontSize}\n            x={item.x}\n            y={item.y}\n            accessibleLabel={item.accessibleLabel}\n            supportsSelection={supportsSelection}\n            supportsAction={supportsAction}\n            translations={translations}\n            {...itemProps}\n          />\n        );\n      })}\n      {textMeasureContent}\n      {datatipContent}\n    </div>\n  );\n}\n","import { useRef, useState } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { ItemActionDetail, ItemInputDetail, ItemInfo } from './TagCloud.type';\nimport { getItemInfo, isEqualItem } from './TagCloudUtils';\nimport { getRandomId } from '../utils/PRIVATE_visLayoutUtils/LayoutUtils';\n\nexport function useEvents<K>(\n  isInteractive: boolean,\n  getDetailFromInfo: (info?: ItemInfo) => ItemInputDetail<K>,\n  getPrevItemInfo: (info: ItemInfo) => ItemInfo,\n  getNextItemInfo: (info: ItemInfo) => ItemInfo,\n  onItemAction?: (detail: ItemActionDetail<K>) => void,\n  onInput?: (detail: ItemInputDetail<K>) => void\n) {\n  const [focusedItemInfo, setfocusedItemInfo] = useState<ItemInfo>({ idx: 0 });\n  const [hoveredItemInfo, sethoveredItemInfo] = useState<ItemInfo>();\n\n  const activeId = useRef<string>();\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  const cancelEvent = (event: Event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const hoverHandler = (event: PointerEvent) => {\n    const itemInfo = getItemInfo(event.target as HTMLElement);\n    if (!isEqualItem(itemInfo, hoveredItemInfo)) {\n      sethoveredItemInfo(itemInfo && { ...itemInfo, isCurrent: true });\n      activeId.current = getRandomId();\n      if (isInteractive) {\n        setfocusedItemInfo({ ...focusedItemInfo, isCurrent: false });\n        onInput?.(getDetailFromInfo(itemInfo));\n      }\n    }\n  };\n\n  const pointerLeaveHandler = () => {\n    sethoveredItemInfo(undefined);\n    activeId.current = undefined;\n    if (isInteractive) {\n      onInput?.(getDetailFromInfo());\n    }\n  };\n\n  if (!isInteractive) {\n    return {\n      focusedItemInfo,\n      hoveredItemInfo,\n      // include pointer leave and pointer move for datatip\n      onPointerLeave: pointerLeaveHandler,\n      onPointerMove: hoverHandler\n    };\n  }\n\n  function updatefocusedItemInfo(itemInfo: ItemInfo) {\n    onInput?.(getDetailFromInfo(itemInfo));\n    activeId.current = getRandomId();\n    setfocusedItemInfo(itemInfo);\n  }\n\n  function handleKeyboardInput(item: ItemInfo) {\n    if (!isEqualItem(item, focusedItemInfo)) {\n      item.isCurrent = true;\n      item.isFocusVisible = true;\n      if (hoveredItemInfo) {\n        sethoveredItemInfo({ ...hoveredItemInfo, isCurrent: false });\n      }\n      updatefocusedItemInfo(item);\n    }\n  }\n\n  const triggerOnAction = () => {\n    const { id } = getDetailFromInfo(focusedItemInfo);\n    if (id != null) {\n      onItemAction?.({ id });\n      activeId.current = getRandomId();\n    }\n  };\n\n  const pointerUpHandler = (event: PointerEvent) => {\n    const itemInfo = getItemInfo(event.target as HTMLElement);\n    if (itemInfo != null) {\n      setfocusedItemInfo(itemInfo);\n      const { id } = getDetailFromInfo(itemInfo);\n      if (id != null) {\n        onItemAction?.({ id });\n        activeId.current = getRandomId();\n      }\n    } else onItemAction?.({ id: undefined });\n  };\n\n  const keyDownHandler = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'Tab':\n        return;\n      case 'ArrowDown': {\n        const nextItemInfo = getNextItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n      case 'ArrowUp': {\n        const nextItemInfo = getPrevItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n      case 'ArrowRight': {\n        const nextItemInfo = isRtl\n          ? getPrevItemInfo(focusedItemInfo)\n          : getNextItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n      case 'ArrowLeft': {\n        const nextItemInfo = isRtl\n          ? getNextItemInfo(focusedItemInfo)\n          : getPrevItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n    }\n    cancelEvent(event);\n  };\n\n  const keyUpHandler = (event: KeyboardEvent) => {\n    const key = event.code;\n    switch (key) {\n      case 'Space': {\n        triggerOnAction();\n        break;\n      }\n      case 'Enter': {\n        triggerOnAction();\n        break;\n      }\n      case 'Tab': {\n        updatefocusedItemInfo({\n          ...focusedItemInfo,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        break;\n      }\n    }\n  };\n\n  const blurHandler = () => {\n    if (hoveredItemInfo != null || focusedItemInfo.isCurrent) {\n      onInput?.(getDetailFromInfo(undefined));\n    }\n    const itemInfo = { ...focusedItemInfo, isCurrent: false, isFocusVisible: false };\n    setfocusedItemInfo(itemInfo);\n  };\n\n  return {\n    focusedItemInfo,\n    hoveredItemInfo,\n    'aria-activedescendant': activeId.current,\n    onPointerUp: pointerUpHandler,\n    onPointerMove: hoverHandler,\n    onKeyUp: keyUpHandler,\n    onKeyDown: keyDownHandler,\n    onPointerLeave: pointerLeaveHandler,\n    onBlur: blurHandler\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { TagCloudItemProps, TagCloudProps } from './TagCloud.type';\nimport { TrackResizeContainer } from '../PRIVATE_TrackResizeContainer';\nimport { Size, sizeToCSS } from '../utils/UNSAFE_size';\nimport { TagCloudWithDimensions } from './TagCloudWithDimensions';\n\n/**\n * Tag clouds are used to display text data with the importance of each tag shown with font size and/or color.\n */\nexport function TagCloud<K extends string | number, D extends TagCloudItemProps<K>>({\n  height = '112x',\n  width = '100%',\n  ...props\n}: TagCloudProps<K, D>) {\n  return (\n    <TrackResizeContainer\n      width={sizeToCSS(width as Size) || width || '0px'}\n      height={sizeToCSS(height as Size) || height || '0px'}>\n      {(width, height) => <TagCloudWithDimensions width={width} height={height} {...props} />}\n    </TrackResizeContainer>\n  );\n}\n"],"names":["getItem","itemInfo","items","idx","getItemPadding","height","getTagCloudNavUtils","getDetailFromInfo","id","undefined","getPrevItemInfo","Math","max","getNextItemInfo","min","length","BOTTOM_PADDING","fontSizeCalc","value","minValue","maxValue","range","ceil","getInitialFontSize","fontSizeArr","Number","MAX_VALUE","i","x","push","fontSize","calculateLineBreaks","arDims","width","lines","curWidth","w","getLayout","layout","tagcloudW","tagcloudH","isRTL","getTextDimensions","layoutTagCloud","tagWordData","maxWidth","maxHeight","maxFontSize","initialFontItems","tag","tagDimensions","label","h","y","scale","arLines","minScale","maxScale","k","lineStart","lineEnd","hPadding","maxLineHeight","justified","lineWidth","j","flowPadding","bottomY","curX","m","tagLine","tagItemFontSize","tagDimensionsWidth","getRectangleLayout","positions","steps","xrStep","yrStep","thetaStep","PI","bounds","cosCache","sinCache","placed","step","stepIncrement","lastCollisionIndex","lookup","cos","sin","_x","_y","padding","tagCloudDiv","intersects","getUnion","cx","cy","tagItemX","tagItem","tagItemY","tagItemW","tagItemH","getCloudLayout","getItemProps","item","itemIdx","supportsSelection","isReadOnly","hoveredItem","selectedIds","focusedItem","highlightedIds","activeId","style","isCurrent","isFocusedItem","isHoveredItem","isHighlighted","Set","has","isItemHighlighted","isSelected","isItemSelected","color","backgroundColor","backgroundImage","getContrastingTextColor","isFocused","hasFocusRing","key","getItemInfo","element","dataset","isEqualItem","item1","item2","isFocusVisible","TagCloudItem","props","itemBase","itemStyle","hoverUnselectedItemStyle","selectedItemStyle","hoveredSelectedItemStyle","dimmedItemStyle","interactiveCursorStyle","styles","isNotDimmed","itemClasses","classNames","supportsAction","itemAriaProps","translations","accessibleLabel","role","dataVisualization_stateSelected","dataVisualization_stateUnselected","filter","Boolean","join","_jsx","jsx","class","transform","lineHeight","children","calculateTagcloudOffset","rootRef","currentItem","isRtl","focusedItemRef","current","rootDims","getBoundingClientRect","calculateOffset","useTagCloudDatatip","datatip","focusedItemInfo","direction","useUser","offset","setOffset","useState","useLayoutEffect","anchor","datatipContent","datatipProps","useDatatip","content","borderColor","placement","TagCloudWithDimensions","selectionMode","onItemAction","onItemInput","testId","testIdProps","useTestId","useRef","useTranslationBundle","filteredItems","hiddenIds","includes","hasData","ariaProps","ariaDescribedBy","ariaLabelledBy","dataVisualization_noData","getAriaProps","hoveredItemInfo","eventsProps","isInteractive","onInput","setfocusedItemInfo","sethoveredItemInfo","hoverHandler","event","target","getRandomId","pointerLeaveHandler","onPointerLeave","onPointerMove","updatefocusedItemInfo","handleKeyboardInput","triggerOnAction","onPointerUp","onKeyUp","code","onKeyDown","preventDefault","stopPropagation","cancelEvent","onBlur","useEvents","activeItem","data","getDatatipContent","selectionProps","useSelection","idExtracter","info","type","selection","onChange","onSelectionChange","mergedProps","mergeProps","textMeasureContent","useTextDimensions","layoutTags","useMemo","_jsxs","ref","tabIndex","baseStyles","map","itemIndex","itemProps","TrackResizeContainer","sizeToCSS"],"mappings":"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"}