{"version":3,"file":"MessageUtils-68f4e953.js","sources":["../../src/PRIVATE_Message/MessageUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport * as Logger from '../utils/UNSAFE_logger';\nimport { playAudioFromURL, playDefaultNotificationSound } from '../utils/UNSAFE_soundUtils';\nimport { isValidValueForProp } from './MessageFormattingUtils';\nimport { MessageSeverity, MessageVariant } from './Message.types';\n\n/**\n * Logger that prepends the component name to the message\n */\nconst MessageLogger = {\n  error: (message: string, type = 'common') => Logger.error(`JET Message(${type}): ${message}`),\n  warn: (message: string, type = 'common') => Logger.warn(`JET Message(${type}): ${message}`),\n  info: (message: string, type = 'common') => Logger.info(`JET Message(${type}): ${message}`),\n  log: (message: string, type = 'common') => Logger.log(`JET Message(${type}): ${message}`)\n};\n\n/**\n * Plays a sound based on the provided argument. Supported keywords:\n * 1. default - plays the default beep sound\n * 2. none - no sound will be played\n *\n * @param sound Supported keywords or URL to an audio file\n */\nasync function playSound(sound: string) {\n  if (sound === 'none') {\n    // no need to play any audio\n    return;\n  }\n\n  // For default, we play a beep sound using WebAudio API\n  if (sound === 'default') {\n    try {\n      playDefaultNotificationSound();\n    } catch (error) {\n      // Default sound is not played due to some error\n      // Log a message and return doing nothing else\n      MessageLogger.warn(`Failed to play the default sound. ${error}.`);\n    }\n    return;\n  }\n\n  // If it is not a key word, then it is an URL\n  try {\n    await playAudioFromURL(sound);\n  } catch (error) {\n    // Playing audio using the URL failed.\n    MessageLogger.warn(`Failed to play the audio from the url ${sound}. ${error}.`);\n  }\n}\n\n/**\n * A helper function that throws an error\n *\n * @param message The error message\n * @param type The type of the message that is throwing an error\n * @throws {Error}\n */\nfunction throwError(message: string, type = 'common') {\n  throw new Error(`JET Message(${type}) - ${message}`);\n}\n\n/**\n * Fetches a renderer for the current message if one is provided\n *\n * @param message The item context for the current message\n * @param rendererIdentifier Identifier of the current renderer\n * @param renderers All available renderers\n * @returns The renderer for rendering the custom content\n */\nfunction getRenderer<K, D, R>(\n  message: Item<K, D>,\n  rendererIdentifier?: string | ((item: Item<K, D>) => string | undefined),\n  renderers?: Record<string, (data: R) => ComponentChildren>,\n  type?: string\n) {\n  // If either detailRenderer function or record of renderers are not available,\n  // return null\n  if (!rendererIdentifier || !renderers) {\n    return undefined;\n  }\n\n  const rendererKey =\n    typeof rendererIdentifier === 'function' ? rendererIdentifier(message) : rendererIdentifier;\n\n  // If rendererKey is null or undefined, then we need to use default rendering\n  // so return null\n  if (rendererKey == null) {\n    return undefined;\n  }\n\n  // If the returned render key is a string but does not exist in the provided\n  // record of renderers, throw an error\n  if (!(rendererKey in renderers)) {\n    throwError(\n      `${rendererKey} is not a valid template name for the message with key=${message.key}`,\n      type\n    );\n  }\n\n  // Else, fetch and return the renderer\n  return renderers[rendererKey];\n}\n\n/**\n * Generates a root style class based on the severity. For invalid severity and severity=none\n * no specific style class exists.\n *\n * @param severity The message severity\n * @returns calculated style class based on the severity\n */\nfunction severityBasedStyleClass(severity: MessageSeverity, variant: MessageVariant) {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none' ? `oj-c-message${variant}-${severity}` : '';\n}\n\n/**\n * Determines if a severity icon is needed based on the component severity\n *\n * @param severity The component severity\n * @returns Whether or not to render the severity icon\n */\nfunction isSeverityIconNeeded(\n  severity: MessageSeverity\n): severity is Exclude<MessageSeverity, 'none'> {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none';\n}\n\nexport { getRenderer, playSound, throwError, severityBasedStyleClass, isSeverityIconNeeded };\n"],"names":["MessageLogger","message","type","Logger.warn","throwError","Error","rendererIdentifier","renderers","rendererKey","key","severity","isValidValueForProp","async","sound","playAudioFromURL","error","playDefaultNotificationSound","variant"],"mappings":"mIAiBA,MAAMA,EAEE,CAACC,EAAiBC,EAAO,WAAaC,EAAAA,KAAY,eAAeD,OAAUD,KA8CnF,SAASG,EAAWH,EAAiBC,EAAO,UAC1C,MAAM,IAAIG,MAAM,eAAeH,QAAWD,IAC5C,eAUA,SACEA,EACAK,EACAC,EACAL,GAIA,IAAKI,IAAuBC,EAC1B,OAGF,MAAMC,EAC0B,mBAAvBF,EAAoCA,EAAmBL,GAAWK,EAI3E,OAAmB,MAAfE,GAMEA,KAAeD,GACnBH,EACE,GAAGI,2DAAqEP,EAAQQ,MAChFP,GAKGK,EAAUC,SAdjB,CAeF,yBAoBA,SACEE,GAGA,OADwBC,EAAAA,oBAAoBD,EAAU,aACf,SAAbA,CAC5B,cAvGAE,eAAyBC,GACvB,GAAc,SAAVA,EAMJ,GAAc,YAAVA,EAYJ,UACQC,EAAAA,iBAAiBD,EACxB,CAAC,MAAOE,GAEPf,EAAmB,yCAAyCa,MAAUE,KACvE,MAhBC,IACEC,EAAAA,8BACD,CAAC,MAAOD,GAGPf,EAAmB,qCAAqCe,KACzD,CAWL,4BA8DA,SAAiCL,EAA2BO,GAE1D,OADwBN,EAAAA,oBAAoBD,EAAU,aACf,SAAbA,EAAsB,eAAeO,KAAWP,IAAa,EACzF"}