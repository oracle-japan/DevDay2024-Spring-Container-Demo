{"version":3,"file":"ListView-2e097844.js","sources":["../../src/UNSAFE_ListView/ListView.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { DataState } from '../UNSAFE_Collection';\nimport { List } from '../PRIVATE_List';\nimport { ListProps } from './List.types';\n/**\n * Props specific to non-virtualized ListView\n */\ntype NonVirtualizedListProps<K, D> = {\n  /**\n   * The data that is used to render each item in ListView.  If the value is null, then ListView will show nothing\n   * if hasMore is false, or loading indicator if hasMore is true.\n   */\n  data: D[] | null;\n  /**\n   * A callback function to extract the key which is used to identify the item.\n   */\n  getRowKey: (data: D) => K;\n  /**\n   * Whether there are more data available to load.  By default this returns false.\n   */\n  hasMore?: boolean;\n  /**\n   * An optional callback function which is invoked when user scrolls to the end of the list.\n   */\n  onLoadMore?: () => void;\n};\n\n/**\n * Props for the ListView Component\n */\nexport type Props<K, D> = Pick<\n  ListProps<K, D>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'children'\n  | 'currentKey'\n  | 'currentItemVariant'\n  | 'gridlines'\n  | 'onCurrentKeyChange'\n  | 'onItemAction'\n  | 'onSelectionChange'\n  | 'promotedSection'\n  | 'selectedKeys'\n  | 'selectionMode'\n  | 'viewportConfig'\n  | 'testId'\n  | 'contextMenuRenderer'\n> &\n  NonVirtualizedListProps<K, D>;\n\nexport function ListView<K extends string | number, D>(props: Props<K, D>) {\n  const dataMetadata = props.data\n    ? props.data.map((aData: D) => {\n        const key = props.getRowKey(aData);\n        return { data: aData, metadata: { key } };\n      })\n    : null;\n  const loadRange = props.onLoadMore ? props.onLoadMore : () => {};\n  const dataState = dataMetadata\n    ? ({\n        offset: 0,\n        data: dataMetadata,\n        sizePrecision: props.hasMore ? 'atLeast' : 'exact',\n        totalSize: dataMetadata.length\n      } as DataState<K, D>)\n    : null;\n  return (\n    <List isVirtualized={false} {...props} onLoadRange={loadRange} data={dataState}>\n      {props.children}\n    </List>\n  );\n}\n"],"names":["props","dataMetadata","data","map","aData","metadata","key","getRowKey","loadRange","onLoadMore","dataState","offset","sizePrecision","hasMore","totalSize","length","_jsx","List","isVirtualized","onLoadRange","children"],"mappings":"mGAwDM,SAAiDA,GACrD,MAAMC,EAAeD,EAAME,KACvBF,EAAME,KAAKC,KAAKC,IAEP,CAAEF,KAAME,EAAOC,SAAU,CAAEC,IADtBN,EAAMO,UAAUH,QAG9B,KACEI,EAAYR,EAAMS,WAAaT,EAAMS,WAAa,OAClDC,EAAYT,EACb,CACCU,OAAQ,EACRT,KAAMD,EACNW,cAAeZ,EAAMa,QAAU,UAAY,QAC3CC,UAAWb,EAAac,QAE1B,KACJ,OACEC,EAAAA,IAACC,EAAAA,KAAI,CAACC,eAAe,KAAWlB,EAAOmB,YAAaX,EAAWN,KAAMQ,EAASU,SAC3EpB,EAAMoB,UAGb"}