{"version":3,"file":"Legend-6eacd6ef.js","sources":["../../src/UNSAFE_Legend/LegendNavUtils.ts","../../src/UNSAFE_Legend/Legend.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { InputDetail, ItemInfo, LegendItem } from './Legend.type';\n\nfunction getItem<K>(itemInfo: ItemInfo, items: LegendItem<K>[]) {\n  const { itemIdx } = itemInfo;\n\n  if (itemIdx == -1) {\n    return items[items.length - 1];\n  }\n  return items[itemIdx];\n}\n\nfunction getNextItemInfo<K>(itemInfo: ItemInfo, items: LegendItem<K>[]) {\n  let itemIdx = itemInfo.itemIdx;\n\n  if (itemInfo.itemIdx == -1) {\n    itemIdx = items.length - 1;\n  }\n\n  itemIdx = Math.min(items.length - 1, itemIdx + 1);\n\n  return { sectionIdx: 0, itemIdx };\n}\n\nfunction getPrevItemInfo<K>(itemInfo: ItemInfo, items: LegendItem<K>[]) {\n  let itemIdx = itemInfo.itemIdx;\n\n  if (itemInfo.itemIdx == -1) {\n    itemIdx = items.length - 1;\n  }\n\n  itemIdx = Math.max(0, itemIdx - 1);\n  return { sectionIdx: 0, itemIdx };\n}\n\n/**\n * Returns utils functions for navigation in simple legend.\n * @param items\n * @returns\n */\nexport function getLegendNavUtils<K>(items: LegendItem<K>[]) {\n  return {\n    getItem: (itemInfo: ItemInfo) => {\n      return getItem(itemInfo, items);\n    },\n    getDetailFromInfo: (itemInfo?: ItemInfo): InputDetail<K> => {\n      if (!itemInfo) {\n        return { itemId: undefined };\n      }\n      const item = getItem(itemInfo, items);\n      return { itemId: item.id };\n    },\n    getPrevItemInfo: (itemInfo: ItemInfo) => {\n      return getPrevItemInfo(itemInfo, items);\n    },\n    getNextItemInfo: (itemInfo: ItemInfo) => {\n      return getNextItemInfo(itemInfo, items);\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef } from 'preact/hooks';\nimport { BaseLegend } from './BaseLegend';\nimport { useEvents } from './useEvents';\nimport { LegendProps } from './Legend.type';\nimport { getLegendNavUtils } from './LegendNavUtils';\nimport { getAriaProps, getDatatipText, getGridNums, getLegendTextStyle } from './LegendUtils';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useLegendTooltip } from './useLegendTooltip';\nimport { useItemFocus } from '../hooks/PRIVATE_useVisEvents';\nimport { useLegendLayout } from './useLegendLayout';\nimport { styles } from './themes/LegendStyles.css';\nimport { useCssVars } from '../hooks/PRIVATE_useCssVars';\nimport { legendVars } from './LegendUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\n\n/**\n * A legend displays an interactive description of symbols, colors, etc., used in graphical information representations.\n */\nexport function Legend<K extends string | number>({\n  orientation = 'horizontal',\n  items,\n  isReadOnly = true,\n  onItemAction,\n  onInput,\n  testId,\n  ...props\n}: LegendProps<K>) {\n  const testIdProps = useTestId(testId);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const rootDimsRef = useRef<DOMRect>();\n  const { getItem, getDetailFromInfo, getPrevItemInfo, getNextItemInfo } = getLegendNavUtils(items);\n  const { resolvedVars, cssContent } = useCssVars(legendVars);\n  const legendFontStylesObj = getLegendTextStyle(\n    {\n      fontStyle: props.textFontStyle,\n      fontSize: props.textFontSize?.toString(),\n      fontWeight: props.textFontWeight?.toString(),\n      fontFamily: props.textFontFamily\n    },\n    resolvedVars\n  );\n  const { textMeasureContent, layoutInfo } = useLegendLayout({\n    resolvedVars,\n    items,\n    rootRef,\n    rootDimsRef,\n    orientation,\n    legendFontStylesObj,\n    symbolWidth: props.symbolWidth\n  });\n  const { hoveredItemInfo, focusedItemInfo, ...eventsProps } = useEvents<K>(\n    !isReadOnly,\n    props.hiddenIds != null,\n    getDetailFromInfo,\n    getPrevItemInfo,\n    getNextItemInfo,\n    onItemAction,\n    onInput\n  );\n\n  const { focusedItemRef } = useItemFocus(focusedItemInfo);\n  const datatipText = getDatatipText(items, getItem, focusedItemInfo, hoveredItemInfo);\n  const { tooltipContent, tooltipProps } = useLegendTooltip({\n    text: datatipText,\n    rootDimsRef,\n    focusedItemInfo,\n    focusedItemRef\n  });\n\n  const ariaProps = getAriaProps(\n    isReadOnly,\n    props['aria-label'],\n    props.hiddenIds,\n    props['aria-describedby'],\n    props['aria-labelledby']\n  );\n  const mergedProps = mergeProps(eventsProps, tooltipProps);\n  const { itemsPerCol, itemsPerRow } = getGridNums(items.length, layoutInfo);\n  const { legendStyle, renderedLegendStyle, preRenderedLegendStyle } = styles;\n  const canRender = orientation === 'vertical' || !!layoutInfo;\n  return (\n    <div\n      ref={rootRef}\n      tabIndex={isReadOnly ? undefined : 0}\n      role=\"application\"\n      class={classNames([legendStyle, canRender ? renderedLegendStyle : preRenderedLegendStyle])}\n      {...testIdProps}\n      {...ariaProps}\n      {...mergedProps}>\n      {canRender ? (\n        <BaseLegend\n          {...props}\n          focusedItemRef={focusedItemRef}\n          items={items}\n          isReadOnly={isReadOnly}\n          orientation={orientation}\n          sectionIdx={0}\n          itemsPerRow={itemsPerRow}\n          itemsPerCol={itemsPerCol}\n          itemWidth={layoutInfo?.isWrapped ? layoutInfo?.maxItemWidth : undefined}\n          focusedItemInfo={focusedItemInfo}\n          hoveredItemInfo={hoveredItemInfo}\n          activeId={eventsProps['aria-activedescendant']}\n        />\n      ) : null}\n      {tooltipContent}\n      {textMeasureContent}\n      {cssContent}\n    </div>\n  );\n}\n"],"names":["getItem","itemInfo","items","itemIdx","length","getLegendNavUtils","getDetailFromInfo","itemId","undefined","id","getPrevItemInfo","Math","max","sectionIdx","getNextItemInfo","min","orientation","isReadOnly","onItemAction","onInput","testId","props","testIdProps","useTestId","rootRef","useRef","rootDimsRef","resolvedVars","cssContent","useCssVars","legendVars","legendFontStylesObj","getLegendTextStyle","fontStyle","textFontStyle","fontSize","textFontSize","toString","fontWeight","textFontWeight","fontFamily","textFontFamily","textMeasureContent","layoutInfo","useLegendLayout","symbolWidth","hoveredItemInfo","focusedItemInfo","eventsProps","useEvents","hiddenIds","focusedItemRef","useItemFocus","datatipText","getDatatipText","tooltipContent","tooltipProps","useLegendTooltip","text","ariaProps","getAriaProps","mergedProps","mergeProps","itemsPerCol","itemsPerRow","getGridNums","legendStyle","renderedLegendStyle","preRenderedLegendStyle","styles","canRender","_jsxs","ref","tabIndex","role","class","classNames","children","_jsx","BaseLegend","itemWidth","isWrapped","maxItemWidth","activeId"],"mappings":"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"}