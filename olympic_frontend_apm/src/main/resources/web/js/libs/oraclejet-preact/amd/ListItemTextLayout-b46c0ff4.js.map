{"version":3,"file":"ListItemTextLayout-b46c0ff4.js","sources":["../../src/UNSAFE_ListItemLayout/ListItemText.tsx","../../src/UNSAFE_ListItemLayout/ListItemLayout.tsx","../../src/UNSAFE_ListItemLayout/ListItemTextLayout.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX, ComponentProps, ComponentChildren } from 'preact';\nimport { Text } from '../UNSAFE_Text';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'children'>;\ntype Props = {\n  children?: ComponentChildren;\n  /**\n   * Name of the text slot which determines styling\n   */\n  variant: 'primary' | 'secondary' | 'tertiary' | 'quaternary' | 'overline' | 'metadata';\n} & IntrinsicProps;\n\nconst textVariants: Record<Props['variant'], ComponentProps<typeof Text>['variant']> = {\n  primary: 'primary',\n  secondary: 'primary',\n  tertiary: 'secondary',\n  quaternary: 'secondary',\n  overline: 'secondary',\n  metadata: 'secondary'\n};\n\nconst textSizes: Record<Props['variant'], ComponentProps<typeof Text>['size']> = {\n  primary: 'md',\n  secondary: 'sm',\n  tertiary: 'xs',\n  quaternary: 'sm',\n  overline: 'xs',\n  metadata: 'sm'\n};\n\nconst textLineClamps: Record<Props['variant'], ComponentProps<typeof Text>['lineClamp']> = {\n  primary: undefined,\n  secondary: 2,\n  tertiary: 2,\n  quaternary: 2,\n  overline: 1,\n  metadata: 1\n};\n\nexport function ListItemText({ children, variant }: Props) {\n  const { isTabbable } = useTabbableMode();\n\n  const textContent = (\n    <Text\n      variant={textVariants[variant]}\n      size={textSizes[variant]}\n      lineClamp={textLineClamps[variant]}>\n      {children}\n    </Text>\n  );\n\n  return isTabbable ? <div tabIndex={0}>{textContent}</div> : textContent;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, JSX } from 'preact';\nimport { Grid } from '../UNSAFE_Grid';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/ListItemLayoutStyles.css';\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'children'>;\ntype Props = {\n  children?: ComponentChildren;\n  /**\n   * The centermost element that should display more important data.\n   */\n  primary?: ComponentChildren;\n  /**\n   * Render Selector component in the leftmost column of the grid.\n   */\n  selector?: ComponentChildren;\n  /**\n   * Visual element to the left of the primary section.\n   * Supports image, avatar, badge, initials, or icon.\n   */\n  leading?: ComponentChildren;\n  /**\n   * A section that is rendered above the primary line.\n   */\n  overline?: ComponentChildren;\n  /**\n   * A section below the primary line.\n   */\n  secondary?: ComponentChildren;\n  /**\n   * Another section below secondary.\n   */\n  tertiary?: ComponentChildren;\n  /**\n   * Provides information about other data.\n   * Some examples of basic metadata are author, date created, date modified, file size, abbreviations, etc.\n   */\n  metadata?: ComponentChildren;\n  /**\n   * Visual element to the right of the primary section and metadata.\n   * Example components are image, avatar, badge, initials, or icon.\n   */\n  trailing?: ComponentChildren;\n  /**\n   * The action prop displays either one primary action or one or more secondary actions.\n   * A common example is using Toolbar.\n   */\n  action?: ComponentChildren;\n  /**\n   * Additional section separated with a space between itself and tertiary.\n   */\n  quaternary?: ComponentChildren;\n  /**\n   * Navigation should normally be used for linking away from the layout.\n   */\n  navigation?: ComponentChildren;\n} & IntrinsicProps;\n\n// TODO: revisit idea of negative margin when selector has a proper API for handling spacing\n// Jira: JET-54543\n\nexport function ListItemLayout({\n  children,\n  selector,\n  leading,\n  primary,\n  secondary,\n  tertiary,\n  overline,\n  metadata,\n  trailing,\n  action,\n  quaternary,\n  navigation\n}: Props) {\n  // generate grid skeleton, adding cells based on which props are defined\n  const { columnsTemplate, firstCell, secondCell, lastCell, hasSecondRow } = getColumnsTemplate(\n    selector,\n    leading,\n    metadata,\n    trailing,\n    action,\n    quaternary,\n    navigation\n  );\n\n  // if ListItemLayout component has a child (ListItemTextLayout) then render that instead of individual props\n  const textArea = children ? (\n    <div className={styles.childrenStyles}>{children}</div>\n  ) : (\n    <div className={styles.flexColumnStyles}>\n      <div>{overline}</div>\n      <div>{primary}</div>\n      <div>{secondary}</div>\n      <div>{tertiary}</div>\n    </div>\n  );\n\n  // a second row is needed when quaternary or navigation are defined\n  const secondRow = hasSecondRow\n    ? [\n        firstCell && <span> </span>,\n        secondCell && <span> </span>,\n        <div className={styles.rowAlignStyles}>{quaternary}</div>,\n        lastCell && <div className={styles.endJustifyStyles}>{navigation}</div>\n      ]\n    : null;\n\n  return (\n    <Grid gap=\"4x\" gridTemplateColumns={columnsTemplate}>\n      {firstCell}\n      {secondCell}\n      <div className={styles.centerVerticalStyles}>{textArea}</div>\n      {lastCell}\n      {secondRow}\n    </Grid>\n  );\n}\n\nfunction getColumnsTemplate(\n  selector: ComponentChildren,\n  leading: ComponentChildren,\n  metadata: ComponentChildren,\n  trailing: ComponentChildren,\n  action: ComponentChildren,\n  quaternary: ComponentChildren,\n  navigation: ComponentChildren\n) {\n  const columnsTemplateBuilder = [];\n\n  let firstCell = null;\n  if (selector) {\n    columnsTemplateBuilder.push('auto');\n    firstCell = <div className={styles.selectorStyles}>{selector}</div>;\n  }\n\n  let secondCell = null;\n  if (leading) {\n    columnsTemplateBuilder.push('auto');\n    secondCell = <div className={styles.centerVerticalStyles}>{leading}</div>;\n  }\n\n  columnsTemplateBuilder.push('1fr'); // Text area always gets 1 full fraction of allotted space\n\n  let lastCell = null;\n  if (metadata || trailing || action || navigation) {\n    columnsTemplateBuilder.push('auto');\n    lastCell = (\n      <div className={styles.flexRowStyles}>\n        <div\n          className={classNames([\n            styles.centerVerticalStyles,\n            metadata ? styles.leftPaddingStyles : ''\n          ])}>\n          {metadata}\n        </div>\n        <div\n          className={classNames([\n            styles.centerVerticalStyles,\n            trailing ? styles.leftPaddingStyles : ''\n          ])}>\n          {trailing}\n        </div>\n        <div\n          className={classNames([\n            styles.centerVerticalStyles,\n            action ? styles.leftPaddingStyles : ''\n          ])}>\n          {action}\n        </div>\n      </div>\n    );\n  }\n\n  const columnsTemplate = columnsTemplateBuilder.join(' ');\n  const hasSecondRow = quaternary || navigation ? true : false;\n\n  return { columnsTemplate, firstCell, secondCell, lastCell, hasSecondRow };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX } from 'preact';\nimport { ListItemText } from './ListItemText';\nimport { styles } from './themes/ListItemLayoutStyles.css';\n\ntype IntrinsicProps = JSX.HTMLAttributes<HTMLDivElement>;\ntype Props = {\n  /**\n   * The primary prop takes a simple string that will be formatted and placed in the center of the text area.\n   */\n  primary?: string;\n  /**\n   * The secondary prop takes a simple string that will be formatted and placed below the primary text.\n   */\n  secondary?: string;\n  /**\n   * The tertiary prop takes a simple string that will be formatted and placed below the secondary text.\n   */\n  tertiary?: string;\n  /**\n   * The overline prop takes a simple string that will be formatted and placed above the primary text.\n   */\n  overline?: string;\n} & IntrinsicProps;\n\nexport function ListItemTextLayout({ primary, secondary, tertiary, overline }: Props) {\n  return (\n    <div className={styles.flexColumnStyles}>\n      <ListItemText variant=\"overline\">{overline}</ListItemText>\n      <ListItemText variant=\"primary\">{primary}</ListItemText>\n      <ListItemText variant=\"secondary\">{secondary}</ListItemText>\n      <ListItemText variant=\"tertiary\">{tertiary}</ListItemText>\n    </div>\n  );\n}\n"],"names":["textVariants","primary","secondary","tertiary","quaternary","overline","metadata","textSizes","textLineClamps","undefined","ListItemText","children","variant","isTabbable","useTabbableMode","textContent","_jsx","Text","size","lineClamp","tabIndex","selector","leading","trailing","action","navigation","columnsTemplate","firstCell","secondCell","lastCell","hasSecondRow","columnsTemplateBuilder","push","className","styles","selectorStyles","centerVerticalStyles","_jsxs","flexRowStyles","classNames","leftPaddingStyles","join","getColumnsTemplate","textArea","childrenStyles","jsxs","flexColumnStyles","jsx","secondRow","rowAlignStyles","endJustifyStyles","Grid","gap","gridTemplateColumns"],"mappings":"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"}