{"version":3,"file":"NumberInputText-d4371de7.js","sources":["../../src/UNSAFE_NumberInputText/StepButton.tsx","../../src/UNSAFE_NumberInputText/Steppers.tsx","../../src/UNSAFE_NumberInputText/NumberInputText.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\n\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { BundleType } from '../resources/nls/bundle';\nimport { StepDirection } from '../hooks/UNSAFE_useSpinning';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\n\ntype Props = {\n  /**\n   * The children are Icons for the button.\n   */\n  children: ComponentChildren;\n\n  /**\n   * The direction of the step.\n   */\n  direction: StepDirection;\n\n  /**\n   * Whether the button is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Pointer event down handler\n   */\n  onPointerDown?: (event: PointerEvent) => void;\n\n  /**\n   * Pointer event up handler\n   */\n  onPointerUp?: (event: PointerEvent) => void;\n\n  /**\n   * Pointer event out handler\n   */\n  onPointerOut?: (event: PointerEvent) => void;\n  \n  /**\n   * Pointer event cancel handler\n   */\n  onPointerCancel?: (event: PointerEvent) => void;\n};\n\n/**\n * A StepButton is used to request a \"step up\" or \"step down\" to a value in NumberInputText.\n * @param children The children are Icons for the button\n * @param direction The direction of the step\n * @param isDisabled Whether the button should be disabled\n * @param onPointerDown Handler called when pointer is down\n * @param onPointerUp Handler called when pointer is up\n * @param onPointerOut Handler called when pointer is out\n * @param onPointerCancel Handler called when pointer is canceled\n */\nexport function StepButton({\n  direction,\n  isDisabled,\n  children,\n  onPointerDown,\n  onPointerUp,\n  onPointerOut,\n  onPointerCancel\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const labelIncrease = translations.inputNumber_increase();\n  const labelDecrease = translations.inputNumber_decrease();\n  const label = direction === 'increase' ? labelIncrease : labelDecrease;\n\n  return (\n    <TabbableModeContext.Provider value={{ isTabbable: false }}>\n      <div\n        aria-hidden=\"true\"\n        onPointerDown={onPointerDown}\n        onPointerUp={onPointerUp}\n        onPointerOut={onPointerOut}\n        onPointerCancel={onPointerCancel}>\n        <IconButton\n          isDisabled={isDisabled}\n          tooltip={label} \n          variant=\"borderless\">\n          {children}\n        </IconButton>\n      </div>\n    </TabbableModeContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { Grid } from '../UNSAFE_Grid';\n\nexport type Props = {\n  /**\n   *The children are StepButtons.\n   */\n  children: ComponentChildren;\n};\n\n// TODO: Replace Steppers with Buttonset when it becomes available\nexport function Steppers({ children }: Props) {\n  return (\n    <Grid align=\"center\" gap=\"1x\" gridTemplateColumns=\"1fr 1fr\">\n      {children}\n    </Grid>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { Label } from '../UNSAFE_Label';\nimport { PrefixSuffix } from '../UNSAFE_PrefixSuffix';\nimport { usePrefixSuffix } from '../hooks/UNSAFE_usePrefixSuffix';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport {\n  InlineUserAssistance,\n  CompactUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { DecrementIcon } from '../PRIVATE_ThemedIcons/DecrementIcon';\nimport { IncrementIcon } from '../PRIVATE_ThemedIcons/IncrementIcon';\nimport { MinusIcon } from '../PRIVATE_ThemedIcons/MinusIcon';\nimport { PlusIcon } from '../PRIVATE_ThemedIcons/PlusIcon';\nimport { StepButton } from './StepButton';\nimport { Steppers } from './Steppers';\nimport { useSpinning, StepEvent } from '../hooks/UNSAFE_useSpinning';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype NumberInputTextProps = {\n  /**\n   * Controls whether the step down button is disabled.\n   */\n  isStepDownDisabled?: boolean;\n\n  /**\n   * Controls whether the step up button is disabled.\n   */\n  isStepUpDisabled?: boolean;\n\n  /**\n   * Called when a continuous step is requested (aka \"spin\")\n   * by holding down the arrow up or arrow down keys, or\n   * by pressing and holding down a step button.\n   */\n  onSpin?: (event: StepEvent) => void;\n\n  /**\n   * Called when spinning is complete and the user has\n   * released the arrow key or step button.\n   */\n  onSpinComplete?: () => void;\n\n  /**\n   * Called when a step is requested by clicking a step button\n   * or by pressing the arrow up or arrow down keys.\n   */\n  onStep?: (event: StepEvent) => void;\n};\n\ntype Props = NumberInputTextProps &\n  TestIdProps & {\n    /**+\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the input.\n     */\n    'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n\n    /**\n     * The maximum allowed value when hasSteppers is true. Used for the aria-valuemax attribute.\n     * When hasSteppers is false, this is ignored because when there are no steppers, there is no role=\"spinbutton\",\n     * and aria-value* attributes are not valid without this role.\n     */\n    'aria-valuemax'?: TextFieldInputProps['aria-valuemax'];\n\n    /**\n     * The minimum allowed value when hasSteppers is true. Used for the aria-valuemin attribute.\n     * When hasSteppers is false, this is ignored because when there are no steppers, there is no role=\"spinbutton\",\n     * and aria-value* attributes are not valid without this role.\n     */\n    'aria-valuemin'?: TextFieldInputProps['aria-valuemin'];\n\n    /**\n     * The number value of the component when hasSteppers is true. Used for the aria-valuenow attribute.\n     * When hasSteppers is false, this is ignored because when there are no steppers, there is no role=\"spinbutton\",\n     * and aria-value* attributes are not valid without this role.\n     */\n    'aria-valuenow'?: TextFieldInputProps['aria-valuenow'];\n\n    /**\n     * The formatted value of the component when hasSteppers is true. Used for the aria-valueText\n     * attribute to provide a more human readable text alternative for\n     * aria-valuenow.\n     * When hasSteppers is false, this is ignored because when there are no steppers, there is no role=\"spinbutton\",\n     * and aria-value* attributes are not valid without this role.\n     */\n    'aria-valuetext'?: TextFieldInputProps['aria-valuetext'];\n\n    /**\n     * Text to provide guidance to help the user understand what data to enter.\n     */\n    assistiveText?: InlineUserAssistanceProps['assistiveText'];\n\n    /**\n     * Dictates component's autocomplete state.\n     * This attribute indicates whether the value of the control can be automatically completed by the browser.\n     * The common values are \"on\" and \"off\".\n     */\n    autoComplete?: TextFieldInputProps['autoComplete'];\n\n    /**\n     * Autofocus specifies whether the component will get focus when the page is loaded.\n     * If it is set to true then the associated component will get input focus when the page is loaded.\n     * Setting this property doesn't set the focus to the component: it tells the browser to focus\n     * to it when the element is inserted in the document.\n     */\n    autoFocus?: TextFieldInputProps['autoFocus'];\n\n    /**\n     * Specifies how many columns to span in a FormLayout with direction === 'row'\n     */\n    columnSpan?: LayoutColumnSpan;\n\n    /**\n     * Controls whether the step buttons are shown.\n     */\n    hasSteppers?: boolean;\n\n    /**\n     * Help source URL associated with the component.\n     */\n    helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n\n    /**\n     * Custom text to be rendered for the <code>helpSourceLink</code>.\n     */\n    helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n\n    /**\n     * Specifies whether the component is disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies whether the component is readonly.\n     */\n    isReadonly?: boolean;\n\n    /**\n     * Specifies for accessibility purposes whether a value is required.\n     *\n     * Setting this property to <code>false</code> means that a value is not required to be\n     * committed by the user. Setting this property to <code>true</code> means that a value\n     * is required to be committed by the user.\n     */\n    isRequired?: TextFieldInputProps['isRequired'];\n\n    /**\n     * Specifies whether to show an indicator on screen that a value is required, for example\n     * before the user has committed a value.\n     */\n    isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n\n    /**\n     * Specifies the label associated with the field.\n     */\n    label: string;\n\n    /**\n     * Specifies where the label is positioned relative to the field.\n     */\n    labelEdge?: 'inside' | 'start' | 'top' | 'none';\n\n    /**\n     * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n     */\n    labelStartWidth?: Size;\n\n    /**\n     * Messages to show on screen that are associated with the component.\n     */\n    messages?: InlineUserAssistanceProps['messages'];\n\n    /**\n     * A short hint to display before the user enters a value.\n     */\n    placeholder?: TextFieldInputProps['placeholder'];\n\n    /**\n     * The prefix displays as regular text before the input text, and inline with it.\n     * The prefix is not editable or focusable.\n     */\n    prefix?: string;\n\n    /**\n     * Variant style of step buttons.\n     * @default directional\n     */\n    stepperVariant?: (typeof stepperVariants)[number];\n\n    /**\n     * The suffix displays as regular text after the input text, and inline with it.\n     * The suffix is not editable or focusable.\n     */\n    suffix?: string;\n\n    /**\n     * Specifies how to align text within the field.\n     */\n    textAlign?: TextFieldInputProps['textAlign'];\n\n    /**\n     * Specifies the density of the user assistance presentation. It can be set to:\n     * <ul>\n     * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n     * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n     * </ul>\n     */\n    userAssistanceDensity?: UserAssistanceDensityType;\n\n    /**\n     * The current possibly formatted display value of the component.\n     */\n    value?: TextFieldInputProps['value'];\n\n    /**\n     * The style variant of the component.\n     */\n    variant?: TextFieldInputProps['variant'];\n\n    /**\n     * The type of virtual keyboard to display for entering a value on mobile browsers.\n     * This property has no effect on desktop browsers.\n     */\n    virtualKeyboard?: 'auto' | 'number' | 'text';\n\n    /**\n     * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n     */\n    onCommit?: TextFieldInputProps['onCommit'];\n\n    /**\n     * Callback invoked each time the user changes the value of the field. For example, if the user\n     * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n     * respectively.\n     */\n    onInput: TextFieldInputProps['onInput'];\n  };\n\nexport const stepperVariants = ['directional', 'quantitative'] as const;\n\nexport const NumberInputText = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      'aria-valuemax': ariaValueMax,\n      'aria-valuemin': ariaValueMin,\n      'aria-valuenow': ariaValueNow,\n      'aria-valuetext': ariaValueText,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      columnSpan,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      isStepDownDisabled: propIsStepDownDisabled,\n      isStepUpDisabled: propIsStepUpDisabled,\n      hasSteppers = false,\n      stepperVariant = 'directional',\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      placeholder,\n      prefix,\n      suffix,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      virtualKeyboard,\n      onInput,\n      onCommit,\n      onSpin,\n      onSpinComplete,\n      onStep,\n      testId\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLDivElement\n    >({ isDisabled, isReadonly, ref });\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value\n    });\n    // Disable the steppers if the number input is disabled.\n    const isStepDownDisabled = isDisabled || propIsStepDownDisabled;\n    const isStepUpDisabled = isDisabled || propIsStepUpDisabled;\n\n    // Set focus to the input when a step is requested by clicking/holding down a step button.\n    // For Arrow up/down, it already has focus so no action is needed.\n    // Note: for readonly there are no steppers, for disabled stepping is disabled, so this only\n    // applies to enabled case.\n    const handleStep = useCallback(\n      (e: StepEvent) => {\n        if (!isFocused) {\n          enabledElementRef.current?.focus();\n        }\n        onStep?.(e);\n      },\n      [onStep, isFocused, enabledElementRef]\n    );\n\n    // if hasSteppers, keyboardHandlerProps will be spread onto TextFieldInput to handle\n    // stepping functionality via the arrow up or down keys.\n    // also, pointerIncreaseHandlerProps and pointerDecreaseHandlerProps will be spread to\n    // the corresponding StepButton\n    const { keyboardHandlerProps, pointerIncreaseHandlerProps, pointerDecreaseHandlerProps } =\n      useSpinning({\n        isStepDownDisabled,\n        isStepUpDisabled,\n        onSpin,\n        onSpinComplete,\n        onStep: handleStep\n      });\n\n    const DecreaseButton = hasSteppers ? (\n      <StepButton\n        direction=\"decrease\"\n        isDisabled={isStepDownDisabled}\n        {...pointerDecreaseHandlerProps}>\n        {stepperVariant === 'directional' ? <DecrementIcon /> : <MinusIcon />}\n      </StepButton>\n    ) : undefined;\n\n    const IncreaseButton = hasSteppers ? (\n      <StepButton\n        direction=\"increase\"\n        isDisabled={isStepUpDisabled}\n        {...pointerIncreaseHandlerProps}>\n        {stepperVariant === 'directional' ? <IncrementIcon /> : <PlusIcon />}\n      </StepButton>\n    ) : undefined;\n\n    // when stepperVariant is quantitative, the decrease button is placed in the startContent slot\n    const startContent =\n      hasSteppers && stepperVariant === 'quantitative' ? DecreaseButton : undefined;\n\n    // when stepperVariant is directional, both buttons are wrapped in Steppers and placed in the endContent slot\n    // if it equals quantitative, only the increase button is placed in the endContent slot\n    const endContent = hasSteppers ? (\n      stepperVariant === 'directional' ? (\n        <Steppers>\n          {DecreaseButton}\n          {IncreaseButton}\n        </Steppers>\n      ) : (\n        IncreaseButton\n      )\n    ) : undefined;\n\n    const hasInsideLabel = label !== undefined && labelEdge === 'inside';\n\n    const {\n      shouldRenderPrefix,\n      shouldRenderSuffix,\n      prefixProps,\n      suffixProps,\n      valuePrefixSuffix,\n      ariaLabelledBy\n    } = usePrefixSuffix({\n      baseId,\n      hasEndContent: endContent !== undefined,\n      hasInsideLabel,\n      hasStartContent: startContent !== undefined,\n      hasValue: formFieldContext.hasValue,\n      isDisabled,\n      isFocused,\n      labelId: labelProps.id,\n      prefix,\n      suffix,\n      value\n    });\n\n    const renderedPrefix = shouldRenderPrefix ? <PrefixSuffix {...prefixProps} /> : undefined;\n    const renderedSuffix = shouldRenderSuffix ? <PrefixSuffix {...suffixProps} /> : undefined;\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            ref={anchorRef}\n            testId={testId}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              as=\"div\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              textAlign={textAlign}\n              value={valuePrefixSuffix}\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={hasInsideLabel}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    // If ariaValueText is the same as ariaValueNow.toString, no need to show it.\n    const valueText =\n      ariaValueNow === undefined\n        ? ariaValueText\n        : ariaValueNow.toString() !== ariaValueText\n        ? ariaValueText\n        : undefined;\n\n    const mainContent = (\n      <>\n        {renderedPrefix}\n        <TextFieldInput\n          aria-labelledby={ariaLabelledBy}\n          aria-label={ariaLabel}\n          aria-valuemax={hasSteppers ? ariaValueMax : undefined}\n          aria-valuemin={hasSteppers ? ariaValueMin : undefined}\n          aria-valuenow={hasSteppers ? ariaValueNow : undefined}\n          aria-valuetext={hasSteppers ? valueText : undefined}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasEndContent={endContent !== undefined}\n          hasInsideLabel={hasInsideLabel}\n          hasPrefix={renderedPrefix !== undefined}\n          hasStartContent={startContent !== undefined}\n          hasSuffix={renderedSuffix !== undefined}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          placeholder={placeholder}\n          role={hasSteppers ? 'spinbutton' : undefined}\n          textAlign={textAlign}\n          type={isMobile() ? virtualKeyboard : undefined}\n          value={isDisabled ? valuePrefixSuffix : value}\n          onCommit={onCommitAndDispatch}\n          onInput={onInputAndDispatch}\n          {...inputProps}\n          {...(hasSteppers ? keyboardHandlerProps : {})}\n        />\n        {renderedSuffix}\n      </>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          startContent={startContent}\n          endContent={endContent}\n          columnSpan={columnSpan}\n          compactUserAssistance={compactUserAssistance}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          mainFieldRef={anchorRef}\n          hasZeroStartMargin={hasSteppers && stepperVariant === 'quantitative'}\n          testId={testId}\n          {...textFieldProps}\n          {...fieldLabelProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if running on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n"],"names":["StepButton","direction","isDisabled","children","onPointerDown","onPointerUp","onPointerOut","onPointerCancel","translations","useTranslationBundle","labelIncrease","inputNumber_increase","labelDecrease","inputNumber_decrease","label","_jsx","TabbableModeContext","Provider","value","isTabbable","jsx","IconButton","tooltip","variant","Steppers","Grid","align","gap","gridTemplateColumns","NumberInputText","forwardRef","ariaDescribedBy","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assistiveText","autoComplete","autoFocus","columnSpan","helpSourceLink","helpSourceText","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","isStepDownDisabled","propIsStepDownDisabled","isStepUpDisabled","propIsStepUpDisabled","hasSteppers","stepperVariant","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","placeholder","prefix","suffix","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","virtualKeyboard","onInput","onCommit","onSpin","onSpinComplete","onStep","testId","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","isFocused","readonlyElementRef","useFocusableTextField","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","handleStep","e","current","focus","keyboardHandlerProps","pointerIncreaseHandlerProps","pointerDecreaseHandlerProps","useSpinning","DecreaseButton","DecrementIcon","SvgChevronDown","MinusIcon","undefined","IncreaseButton","IncrementIcon","SvgChevronUp","PlusIcon","startContent","endContent","_jsxs","hasInsideLabel","shouldRenderPrefix","shouldRenderSuffix","prefixProps","suffixProps","valuePrefixSuffix","ariaLabelledBy","usePrefixSuffix","hasEndContent","hasStartContent","hasValue","labelId","id","renderedPrefix","PrefixSuffix","renderedSuffix","labelComp","Label","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","anchorRef","useRef","compactUserAssistance","CompactUserAssistance","FormFieldContext","ReadonlyTextField","role","onBlur","onfocusout","onFocus","onfocusin","ReadonlyTextFieldInput","as","elementRef","hasEmptyLabel","valueText","toString","mainContent","TextFieldInput","hasPrefix","hasSuffix","inputRef","isMobile","TextField","mainFieldRef","hasZeroStartMargin","deviceType","getClientHints"],"mappings":"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"}