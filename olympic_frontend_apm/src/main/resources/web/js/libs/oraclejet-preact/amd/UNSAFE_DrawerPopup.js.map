{"version":3,"file":"UNSAFE_DrawerPopup.js","sources":["../../src/UNSAFE_DrawerPopup/DrawerPopup.tsx"],"sourcesContent":["import { JSX, RefObject } from 'preact';\nimport { useState, useRef, useEffect, useCallback } from 'preact/hooks';\nimport { Layer } from '../UNSAFE_Layer';\nimport { Modal } from '../UNSAFE_Modal';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { focusOn, focusWithin, getActiveElement } from '../utils/PRIVATE_tabbableUtils';\nimport { normalizePosition } from '../utils/PRIVATE_floatingUtils';\nimport { RtlSide } from '../UNSAFE_Floating';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\n\n// Hooks\nimport { useOutsideClick } from '../hooks/UNSAFE_useOutsideClick';\nimport { useAnimation } from '../hooks/UNSAFE_useAnimation';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useSwipe } from '../hooks/UNSAFE_useSwipe';\n\n// Style imports\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { DrawerPopupVariantOptions } from './themes/DrawerPopupStyles.css';\nimport { colorInterpolations, ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { DrawerPopupRedwoodTheme } from './themes/redwood/DrawerPopupTheme';\n\n// Types\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'children'>;\ntype Placement = 'start' | 'end' | 'bottom';\ntype NormalizedPlacement = 'left' | 'right' | 'bottom';\ntype Status = 'unmounted' | 'initial' | 'opening' | 'closing';\ntype VisibilityStatus = 'hidden' | 'visible';\ntype DisplayModeHorizontal = 'overlay' | 'fullOverlay';\ntype OnCloseDetail = {\n  reason: 'outsideClick' | 'escapeKey' | 'swipe';\n};\n\ntype Props = IntrinsicProps &\n  Pick<ColorProps, 'backgroundColor'> & {\n    /**\n     * Specifies whether the Drawer is open.\n     */\n    isOpen: boolean;\n    /**\n     * Specifies at what edge the Drawer opens.\n     * Supported values are:\n     * <p><code>start</code>, <code>end</code>, <code>bottom</code></p>\n     * Default is <code>start</code>.\n     */\n    placement?: Placement;\n    /**\n     * Specifies modality of the Darwer.\n     * Supported values are:\n     * <p><code>modal</code>, <code>modeless</code></p>\n     * Default is <code>modal</code>.\n     */\n    modality?: 'modal' | 'modeless';\n    /**\n     * Specifies callback triggered when a user tries to close a Drawer through UI interaction.\n     * The parent should listen to this event and close the Drawer. If the parent fails to remove\n     * the Popup, then no change will be done in the UI by the component.\n     * Supported detail values are:\n     * <p><code>outsideClick</code>, <code>escapeKey</code></p>, <code>swipe</code>\n     */\n    onClose?: (detail: OnCloseDetail) => void;\n    /**\n     * Specifies callback triggered after the animation ends.\n     */\n    onTransitionEnd?: (value: boolean) => void;\n    /**\n     * Optional ref for an element to focus on when component mounts.\n     */\n    autoFocusRef?: RefObject<HTMLElement>;\n    /**\n     * Specifies guidance for screen readers.\n     */\n    'aria-label'?: string;\n    /**\n     * Specifies ID of an element used for guidance for screen readers.\n     */\n    'aria-labelledby'?: string;\n    /**\n     * Specifies ID of an element (or space separated IDs of multiple elements) that\n     * describes the Drawer.\n     */\n    'aria-describedby'?: string;\n  } & TestIdProps;\n\n// Constants\nconst displayModefullWidthThreshold = 600;\nconst zero = '0px';\nconst duration = 250;\n\nconst getElementHeight = (element: HTMLDivElement): number => {\n  return Math.round(element.offsetHeight);\n};\n\nconst getElementWidth = (element: HTMLDivElement): number => {\n  return Math.round(element.getBoundingClientRect().width);\n};\n\n/**\n * A drawer popup adds a single slide-in side content alongside some primary content to an application window.\n *\n * This drawer always overlays the page and can be placed at the 'start', 'end' or 'bottom' edge.\n */\nexport const DrawerPopup = ({\n  children,\n  isOpen = false,\n  autoFocusRef,\n  placement = 'start',\n  modality = 'modal',\n  onClose,\n  onTransitionEnd,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy,\n  testId,\n  ...props\n}: Props) => {\n  // Initialize states\n  const [status, setStatus] = useState<Status>(isOpen ? 'initial' : 'unmounted');\n  const [visibility, setVisibility] = useState<VisibilityStatus>('hidden');\n  const [isOutsideClickDisabled, setIsOutsideClickDisabled] = useState<boolean>(!isOpen);\n  const [displayModeHorizontal, setDisplayModeHorizontal] =\n    useState<DisplayModeHorizontal>('overlay');\n\n  const rootRef = useRef<HTMLDivElement>(null);\n  const launcherRef = useRef<HTMLElement | null>(null);\n\n  const isBottomPlacement = placement === 'bottom';\n\n  // Animation config\n  const animationStates = {\n    opening: () => {\n      if (isBottomPlacement) {\n        return {\n          from: {\n            translateY: getTranslateY()\n          },\n          to: {\n            translateY: zero\n          },\n          options: {\n            duration: duration\n          }\n        };\n      } else {\n        return {\n          from: {\n            translateX: getTranslateX()\n          },\n          to: {\n            translateX: zero\n          },\n          options: {\n            duration: duration\n          }\n        };\n      }\n    },\n    closing: () => {\n      if (isBottomPlacement) {\n        return {\n          from: {\n            translateY: zero\n          },\n          to: {\n            translateY: getTranslateY()\n          },\n          options: {\n            duration: duration\n          }\n        };\n      } else {\n        return {\n          from: {\n            translateX: zero\n          },\n          to: {\n            translateX: getTranslateX()\n          },\n          options: {\n            duration: duration\n          }\n        };\n      }\n    }\n  };\n\n  // testId support\n  const testIdProps = useTestId(testId);\n\n  // Normalizing position\n  const { direction } = useUser();\n  const getNormalizedPlacement = (): RtlSide => {\n    return normalizePosition(placement, direction);\n  };\n\n  const getTranslateX = (): string => {\n    return `${getNormalizedPlacement() === 'right' ? '' : '-'}${getElementWidth(\n      rootRef.current as HTMLDivElement\n    )}px`;\n  };\n\n  const getTranslateY = (): string => {\n    return `${getElementHeight(rootRef.current as HTMLDivElement)}px`;\n  };\n\n  // Animation\n  const { nodeRef } = useAnimation<Status, HTMLDivElement>(status, {\n    animationStates,\n    isAnimatedOnMount: true,\n    onAnimationEnd: () => {\n      if (status === 'opening') {\n        onTransitionEnd?.(true);\n      } else if (!isOpen) {\n        nodeRef(null);\n        setVisibility('hidden');\n        setStatus('unmounted');\n        onTransitionEnd?.(false);\n      }\n    }\n  });\n\n  useEffect(() => {\n    // 1. Ignore status update on initial render\n    if (status === 'unmounted' && !isOpen) {\n      return;\n    }\n\n    // 2. Mount visually hidden component\n    // Component gets mounted, but will be visually hidden to avoid flickering\n    // Flickering happens because it gets rendered before animation hook repositions\n    // it in next render cycle\n    if (status === 'unmounted' && isOpen) {\n      setStatus('initial');\n      return;\n    }\n\n    // 3. Setup animation\n    // Component has been mounted.\n    // We will kick out animation as node is already present in DOM.\n    // To avoid flickering, we still keep it visually hidden until the next render cycle.\n    if (status === 'initial' && isOpen) {\n      nodeRef(rootRef.current);\n      setIsOutsideClickDisabled(false);\n      setStatus('opening');\n      return;\n    }\n\n    // 3. Unhide component. It becomes visible.\n    if (status === 'opening' && isOpen) {\n      setVisibility('visible');\n      return;\n    }\n\n    // 4. Closing\n    if (!isOpen) {\n      setIsOutsideClickDisabled(true);\n      setStatus('closing');\n    }\n  }, [isOpen, status, nodeRef]);\n\n  // Launcher handler\n  useEffect(() => {\n    if (status === 'opening') {\n      // Remember launcher\n      const activeElement = getActiveElement() as HTMLElement;\n      launcherRef.current = activeElement === document.body ? document.body : activeElement;\n\n      // Register F6 key handler to enter the Popup\n      launcherRef.current?.addEventListener('keydown', launcherKeyDownCallback);\n    }\n    if (status === 'closing') {\n      return () => {\n        // Deregister F6 key handler\n        launcherRef.current?.removeEventListener('keydown', launcherKeyDownCallback);\n      };\n    }\n    return;\n  }, [status]);\n\n  const launcherKeyDownCallback = (event: KeyboardEvent): void => {\n    // Moves focus from launcher (must have focus) back to the Drawer\n    if (launcherRef.current === getActiveElement() && event.code === 'F6') {\n      // Prevent default F6 handlers.\n      // F6 is a standard Chrome address bar shortcut on Windows.\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Focus on first tabbable in a container or container itself if there is none\n      focusWithin(rootRef.current as HTMLElement);\n    }\n  };\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      const launcherEl = launcherRef.current;\n      switch (event.code) {\n        case 'Escape': {\n          onClose?.({ reason: 'escapeKey' });\n          break;\n        }\n        case 'F6':\n          // Prevent default F6 handlers.\n          // F6 is a standard Chrome address bar shortcut on Windows.\n          event.preventDefault();\n          event.stopPropagation();\n          // Focus launcher\n          if (launcherEl) {\n            focusOn(launcherEl);\n          }\n          break;\n      }\n    },\n    [onClose]\n  );\n\n  // OutsideClick handler\n  const handleOutsideClick = useCallback(() => {\n    // Trigger onClose event with outside click detail\n    onClose?.({ reason: 'outsideClick' });\n  }, [onClose]);\n\n  useOutsideClick({\n    isDisabled: isOutsideClickDisabled,\n    ref: rootRef,\n    handler: handleOutsideClick\n  });\n\n  // Drawer placement\n  const getDrawerPlacement = (): NormalizedPlacement => {\n    if (isBottomPlacement) {\n      return placement;\n    } else {\n      if (direction === 'rtl') {\n        return placement === 'start' ? 'right' : 'left';\n      } else {\n        return placement === 'start' ? 'left' : 'right';\n      }\n    }\n  };\n\n  const clientHints = getClientHints();\n\n  const getViewportWidth = useCallback((): number => {\n    if (clientHints.platform === 'ios') {\n      // On ios window.innerWidth is not recommended way of measuring the viewport\n      return document.documentElement.clientWidth;\n    }\n    return window.innerWidth;\n  }, [clientHints.platform]);\n\n  // Window resize handler\n  // Handles display mode: Overlay <> Full overlay (full width side drawers)\n  const handleResize = useCallback(() => {\n    const viewportWidth = getViewportWidth();\n    if (displayModeHorizontal === 'overlay' && viewportWidth < displayModefullWidthThreshold) {\n      setDisplayModeHorizontal('fullOverlay');\n    }\n    if (displayModeHorizontal === 'fullOverlay' && viewportWidth > displayModefullWidthThreshold) {\n      setDisplayModeHorizontal('overlay');\n    }\n  }, [getViewportWidth, displayModeHorizontal]);\n\n  useEffect(() => {\n    const root = rootRef.current;\n    if (root && status === 'opening') {\n      const resizeObserver = new ResizeObserver(() => {\n        handleResize();\n      });\n      resizeObserver.observe(document.body);\n      return () => {\n        resizeObserver.unobserve(document.body);\n      };\n    }\n    return undefined;\n  }, [status, handleResize]);\n\n  // OutsideClick handler\n  const swipeHandler = useCallback(\n    (event: any): void => {\n      const swipeDir = event.direction;\n      if (\n        (direction === 'ltr' && placement === 'start' && swipeDir === 'left') ||\n        (placement === 'end' && swipeDir === 'right') ||\n        (direction === 'rtl' && placement === 'start' && swipeDir === 'right') ||\n        (placement === 'end' && swipeDir === 'left') ||\n        (placement === 'bottom' && swipeDir === 'down')\n      ) {\n        onClose?.({ reason: 'swipe' });\n      }\n    },\n    [direction, placement, onClose]\n  );\n\n  const swipeOptions = {\n    threshold: 50,\n    maximumTime: 750,\n    tolerance: 40\n  };\n  const { swipeProps } = useSwipe(swipeHandler, swipeOptions);\n\n  // Styles\n  const { classes } = useComponentTheme<DrawerPopupVariantOptions>(DrawerPopupRedwoodTheme, {\n    placement: getDrawerPlacement(),\n    visibility,\n    displayModeHorizontal:\n      ['start', 'end'].indexOf(placement) > -1 ? displayModeHorizontal : undefined\n  });\n\n  const interpolations = [...Object.values(colorInterpolations)];\n  const styleInterpolations = mergeInterpolations<ColorProps>(interpolations);\n  const { ...styles } = styleInterpolations(props);\n\n  const renderDrawer = () => {\n    return (\n      <div\n        ref={rootRef}\n        className={classes}\n        style={styles}\n        tabIndex={-1}\n        role=\"dialog\"\n        onKeyDown={handleKeyDown}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        {...swipeProps}\n        {...testIdProps}>\n        <FocusTrap autoFocusRef={autoFocusRef}>{children}</FocusTrap>\n      </div>\n    );\n  };\n\n  const isMounted = status !== 'unmounted';\n  if (isMounted) {\n    // Modal vs. modelss upper wrapper\n    if (modality === 'modal') {\n      return <Modal isOpen={isMounted}>{renderDrawer()}</Modal>;\n    } else {\n      return <Layer>{renderDrawer()}</Layer>;\n    }\n  }\n\n  return null;\n};\n"],"names":["zero","duration","children","isOpen","autoFocusRef","placement","modality","onClose","onTransitionEnd","ariaLabel","ariaLabelledBy","ariaDescribedBy","testId","props","status","setStatus","useState","visibility","setVisibility","isOutsideClickDisabled","setIsOutsideClickDisabled","displayModeHorizontal","setDisplayModeHorizontal","rootRef","useRef","launcherRef","isBottomPlacement","animationStates","opening","from","translateY","getTranslateY","to","options","translateX","getTranslateX","closing","testIdProps","useTestId","direction","useUser","normalizePosition","element","current","Math","round","getBoundingClientRect","width","offsetHeight","nodeRef","useAnimation","isAnimatedOnMount","onAnimationEnd","useEffect","activeElement","getActiveElement","document","body","addEventListener","launcherKeyDownCallback","removeEventListener","event","code","preventDefault","stopPropagation","focusWithin","handleKeyDown","useCallback","launcherEl","reason","focusOn","handleOutsideClick","useOutsideClick","isDisabled","ref","handler","clientHints","getClientHints","getViewportWidth","platform","documentElement","clientWidth","window","innerWidth","handleResize","viewportWidth","resizeObserver","ResizeObserver","observe","unobserve","swipeHandler","swipeDir","swipeProps","useSwipe","threshold","maximumTime","tolerance","classes","useComponentTheme","DrawerPopupRedwoodTheme","indexOf","undefined","interpolations","Object","values","colorInterpolations","styleInterpolations","mergeInterpolations","styles","renderDrawer","_jsx","className","style","tabIndex","role","onKeyDown","FocusTrap","isMounted","jsx","Modal","Layer"],"mappings":"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"}