{"version":3,"file":"TabBarItem-9da8be57.js","sources":["../../src/UNSAFE_TabBarCommon/BaseTabBarItem.tsx","../../src/UNSAFE_TabBarCommon/TabBarItem.tsx"],"sourcesContent":["import { ComponentChildren, ComponentChild } from 'preact';\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { Text } from '../UNSAFE_Text';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useTabBarContext } from './useTabBarContext';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TabBarItemVariantOptions } from './themes/TabBarItemStyles.css';\nimport { TabBarItemRedwoodTheme } from './themes/redwood/TabBarItemTheme';\nimport { Badge } from '../UNSAFE_Badge';\nimport { WarningS } from '../UNSAFE_RedwoodIcons/WarningS';\nimport { ErrorS } from '../UNSAFE_RedwoodIcons/ErrorS';\nimport { InformationS } from '../UNSAFE_RedwoodIcons/InformationS';\nimport { SuccessS } from '../UNSAFE_RedwoodIcons/SuccessS';\n\ntype Severity = 'warning' | 'info' | 'none' | 'error' | 'confirmation';\n\nexport type BaseTabBarItemProps<K extends string | number> = {\n  /**\n   * Key of the TabBarItem\n   */\n  itemKey: K;\n  /**\n   * Label of the TabBarItem. For icon only display this label is the content\n   * for aria-label and tooltip text of the Tab.\n   */\n  label: string;\n  /**\n   * The icon before the label in non-stack case, icon above the label in\n   * stacked case or the stand alone icon when no label is specified.\n   */\n  icon?: ComponentChild;\n  /**\n   * The content to be rendered inside the Badge component.\n   */\n  badge?: string;\n  /**\n   * The content to be rendered inside the Text component as a metadata,\n   * that appears after the label in non stack case only.\n   */\n  metadata?: string;\n  /**\n   * The status icon to be rendered after the label in non stack case only.\n   */\n  severity?: Severity;\n  /**\n   * The content to be rendered for remove icon\n   */\n  removeIcon?: ComponentChildren;\n  /**\n   * The control for enabling and disabling focusRing\n   */\n  showFocusRingOverride?: boolean;\n};\n\nexport function BaseTabBarItem<K extends string | number>({\n  itemKey,\n  label,\n  icon,\n  badge,\n  metadata,\n  severity = 'none',\n  removeIcon,\n  showFocusRingOverride\n}: BaseTabBarItemProps<K>) {\n  const {\n    onSelect,\n    selection,\n    currentKey,\n    showFocusRing,\n    layout,\n    display,\n    size,\n    isEdgeBottom,\n    tabItemPrefix\n  } = useTabBarContext();\n\n  const isCurrent = currentKey === itemKey;\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  /**\n   * FIXME: \n   *\n   * This is a temporary workaround until [JET-63308]() is resolved.\n   *\n   * This will optimistically attempt to scroll tab items into view as the tab\n   * item becomes \"current\" regardless of whether this tab item is nested\n   * inside of a conveyor/scrollable container.\n   *\n   * After JET-63308 (or equivalent) is implemented, we can remove this with a\n   * proper utility that only invokes inside of a scrolling context.\n   */\n  useEffect(() => {\n    if (ref.current && isCurrent) {\n      ref.current.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });\n    }\n  }, [isCurrent]);\n\n  //Selection\n  //Dependency on currentKey because upon removal selectionChange does not change hence no re render\n  //and it is still holding the deleted key as selection\n  const handlePress = useCallback(() => {\n    onSelect?.({ value: itemKey as K });\n  }, [itemKey, onSelect]);\n\n  const { pressProps } = usePress(handlePress);\n\n  const isSelected = selection === itemKey;\n\n  const isStacked = display === 'stacked' ? true : false;\n  const isIconOnly = display === 'icons' ? true : false;\n  const isTall = size === 'lg' ? true : false;\n  const labelRequirement = label && !(label === ' ' || label === undefined);\n  const severityRequirement = !(severity === 'none' || severity === undefined);\n\n  const IconComponent = (severityValue: Severity) => {\n    switch (severityValue) {\n      case 'error':\n        return <ErrorS color=\"danger\" />;\n      case 'warning':\n        return <WarningS color=\"warning\" />;\n      case 'info':\n        return <InformationS color=\"info\" />;\n      case 'confirmation':\n        return <SuccessS color=\"success\" />;\n      default:\n        return null;\n    }\n  };\n\n  const { direction } = useUser();\n  const makeFocusRingVisible =\n    showFocusRingOverride !== undefined ? showFocusRingOverride : showFocusRing;\n\n  const {\n    classes,\n    styles: {\n      tabBarItemIcon,\n      tabBarItemIconStacked,\n      tabBarItemMetadata,\n      tabBarItemStackedBadge,\n      tabBarItemStackedBadgeRtl,\n      tabBarItemRemoveIcon\n    }\n  } = useComponentTheme<TabBarItemVariantOptions>(TabBarItemRedwoodTheme, {\n    selection: isSelected ? 'isSelected' : 'notSelected',\n    current: isCurrent ? 'isCurrent' : 'notCurrent',\n    focusRing: makeFocusRingVisible ? 'showFocusRing' : 'noFocusRing',\n    edgeBottom: isEdgeBottom ? 'isBottom' : 'notBottom'\n  });\n\n  const tabBarItem = classNames([classes]);\n  const tabBarItemIconClasses = classNames([\n    tabBarItemIcon,\n    (isStacked || isIconOnly || !labelRequirement) && tabBarItemIconStacked\n  ]);\n  const tabBarItemMetadataClasses = classNames([tabBarItemMetadata]);\n  const tabBarItemStackedBadgeClasses = classNames([\n    tabBarItemStackedBadge,\n    direction === 'rtl' && tabBarItemStackedBadgeRtl\n  ]);\n  const removeClass = classNames([tabBarItemRemoveIcon]);\n\n  //instead of specifying flex: '1 0 auto' in cssProps var\n  const styleInterpolations = mergeInterpolations<FlexitemProps>([\n    ...Object.values(flexitemInterpolations)\n  ]);\n  const flexDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto'\n  });\n\n  return (\n    <div\n      data-oj-key={itemKey}\n      data-oj-removable={removeIcon ? 'true' : undefined}\n      id={tabItemPrefix + itemKey}\n      class={tabBarItem}\n      ref={ref}\n      role=\"tab\"\n      aria-selected={isSelected}\n      {...pressProps}\n      style={flexDimensions}>\n      <Flex\n        minWidth=\"10.5x\"\n        minHeight={isTall ? '14.5x' : '100%'}\n        height={isStacked && labelRequirement ? '18.5x' : '10.5x'}\n        gap=\"2x\"\n        flex=\"1 1 auto\">\n        <Flex\n          direction={isStacked && labelRequirement ? 'column' : 'row'}\n          gap=\"2x\"\n          align=\"center\"\n          justify=\"center\"\n          flex=\"1 1 auto\">\n          {(isStacked || isIconOnly || (!labelRequirement && icon)) && (\n            <div class={tabBarItemIconClasses}>\n              {icon}\n              <span class={tabBarItemStackedBadgeClasses}>\n                {badge ? (\n                  <Badge size=\"xs\" variant=\"neutral\">\n                    {badge}\n                  </Badge>\n                ) : null}\n              </span>\n            </div>\n          )}\n          {((!isIconOnly && labelRequirement) ||\n            metadata ||\n            severityRequirement ||\n            removeIcon ||\n            (icon && labelRequirement && !isStacked && !isIconOnly)) && (\n            <Flex gap=\"2x\" align=\"center\" justify=\"center\">\n              {!isIconOnly && !isStacked && icon && labelRequirement && (\n                <span class={tabBarItemIconClasses}>{icon}</span>\n              )}\n              {!isIconOnly && labelRequirement && (\n                <Text size=\"md\" weight=\"semiBold\">\n                  {label}\n                </Text>\n              )}\n              {!isStacked && !isIconOnly && badge && labelRequirement && (\n                <Badge size=\"md\" variant=\"neutralSubtle\">\n                  {badge}\n                </Badge>\n              )}\n              {metadata && (\n                <span class={tabBarItemMetadataClasses}>\n                  <Text>{'( ' + metadata + ' )'}</Text>\n                </span>\n              )}\n              {severityRequirement && (\n                <span class={tabBarItemIconClasses}>{IconComponent(severity)}</span>\n              )}\n            </Flex>\n          )}\n        </Flex>\n        {removeIcon && <span class={removeClass}>{removeIcon}</span>}\n      </Flex>\n    </div>\n  );\n}\n","import { BaseTabBarItem, BaseTabBarItemProps } from './BaseTabBarItem';\n\nexport type TabBarItemProps<K extends string | number> = Omit<BaseTabBarItemProps<K>, 'removeIcon'>;\n\nexport function TabBarItem<K extends string | number>({\n  itemKey,\n  label,\n  icon,\n  badge,\n  metadata,\n  severity\n}: TabBarItemProps<K>) {\n  return (\n    <BaseTabBarItem\n      itemKey={itemKey}\n      label={label}\n      icon={icon}\n      badge={badge}\n      metadata={metadata}\n      severity={severity}\n    />\n  );\n}\n"],"names":["BaseTabBarItem","itemKey","label","icon","badge","metadata","severity","removeIcon","showFocusRingOverride","onSelect","selection","currentKey","showFocusRing","layout","display","size","isEdgeBottom","tabItemPrefix","useTabBarContext","isCurrent","ref","useRef","useEffect","current","scrollIntoView","behavior","block","inline","handlePress","useCallback","value","pressProps","usePress","isSelected","isStacked","isIconOnly","isTall","labelRequirement","undefined","severityRequirement","direction","useUser","makeFocusRingVisible","classes","styles","tabBarItemIcon","tabBarItemIconStacked","tabBarItemMetadata","tabBarItemStackedBadge","tabBarItemStackedBadgeRtl","tabBarItemRemoveIcon","useComponentTheme","TabBarItemRedwoodTheme","focusRing","edgeBottom","tabBarItem","classNames","tabBarItemIconClasses","tabBarItemMetadataClasses","tabBarItemStackedBadgeClasses","removeClass","flexDimensions","mergeInterpolations","Object","values","flexitemInterpolations","styleInterpolations","flex","_jsx","id","class","role","style","_jsxs","Flex","minWidth","minHeight","height","gap","align","justify","jsxs","children","Badge","variant","jsx","Text","weight","severityValue","ErrorS","SvgErrorS","color","WarningS","SvgWarningS","InformationS","SvgInformationS","SuccessS","SvgSuccessS","IconComponent"],"mappings":"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"}