{"version":3,"file":"SplitMenuButton-b1a720bd.js","sources":["../../src/UNSAFE_SplitMenuButton/SplitMenuButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ButtonLayout } from '../UNSAFE_ButtonLayout';\nimport { NavDownIcon } from '../PRIVATE_ThemedIcons/NavDownIcon';\nimport { Menu } from '../UNSAFE_Menu';\n\nimport { BaseButton, StylingOptions } from '../UNSAFE_BaseButton';\n\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport {\n  SplitMenuButtonStyles,\n  SplitMenuButtonVariantOptions\n} from './themes/SplitMenuButtonStyles.css';\nimport { SplitMenuButtonRedwoodTheme } from './themes/redwood/SplitMenuButtonTheme.css';\n\nimport { ComponentChildren } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useCallback, useState, useRef, useImperativeHandle } from 'preact/hooks';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLElement>, 'title'>;\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\nexport type Props = IntrinsicProps &\n  WidthInterpolationProps &\n  TestIdProps & {\n    /**\n     * children - One or more MenuItems\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * The label rendered on the action side of the button.  Used\n     * to identify which child MenuItem action is invoked.\n     */\n    label?: string;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     \n     */\n    variant?: 'outlined' | 'solid' | 'callToAction';\n\n    /**\n     * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void;\n  };\n\nconst menuButtonStyling = ['embedded', 'min', 'noBorderRadiusStart'] as StylingOptions[];\nconst menuButtonActiveStyling = [...menuButtonStyling, 'active'] as StylingOptions[];\n\nconst actionbuttonStyling = ['embedded', 'noBorderRadiusEnd'] as StylingOptions[];\nconst actionButtonActiveStyling = [...actionbuttonStyling, 'active'] as StylingOptions[];\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\n\nconst styleInterpolations = mergeInterpolations<DimensionProps>(interpolations);\n\n/**\n * A SplitMenuButton is a combined action and menu button.\n */\nexport const SplitMenuButton = forwardRef(\n  (\n    {\n      children,\n      label = '',\n      variant = 'outlined',\n      isDisabled = false,\n      size = 'md',\n      testId,\n      onAction,\n      ...props\n    }: Props,\n    ref?: ForwardedRef<HTMLSpanElement>\n  ) => {\n    const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false);\n    const [isActive, setIsActive] = useState<boolean>(false);\n    const { class: cls, ...styles } = styleInterpolations(props);\n\n    // SPACE or ENTER on root area invokes action, as does CLICK/TAP on LEFT SIDE ACTION AREA\n    // DOWN ARROW invokes menu, as does CLICK/TAP on RIGHT SIDE MENU AREA\n    const onKeyDown = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === ' ' || event.key === 'Enter') {\n          setIsActive(true);\n        } else if (event.key == 'ArrowDown') {\n          !isDisabled && setIsMenuOpen((menuOpen: boolean) => !menuOpen);\n          // Prevent page scroll for down arrow, user definitely wanted to show menu in this case.\n          // Don't prevent other keypress defaults, as user may want to hold SPACE down to scroll page.\n          event.preventDefault();\n        }\n      },\n      [isDisabled, setIsMenuOpen, setIsActive]\n    );\n\n    const onKeyUp = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === ' ' || event.key === 'Enter') {\n          !isDisabled && onAction && onAction();\n          setIsActive(false);\n        }\n      },\n      [isDisabled, onAction, setIsActive]\n    );\n\n    const onBlur = useCallback(() => {\n      setIsActive(false);\n    }, [setIsActive]);\n\n    const _ref = useRef<HTMLSpanElement>(null);\n    useImperativeHandle(ref!, () => _ref.current!, [_ref]);\n\n    const menuHandler = () => {\n      setIsMenuOpen(!isMenuOpen);\n    };\n\n    const handleClose = (e: any) => {\n      //Focus has to be set on the launcher when menu is dismissed or\n      //item is \"selected\"\n      if (e.reason === 'dismissed' || e.reason === 'itemAction') {\n        _ref.current?.focus();\n      }\n      setIsMenuOpen(false);\n    };\n\n    const { classes, styles: themeStyles } = useComponentTheme<\n      SplitMenuButtonVariantOptions,\n      SplitMenuButtonStyles\n    >(SplitMenuButtonRedwoodTheme, {\n      styleVariant: variant\n    });\n\n    const dividerStyles = classNames([\n      themeStyles.divider,\n      isDisabled && themeStyles.disabledDivider\n    ]);\n\n    const rootStyles = classNames([classes, cls]);\n    // Using Span for top button allows us to avoid :hover state rendering by\n    // taking advantage of :enabled not on spans\n    const rootButton = () => {\n      return (\n        <BaseButton\n          elementDetails={{ type: 'span' }}\n          ref={\n            _ref as ForwardedRef<HTMLButtonElement> &\n              ForwardedRef<HTMLAnchorElement> &\n              ForwardedRef<HTMLSpanElement>\n          }\n          isDisabled={isDisabled}\n          styling={['container', 'min']}\n          variant={variant}\n          size={size}\n          testId={testId}\n          aria-label={label}\n          aria-roledescription=\"split menu button, press down arrow to invoke menu\"\n          aria-expanded={isMenuOpen}>\n          <TabbableModeContext.Provider value={{ isTabbable: false }}>\n            <BaseButton\n              elementDetails={{ type: 'span', isFocusable: false }}\n              variant={variant}\n              styling={getActionButtonStyling(isActive)}\n              size={size}\n              isDisabled={isDisabled}\n              aria-hidden={true}\n              onAction={onAction}>\n              {label}\n            </BaseButton>\n            <div class={`${dividerStyles}`} />\n            <BaseButton\n              elementDetails={{ type: 'span', isFocusable: false }}\n              variant={variant}\n              styling={getMenuButtonStyling(isMenuOpen)}\n              size={size}\n              isDisabled={isDisabled}\n              aria-hidden={true}\n              onAction={menuHandler}>\n              <ButtonLayout\n                display=\"icons\"\n                startIcon={<NavDownIcon />}\n                size={size}\n                styling=\"embedded\"></ButtonLayout>\n            </BaseButton>\n          </TabbableModeContext.Provider>\n        </BaseButton>\n      );\n    };\n\n    if (isDisabled) {\n      return (\n        <span role=\"toolbar\" class={rootStyles} style={styles}>\n          {rootButton()}\n        </span>\n      );\n    } else {\n      /*TODO: Remove this hardcoded offsetValue so we have dropdown offset only set on one single place.\n        Could be done via menu props or having a dropdownMenu component. JET-60595*/\n\n      /*TODO: Once menu expose a prop to set min width we would need to calculate offset width of button\n       so we set the correct min width since dropdown menus are 200px but if triggered element width is\n       bigger should be that size. JET-60745 */\n      return (\n        <span\n          role=\"toolbar\"\n          class={rootStyles}\n          style={styles}\n          onKeyDown={!isDisabled && onKeyDown}\n          onKeyUp={onKeyUp}\n          onBlur={onBlur}>\n          {rootButton()}\n          <Menu anchorRef={_ref} isOpen={isMenuOpen} onClose={handleClose}>\n            {children}\n          </Menu>\n        </span>\n      );\n    }\n  }\n);\n\nfunction getMenuButtonStyling(isActive: boolean) {\n  return isActive ? menuButtonActiveStyling : menuButtonStyling;\n}\n\nfunction getActionButtonStyling(isActive: boolean) {\n  return isActive ? actionButtonActiveStyling : actionbuttonStyling;\n}\n\nSplitMenuButton.displayName = 'SplitMenuButton';\n"],"names":["menuButtonStyling","menuButtonActiveStyling","actionbuttonStyling","actionButtonActiveStyling","interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","SplitMenuButton","forwardRef","children","label","variant","isDisabled","size","testId","onAction","props","ref","isMenuOpen","setIsMenuOpen","useState","isActive","setIsActive","class","cls","styles","onKeyDown","useCallback","event","key","menuOpen","preventDefault","onKeyUp","onBlur","_ref","useRef","useImperativeHandle","current","menuHandler","handleClose","e","reason","focus","classes","themeStyles","useComponentTheme","SplitMenuButtonRedwoodTheme","styleVariant","dividerStyles","classNames","divider","disabledDivider","rootStyles","rootButton","_jsx","BaseButton","elementDetails","type","styling","_jsxs","jsxs","TabbableModeContext","Provider","value","isTabbable","isFocusable","getActionButtonStyling","jsx","getMenuButtonStyling","ButtonLayout","display","startIcon","NavDownIcon","SvgNavDown","role","style","Menu","anchorRef","isOpen","onClose","displayName"],"mappings":"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"}