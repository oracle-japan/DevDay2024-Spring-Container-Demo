{"version":3,"file":"UNSAFE_FormLayout.js","sources":["../../src/UNSAFE_FormLayout/FormLayout.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useFormContext, FormContext, FormContextProps } from '../hooks/UNSAFE_useFormContext';\nimport { styles } from './themes/FormLayoutStyles.css';\nimport { layoutLocalVars } from '../utils/UNSAFE_styles/Layout/LayoutStyles.css';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { layoutSpanStyles, LayoutColumns, LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\n\ntype Props = {\n  /**\n   * Specifies if the FormLayout will dynamically adjust its columns to match the container size based on\n   * defined container breakpoints.\n   */\n  columnBehavior?: 'responsive' | 'fixed';\n\n  /**\n   * The number of columns to display. In a 'responsive' layout, you will have the specified number of\n   * columns or fewer, depending on the defined container breakpoints.\n   */\n  columns?: LayoutColumns;\n\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'.\n   */\n  columnSpan?: LayoutColumnSpan;\n\n  /**\n   * The direction the children should be laid out, row first or column first.\n   */\n  direction?: 'row' | 'column';\n\n  /**\n   * Indicates if the form layout will use 100% of the container's width, and will ignore the theme's max column width.\n   */\n  isFullWidth?: boolean;\n\n  /**\n   * Indicates whether the form layout is readonly.\n   */\n  isReadonly?: FormContextProps['isReadonly'];\n\n  /**\n   * Specifies the label position.\n   */\n  labelEdge?: FormContextProps['labelEdge'];\n\n  /**\n   * Specifies the width of the start aligned label, ignored for top & inside aligned.\n   */\n  labelStartWidth?: FormContextProps['labelStartWidth'];\n\n  /**\n   * Specifies if start or top label text should wrap or truncate.\n   */\n  labelWrapping?: FormContextProps['labelWrapping'];\n\n  /**\n   * Specifies the density of the user assistance presentation.\n   */\n  userAssistanceDensity?: FormContextProps['userAssistanceDensity'];\n\n  children?: ComponentChildren;\n};\n\nexport const FormLayout = ({\n  columns = 1,\n  columnBehavior = 'responsive',\n  columnSpan = 1,\n  direction = 'row',\n  isFullWidth,\n  isReadonly: propIsReadonly,\n  labelEdge: propLabelEdge,\n  labelStartWidth: propLabelStartWidth,\n  labelWrapping: propLabelWrapping,\n  userAssistanceDensity: propUserAssistanceDensity,\n  children\n}: Props) => {\n  const {\n    isDisabled,\n    isFormLayout: formIsFormLayout,\n    isReadonly: isFormReadonly,\n    labelEdge: formLabelEdge,\n    labelStartWidth: formLabelStartWidth,\n    labelWrapping: formLabelWrapping,\n    textAlign,\n    userAssistanceDensity: formUserAssistanceDensity\n  } = useFormContext();\n  const isReadonly = propIsReadonly ?? isFormReadonly;\n  const labelEdge = propLabelEdge ?? formLabelEdge;\n  const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n  const labelWrapping = propLabelWrapping ?? formLabelWrapping;\n  // If we have the prop, pass it on, or if we are in a form layout, use the context value, otherwise default to 'efficient'\n  const userAssistanceDensity =\n    propUserAssistanceDensity ?? (formIsFormLayout ? formUserAssistanceDensity : 'efficient');\n\n  // We need to set the localVars.columnCount so that we can correctly set the max width to the current column count\n  const assignVarStyles = assignInlineVars({\n    [layoutLocalVars.columnCount]: `${columns}`\n  });\n  const { baseTheme, classes } = useComponentTheme(FormLayoutRedwoodTheme, {\n    columnBehavior,\n    direction\n  });\n\n  return (\n    <FormContext.Provider\n      value={{\n        isDisabled,\n        isFormLayout: true,\n        isReadonly,\n        labelEdge,\n        labelStartWidth,\n        labelWrapping,\n        textAlign,\n        userAssistanceDensity\n      }}>\n      <div\n        class={classNames([\n          baseTheme,\n          styles.rootWrapperStyle,\n          isFullWidth && styles.rootWrapperFullWidthStyle,\n          layoutSpanStyles.layoutSpanColumn[columnSpan]\n        ])}\n        style={assignVarStyles}>\n        <div class={classes}>{children}</div>\n      </div>\n    </FormContext.Provider>\n  );\n};\n"],"names":["columns","columnBehavior","columnSpan","direction","isFullWidth","isReadonly","propIsReadonly","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","labelWrapping","propLabelWrapping","userAssistanceDensity","propUserAssistanceDensity","children","isDisabled","isFormLayout","formIsFormLayout","isFormReadonly","formLabelEdge","formLabelStartWidth","formLabelWrapping","textAlign","formUserAssistanceDensity","useFormContext","assignVarStyles","assignInlineVars","layoutLocalVars","columnCount","baseTheme","classes","useComponentTheme","FormLayoutRedwoodTheme","_jsx","FormContext","Provider","value","jsx","class","classNames","styles","rootWrapperStyle","rootWrapperFullWidthStyle","layoutSpanStyles","layoutSpanColumn","style"],"mappings":"61BAyE0B,EACxBA,UAAU,EACVC,iBAAiB,aACjBC,aAAa,EACbC,YAAY,MACZC,cACAC,WAAYC,EACZC,UAAWC,EACXC,gBAAiBC,EACjBC,cAAeC,EACfC,sBAAuBC,EACvBC,eAEA,MAAMC,WACJA,EACAC,aAAcC,EACdb,WAAYc,EACZZ,UAAWa,EACXX,gBAAiBY,EACjBV,cAAeW,EAAiBC,UAChCA,EACAV,sBAAuBW,GACrBC,EAAAA,iBACEpB,EAAaC,GAAkBa,EAC/BZ,EAAYC,GAAiBY,EAC7BX,EAAkBC,GAAuBW,EACzCV,EAAgBC,GAAqBU,EAErCT,EACJC,IAA8BI,EAAmBM,EAA4B,aAGzEE,EAAkBC,EAAAA,iBAAiB,CACvC,CAACC,kBAAgBC,aAAc,GAAG7B,OAE9B8B,UAAEA,EAASC,QAAEA,GAAYC,EAAAA,kBAAkBC,EAAAA,uBAAwB,CACvEhC,iBACAE,cAGF,OACE+B,MAACC,EAAAA,YAAYC,SAAQ,CACnBC,MAAO,CACLrB,aACAC,cAAc,EACdZ,aACAE,YACAE,kBACAE,gBACAY,YACAV,yBACDE,SACDmB,EACEI,IAAA,MAAA,CAAAC,MAAOC,EAAAA,WAAW,CAChBV,EACAW,EAAAA,OAAOC,iBACPtC,GAAeqC,EAAMA,OAACE,0BACtBC,EAAgBA,iBAACC,iBAAiB3C,KAEpC4C,MAAOpB,WACPQ,EAAAA,IAAK,MAAA,CAAAK,MAAOR,WAAUhB,OAG1B"}