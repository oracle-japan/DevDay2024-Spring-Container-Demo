{"version":3,"file":"Theme-2c9e73ca.js","sources":["../../src/UNSAFE_Theme/Theme.ts"],"sourcesContent":["/**\n * The global theme's structure is defined here, where the theme associates the list of components\n * with their respective theme types. The theme is passed via the Environment context\n * and utilized by components using the `useComponentTheme` hook.\n */\n\nimport type { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport type { NestedKeyOf } from '../utils/UNSAFE_typeUtils';\nimport type { ColorScheme as TokenColorScheme } from '#Common/themes/generatedContract.tokens';\nimport type { Base } from '#Common/themes/manualContract.tokens';\n/* components will directly import themes for now, we will reintroduce the component themes into the global theme after 15.0 release\nimport { LabelTheme } from '../UNSAFE_Label/themes/LabelStyles.css';\nimport { ReadonlyTextFieldInputTheme } from '../UNSAFE_TextField/themes/ReadonlyTextFieldInputStyles.css';\nimport { ReadonlyTextFieldTheme } from '../UNSAFE_TextField/themes/ReadonlyTextFieldStyles.css';\nimport { TextFieldInputTheme } from '../UNSAFE_TextField/themes/TextFieldInputStyles.css';\nimport { TextFieldTheme } from '../UNSAFE_TextField/themes/TextFieldStyles.css';\nimport { UserAssistanceTheme } from '../UNSAFE_UserAssistance/themes/UserAssistanceStyles.css';\nimport { MessageBannerTheme } from '../UNSAFE_MessageBanner/themes/MessageBannerStyles.css';\nimport { ComponentMessageTheme } from '../UNSAFE_ComponentMessage/themes/ComponentMessageStyles.css';\nimport { MessageToastTheme } from '../UNSAFE_MessageToast/themes/MessageToastStyles.css';\nimport { FormLayoutTheme } from '../UNSAFE_TextField/themes/FormLayoutStyles.css';\nimport { CollapsibleTheme } from '../UNSAFE_Collapsible/themes/CollapsibleStyles.css';\nimport { DialogTheme } from '../UNSAFE_Dialog/themes/DialogStyles.css';\nimport { DrawerPopupTheme } from '../UNSAFE_DrawerPopup/themes/DrawerPopupStyles.css';\nimport { DrawerLayoutTheme } from '../UNSAFE_LayoutPopup/themes/DrawerLayoutStyles.css';\nimport { WindowOverlayTheme } from '../UNSAFE_WindowOverlay/themes/WindowOverlayStyles.css';\nimport { TooltipContentTheme } from '../hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css';\nimport { SkeletonTheme } from '../UNSAFE_Skeleton/themes/SkeletonStyles.css';\nimport { AvatarTheme } from '../UNSAFE_Avatar/themes/AvatarStyles.css';\nimport { BaseButtonTheme } from '../UNSAFE_BaseButton/themes/BaseButtonStyles.css';\nimport { ButtonLayoutTheme } from '../UNSAFE_ButtonLayout/themes/ButtonLayoutStyles.css';\nimport { SplitMenuButtonTheme } from '../UNSAFE_SplitMenuButton/themes/SplitMenuButtonStyles.css';\nimport { RadioTheme } from '../UNSAFE_RadioItem/themes/RadioStyles.css';\nimport { RadioIconTheme } from '../UNSAFE_RadioItem/themes/RadioIconStyles.css';\nimport { TrainTheme } from '../UNSAFE_Train/themes/TrainStyles.css';\nimport { IndexerTheme } from '../UNSAFE_Indexer/themes/IndexerStyles.css';\nimport { LinkTheme } from '../UNSAFE_Link/themes/LinkStyles.css';\nimport { GroupedListTheme } from '../UNSAFE_GroupedList/themes/GroupedListStyles.css';\nimport { TabBarItemTheme } from '../UNSAFE_TabBarItem/themes/TabBarItemStyles.css';\nimport { PopupTheme } from '../UNSAFE_Popup/themes/PopupStyles.css';\nimport { ProgressBarTheme } from '../UNSAFE_ProgressBar/themes/ProgressBarStyles.css';\nimport { ProgressCircleTheme } from '../UNSAFE_ProgressCircle/themes/ProgressCircleStyles.css';\nimport { FilePickerTheme } from '../UNSAFE_FilePicker/themes/FilePickerStyles.css';\nimport { MenuSeparatorTheme } from '../UNSAFE_Menu/themes/MenuSeparatorStyles.css';\nimport { MenuItemTheme } from '../UNSAFE_Menu/themes/MenuItemStyles.css';\nimport { NavigationListItemTheme } from '../UNSAFE_NavigationList/themes/NavigationListItemStyles.css';\nimport { BadgeTheme } from '../UNSAFE_Badge/themes/BadgeStyles.css';\nimport { RatingGaugeTheme } from '../UNSAFE_RatingGauge/themes/RatingGaugeStyles.css';\nimport { FloatingTheme } from '../UNSAFE_Floating/themes/FloatingStyles.css';\nimport { MeterBarTheme } from '../UNSAFE_MeterBar/themes/MeterBarStyles.css';\nimport { MeterCircleTheme } from '../UNSAFE_MeterCircle/themes/MeterCircleStyles.css';\n*/\n// types associated with environment variables related to theming\ntype ColorScheme = (typeof colorThemes)[number];\ntype Scale = 'sm' | 'md' | 'lg';\ntype Obj = Record<string, any>;\ntype RuntimeFn<V> = (options?: V) => string;\n\n// commonly used props related to theming\ntype ThemeModifiers = {\n  colorScheme: ColorScheme;\n  scale: Scale;\n  currentBgColor: ColorProps['backgroundColor'];\n};\n\ntype ComponentThemeType<Variants = Obj, Styles = Obj> = {\n  multiVariantStyles: RuntimeFn<any>;\n  variants?: Variants;\n  styles?: Styles;\n  baseTheme?: string;\n};\n\ntype VariantOptions<V extends object> = Partial<NestedKeyOf<V>>;\n\ntype Theme = {\n  name: string;\n  base: Base;\n  colorScheme: TokenColorScheme;\n  scale: Obj;\n};\n\n/* components will directly import themes for now, we will reintroduce the component themes into the global theme after 15.0 release\ntype Theme = {\n  name: string;\n  components: {\n    Avatar: AvatarTheme;\n    Badge: BadgeTheme;\n    BaseButton: BaseButtonTheme;\n    ButtonLayout: ButtonLayoutTheme;\n    Label: LabelTheme;\n    Link: LinkTheme;\n    ComponentMessage: ComponentMessageTheme;\n    MessageBanner: MessageBannerTheme;\n    MessageToast: MessageToastTheme;\n    FilePicker: FilePickerTheme;\n    FormLayout: FormLayoutTheme;\n    Popup: PopupTheme;\n    ProgressBar: ProgressBarTheme;\n    ProgressCircle: ProgressCircleTheme;\n    TextField: TextFieldTheme;\n    TextFieldInput: TextFieldInputTheme;\n    RadioItem: RadioTheme;\n    RadioIcon: RadioIconTheme;\n    RatingGauge: RatingGaugeTheme;\n    ReadonlyTextField: ReadonlyTextFieldTheme;\n    ReadonlyTextFieldInput: ReadonlyTextFieldInputTheme;\n    Skeleton: SkeletonTheme;\n    SplitMenuButton: SplitMenuButtonTheme;\n    UserAssistance: UserAssistanceTheme;\n    Collapsible: CollapsibleTheme;\n    Dialog: DialogTheme;\n    DrawerPopup: DrawerPopupTheme;\n    DrawerLayout: DrawerLayoutTheme;\n    WindowOverlay: WindowOverlayTheme;\n    TabBarItem: TabBarItemTheme;\n    TooltipContent: TooltipContentTheme;\n    Train: TrainTheme;\n    Indexer: IndexerTheme;\n    GroupedList: GroupedListTheme;\n    MenuSeparator: MenuSeparatorTheme;\n    MenuItem: MenuItemTheme;\n    MeterBar: MeterBarTheme;\n    MeterCircle: MeterCircleTheme;\n    NavigationListItem: NavigationListItemTheme;\n    Floating: FloatingTheme;\n    // TODO: Components to be converted to the theming system\n    // ButtonTheme,\n    // ChipTheme,\n    // CollectionTheme,\n    // ComponentMessageTheme,\n    // HeadingTheme,\n    // HighlightTextTheme,\n    // IconTheme,\n    // IconsTheme,\n    // InputPasswordTheme,\n    // InputTextTheme,\n    // LabelValueLayoutTheme,\n    // LayerTheme,\n    // PrefixSuffixTheme,\n    // SelectMultipleTheme,\n    // SkeletonTheme,\n    // TextAreaTheme,\n    // TextAreaAutosizeTheme,\n    // ThemedIconsTheme,\n    // ViewTheme,\n    // VirtualizedCollectionTheme\n  };\n  base: Obj;\n  colorScheme: Obj;\n  scale: Obj;\n  defaultProps: {\n    colorScheme?: ColorScheme;\n    scale?: Scale;\n  };\n};\n*/\n\ntype CompoundVariantStyles<T> = {\n  variants: Partial<T>;\n  style: string | object;\n}[];\n\nconst colorThemes = ['light', 'dark'] as const;\n\n// Constants for colorscheme classnames\n// These are needed to support applications using legacy code\nconst DARK_CLASS = 'oj-c-colorscheme-dark';\nconst LIGHT_CLASS = 'oj-c-colorscheme-light';\nconst INVERT_CLASS = 'oj-color-invert'; // legacy class name for compatibility\nconst COLORSCHEME_DEPENDENT_CLASS = 'oj-c-colorscheme-dependent'; // The dependent class name is used to force re-evaluation\n// of CSS variables that reference colorScheme token vars\n// Constants for scale classnames\nconst SCALE_SM_CLASS = 'oj-scale-sm'; // legacy class name for compatibility\n// We need to specify :root.oj-scale-sm in the selector due to how legacy switches scale\nconst SCALE_SM_SELECTORS = `.${SCALE_SM_CLASS}, :root.${SCALE_SM_CLASS}`;\nconst SCALE_MD_CLASS = 'oj-scale-md'; // legacy class name for compatibility\n// We need to specify :root.oj-scale-md in the selector due to how legacy switches scale\nconst SCALE_MD_SELECTORS = `.${SCALE_MD_CLASS}, :root.${SCALE_MD_CLASS}`;\nconst SCALE_LG_CLASS = 'oj-scale-lg'; // legacy class name for compatibility\nconst SCALE_LG_SELECTORS = `.${SCALE_LG_CLASS}`; // 'lg' scale only has a single selector.\nconst SCALE_DEFAULT_SELECTORS = ':root';\nconst SCALE_DEPENDENT_CLASS = 'oj-scale-dependent'; // The dependent class name is used to force re-evaluation of CSS variables\n// For legacy compatibility, we need to add :root.${SCALE_SM_CLASS} and :root${SACEL_MD_CLASS} so that the\n// :root vars that refer to scale vars will re-evaluate in legacy\nconst SCALE_DEPENDENT_SELECTORS = `.${SCALE_DEPENDENT_CLASS}, :root.${SCALE_SM_CLASS}, :root.${SCALE_MD_CLASS}`;\n\n// that reference scale token vars\n\nexport type {\n  Theme,\n  ComponentThemeType,\n  ColorScheme,\n  Scale,\n  ThemeModifiers,\n  CompoundVariantStyles,\n  VariantOptions\n};\n\nexport {\n  colorThemes,\n  DARK_CLASS,\n  LIGHT_CLASS,\n  INVERT_CLASS,\n  COLORSCHEME_DEPENDENT_CLASS,\n  SCALE_SM_CLASS,\n  SCALE_SM_SELECTORS,\n  SCALE_MD_CLASS,\n  SCALE_MD_SELECTORS,\n  SCALE_LG_CLASS,\n  SCALE_LG_SELECTORS,\n  SCALE_DEPENDENT_CLASS,\n  SCALE_DEPENDENT_SELECTORS,\n  SCALE_DEFAULT_SELECTORS\n};\n"],"names":["SCALE_SM_CLASS","SCALE_SM_SELECTORS","SCALE_MD_CLASS","SCALE_MD_SELECTORS","SCALE_LG_CLASS","SCALE_LG_SELECTORS","SCALE_DEPENDENT_CLASS","SCALE_DEPENDENT_SELECTORS"],"mappings":"6CAkKA,MAUMA,EAAiB,cAEjBC,EAAqB,IAAID,YAAyBA,IAClDE,EAAiB,cAEjBC,EAAqB,IAAID,YAAyBA,IAClDE,EAAiB,cACjBC,EAAqB,IAAID,IAEzBE,EAAwB,qBAGxBC,EAA4B,IAAID,YAAgCN,YAAyBE,kCAf3D,0CAHjB,uCAEE,gCADD,mDAaY,4MAlBZ,CAAC,QAAS"}