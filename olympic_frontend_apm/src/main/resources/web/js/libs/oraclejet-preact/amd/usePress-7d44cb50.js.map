{"version":3,"file":"usePress-7d44cb50.js","sources":["../../src/hooks/UNSAFE_usePress/usePress.ts"],"sourcesContent":["import { useCallback, useState, useRef } from 'preact/hooks';\n\nexport type PressOptions = {\n  isDisabled?: boolean;\n  isRepeat?: boolean;\n  repeatDelay?: number;\n  repeatInterval?: number;\n};\n\nconst DefaultSettings = {\n  isDisabled: false,\n  isRepeat: false,\n  repeatDelay: 500,\n  repeatInterval: 40\n};\n\n/**\n * Returns a click handler that can make a target element either clickable or keyboard pressable.\n *\n * @param onPressHandler function\n * @param isRepeat boolean\n * @param repeatInterval number number of ms between events for mouse and touch\n * @param repeatDelay number number of ms before repeat events initiates\n * @param isDisabled boolean\n * @returns\n */\n\nexport function usePress(\n  onPressHandler: (event: Event) => void,\n  settings: PressOptions = DefaultSettings\n): { pressProps: Record<string, any> } {\n  const mergedSettings = { ...DefaultSettings, ...settings };\n  const [isClickable, setIsClickable] = useState<boolean>(true);\n  const [isPressed, setIsPressed] = useState<boolean>(false);\n  const intervalID = useRef<ReturnType<typeof setInterval>>();\n  const isRepeating = useRef<boolean>(false);\n  const repeatHandler = (event: Event) => {\n    if (isRepeating.current) {\n      onPressHandler(event);\n    }\n    intervalID.current = setInterval(onPressHandler, mergedSettings.repeatInterval, event); // @HTMLUpdateOK\n  };\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        (event.code === 'Space' || event.code === 'Enter') &&\n        (mergedSettings.isRepeat || !event.repeat)\n      ) {\n        event.preventDefault();\n        setIsPressed(true);\n        if (mergedSettings.isRepeat) {\n          onPressHandler(event);\n        }\n      }\n    },\n    [mergedSettings.isRepeat, onPressHandler, setIsPressed]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.code === 'Space' || event.code === 'Enter') {\n        setIsPressed(false);\n        event.preventDefault();\n        if (!mergedSettings.isRepeat) {\n          onPressHandler(event);\n        }\n      }\n    },\n    [mergedSettings.isRepeat, onPressHandler, setIsPressed]\n  );\n\n  const onBlur = useCallback(() => {\n    setIsPressed(false);\n  }, [setIsPressed]);\n\n  const onPointerDown = useCallback(\n    (event: PointerEvent) => {\n      setIsClickable(false);\n      if (mergedSettings.isRepeat) {\n        isRepeating.current = true;\n        event.preventDefault();\n        onPressHandler(event);\n        intervalID.current = setTimeout(repeatHandler, mergedSettings.repeatDelay, event);\n      }\n    },\n    [mergedSettings, onPressHandler, intervalID, setIsClickable, repeatHandler]\n  );\n\n  const onPointerUp = useCallback(\n    (event: PointerEvent) => {\n      if (mergedSettings.isRepeat && intervalID.current) {\n        isRepeating.current = false;\n        clearInterval(intervalID.current);\n        intervalID.current = undefined;\n      } else {\n        onPressHandler(event);\n      }\n    },\n    [mergedSettings.isRepeat, intervalID, onPressHandler]\n  );\n\n  // Keep this to permit automated invocation of target via click event\n  // Need to ignore this for manual invocation whereby browser generates click\n  // pointerdown/pointerup/click -> ignore click\n  // keydown/keyup/click -> ignore click\n  // click without pointerup or keyup -> invoke\n  const onClick = useCallback(\n    (event: Event) => {\n      // There are use cases where pressable/clickable components (eg. Buttons) are nested inside of other\n      // components that also process bubbling click events (eg. Collapsible). In order to avoid conflicting\n      // processing of clicks (eg. in order to avoid the click both activating a Button as well as toggling the\n      // ancestor Collapsible), we stop propagation here. That way, only the child component handles the\n      // click and the ancestor component is oblivious to the fact that the click even occurred.\n      event.stopPropagation();\n      if (isClickable && !isPressed && intervalID.current) {\n        onPressHandler(event);\n      }\n      setIsClickable(true);\n    },\n    [setIsClickable, onPressHandler, isClickable, intervalID, isPressed]\n  );\n\n  const onClickSingle = useCallback(\n    (event: Event) => {\n      // See note above about why propagation is stopped: to prevent nested component bubbling clicks issue\n      event.stopPropagation();\n      if (!isPressed) {\n        onPressHandler(event);\n      }\n    },\n    [onPressHandler, isPressed]\n  );\n\n  const onPointerOut = useCallback(() => {\n    setIsClickable(true);\n    if (mergedSettings.isRepeat && intervalID.current) {\n      clearInterval(intervalID.current);\n    }\n  }, [mergedSettings.isRepeat, onPressHandler, intervalID, setIsClickable]);\n\n  const onPointerCancel = useCallback(() => {\n    setIsClickable(true);\n    if (mergedSettings.isRepeat && intervalID.current) {\n      clearInterval(intervalID.current);\n    }\n  }, [mergedSettings.isRepeat, onPressHandler, intervalID, setIsClickable]);\n\n  const onContextMenu = useCallback(\n    (event: PointerEvent) => {\n      setIsClickable(true);\n      if (mergedSettings.isRepeat) {\n        event.preventDefault();\n      }\n    },\n    [mergedSettings.isRepeat, onPressHandler, setIsClickable]\n  );\n\n  const pressProps = mergedSettings.isDisabled\n    ? {}\n    : mergedSettings.isRepeat\n    ? {\n        onPointerUp,\n        onPointerDown,\n        onPointerOut,\n        onPointerCancel,\n        onKeyDown,\n        onKeyUp,\n        onContextMenu,\n        onClick,\n        onBlur\n      }\n    : {\n        onKeyDown,\n        onKeyUp,\n        onBlur,\n        onClick: onClickSingle\n      };\n\n  return {\n    pressProps\n  };\n}\n"],"names":["DefaultSettings","isDisabled","isRepeat","repeatDelay","repeatInterval","onPressHandler","settings","mergedSettings","isClickable","setIsClickable","useState","isPressed","setIsPressed","intervalID","useRef","isRepeating","repeatHandler","event","current","setInterval","onKeyDown","useCallback","code","repeat","preventDefault","onKeyUp","onBlur","onPointerDown","setTimeout","onPointerUp","clearInterval","undefined","onClick","stopPropagation","onClickSingle","onPointerOut","onPointerCancel","onContextMenu","pressProps"],"mappings":"8DASA,MAAMA,EAAkB,CACtBC,YAAY,EACZC,UAAU,EACVC,YAAa,IACbC,eAAgB,wBAehBC,EACAC,EAAyBN,GAEzB,MAAMO,EAAiB,IAAKP,KAAoBM,IACzCE,EAAaC,GAAkBC,EAAQA,UAAU,IACjDC,EAAWC,GAAgBF,EAAQA,UAAU,GAC9CG,EAAaC,EAAAA,SACbC,EAAcD,UAAgB,GAC9BE,EAAiBC,IACjBF,EAAYG,SACdb,EAAeY,GAEjBJ,EAAWK,QAAUC,YAAYd,EAAgBE,EAAeH,eAAgBa,EAAM,EAGlFG,EAAYC,eACfJ,IAEmB,UAAfA,EAAMK,MAAmC,UAAfL,EAAMK,OAChCf,EAAeL,UAAae,EAAMM,SAEnCN,EAAMO,iBACNZ,GAAa,GACTL,EAAeL,UACjBG,EAAeY,GAElB,GAEH,CAACV,EAAeL,SAAUG,EAAgBO,IAGtCa,EAAUJ,eACbJ,IACoB,UAAfA,EAAMK,MAAmC,UAAfL,EAAMK,OAClCV,GAAa,GACbK,EAAMO,iBACDjB,EAAeL,UAClBG,EAAeY,GAElB,GAEH,CAACV,EAAeL,SAAUG,EAAgBO,IAGtCc,EAASL,EAAAA,aAAY,KACzBT,GAAa,EAAM,GAClB,CAACA,IAEEe,EAAgBN,eACnBJ,IACCR,GAAe,GACXF,EAAeL,WACjBa,EAAYG,SAAU,EACtBD,EAAMO,iBACNnB,EAAeY,GACfJ,EAAWK,QAAUU,WAAWZ,EAAeT,EAAeJ,YAAac,GAC5E,GAEH,CAACV,EAAgBF,EAAgBQ,EAAYJ,EAAgBO,IAGzDa,EAAcR,eACjBJ,IACKV,EAAeL,UAAYW,EAAWK,SACxCH,EAAYG,SAAU,EACtBY,cAAcjB,EAAWK,SACzBL,EAAWK,aAAUa,GAErB1B,EAAeY,EAChB,GAEH,CAACV,EAAeL,SAAUW,EAAYR,IAQlC2B,EAAUX,eACbJ,IAMCA,EAAMgB,kBACFzB,IAAgBG,GAAaE,EAAWK,SAC1Cb,EAAeY,GAEjBR,GAAe,EAAK,GAEtB,CAACA,EAAgBJ,EAAgBG,EAAaK,EAAYF,IAGtDuB,EAAgBb,eACnBJ,IAECA,EAAMgB,kBACDtB,GACHN,EAAeY,EAChB,GAEH,CAACZ,EAAgBM,IAGbwB,EAAed,EAAAA,aAAY,KAC/BZ,GAAe,GACXF,EAAeL,UAAYW,EAAWK,SACxCY,cAAcjB,EAAWK,QAC1B,GACA,CAACX,EAAeL,SAAUG,EAAgBQ,EAAYJ,IAEnD2B,EAAkBf,EAAAA,aAAY,KAClCZ,GAAe,GACXF,EAAeL,UAAYW,EAAWK,SACxCY,cAAcjB,EAAWK,QAC1B,GACA,CAACX,EAAeL,SAAUG,EAAgBQ,EAAYJ,IAEnD4B,EAAgBhB,eACnBJ,IACCR,GAAe,GACXF,EAAeL,UACjBe,EAAMO,gBACP,GAEH,CAACjB,EAAeL,SAAUG,EAAgBI,IAwB5C,MAAO,CACL6B,WAtBiB/B,EAAeN,WAC9B,CAAE,EACFM,EAAeL,SACf,CACE2B,cACAF,gBACAQ,eACAC,kBACAhB,YACAK,UACAY,gBACAL,UACAN,UAEF,CACEN,YACAK,UACAC,SACAM,QAASE,GAMjB"}