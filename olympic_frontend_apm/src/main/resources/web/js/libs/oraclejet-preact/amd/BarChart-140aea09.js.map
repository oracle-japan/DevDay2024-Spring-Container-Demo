{"version":3,"file":"BarChart-140aea09.js","sources":["../../src/UNSAFE_BarChart/utils/barSeriesUtils.ts","../../src/UNSAFE_BarChart/Bar.tsx","../../src/UNSAFE_BarChart/utils/barItemUtils.ts","../../src/UNSAFE_BarChart/utils/barLayoutUtils.ts","../../src/UNSAFE_BarChart/BarGroup.tsx","../../src/UNSAFE_BarChart/utils/barNavUtils.ts","../../src/UNSAFE_BarChart/BarChart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nconst IDEAL_DATA_ITEM_GAP = 2;\nconst DEFAULT_BAR_GAP_RATIO = 0.25;\n\n/**\n * The function that calculates the barWidth and offset from group center for each series.\n * @param groupWidth The width of the group.\n * @param noOfSeries The number of series present in the chart.\n * @param barGapRatio The ratio of gap to groupWidth.\n * @param dataItemGaps The ratio that determines the gap between the bars.\n */\nexport function getBarGapsInfo(\n  seriesIndex: number,\n  groupWidth: number,\n  barGapRatio: number,\n  numOfSeries: number,\n  dataItemGaps: number,\n  isStacked: boolean,\n  isRtl: boolean\n) {\n  const numSeries = isStacked ? 1 : numOfSeries;\n  const itemsGaps = IDEAL_DATA_ITEM_GAP * dataItemGaps;\n  const barWidth = (groupWidth * (1 - barGapRatio) - (numSeries - 1) * itemsGaps) / numSeries;\n  if (isStacked) {\n    return { barWidth, offset: (-1 * barWidth) / 2, itemsGaps };\n  }\n  const center = groupWidth / 2;\n  const seriesStart =\n    groupWidth * (barGapRatio / 2) + seriesIndex * (barWidth + IDEAL_DATA_ITEM_GAP * dataItemGaps);\n  const offset = isRtl ? center - seriesStart - barWidth : seriesStart - center;\n\n  return { barWidth, offset, itemsGaps };\n}\n\n/**\n * Returns the bar gap ratio.\n * @param isStacked Whether the chart is a stacked bar chart.\n * @param startIndex The viewport start index.\n * @param endIndex The viewport end index.\n */\nexport function getBarGapRatio(isStacked: boolean, startIndex: number, endIndex: number) {\n  const noOfGroups = endIndex - startIndex + 1;\n  // logic from legacy\n  return isStacked ? 0.37 + 0.26 / noOfGroups : DEFAULT_BAR_GAP_RATIO;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from '../UNSAFE_Chart/themes/ChartStyles.css';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype BarProps = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  isSelected: boolean;\n  isFocused: boolean;\n  isDimmed: boolean;\n  activeId?: string;\n  isDrillable: boolean;\n  fill: ColorProps['color'];\n  stroke?: ColorProps['color'];\n  strokeWidth?: number;\n  seriesIndex: number;\n  groupIndex: number;\n  'aria-label'?: string;\n};\n\nconst HOVERED_INNER_INSET = 1.5;\nconst SELECTED_INNER_INSET = 2.5;\n\n/**\n * The rect representing the bar item.\n * @param props\n * @returns\n */\nexport function Bar(props: BarProps) {\n  const isInteractive = props.isSelected || props.isFocused;\n\n  if (isInteractive) {\n    return <InteractiveBar {...props} />;\n  }\n\n  return (\n    <rect\n      x={props.x}\n      y={props.y}\n      data-oj-series-index={props.seriesIndex}\n      data-oj-group-index={props.groupIndex}\n      data-oj-object=\"bar\"\n      aria-label={props['aria-label']}\n      role={props['aria-label'] ? 'img' : undefined}\n      id={props.activeId}\n      style={{\n        width: props.width,\n        height: props.height,\n        fill: props.fill,\n        cursor: props.isDrillable ? 'pointer' : '',\n        stroke: props.stroke,\n        strokeWidth: props.strokeWidth\n      }}\n      class={classNames([\n        props.isDrillable ? styles.interactiveStyle : undefined,\n        props.isDimmed ? styles.dimmed : undefined\n      ])}\n    />\n  );\n}\n\n/**\n * The selected or hovered selected bar.\n */\nexport function InteractiveBar(props: BarProps) {\n  const { x, y, width, height, fill, isSelected, isFocused } = props;\n  const inset = isSelected ? SELECTED_INNER_INSET : HOVERED_INNER_INSET;\n  return (\n    <g\n      id={props.activeId}\n      data-oj-object=\"bar\"\n      data-oj-series-index={props.seriesIndex}\n      data-oj-group-index={props.groupIndex}\n      className={props.isDimmed ? styles.dimmed : ''}\n      role={props['aria-label'] ? 'img' : undefined}\n      aria-label={props['aria-label']}>\n      <rect\n        x={x}\n        y={y}\n        class={classNames([isSelected ? styles.selectedBorder : ''])}\n        style={{\n          width: width,\n          height: height,\n          fill: !isSelected && isFocused ? fill : undefined\n        }}></rect>\n      <rect\n        x={x + inset}\n        y={y + inset}\n        class={classNames([\n          styles.contrastBorder,\n          props.isDrillable ? styles.interactiveStyle : undefined\n        ])}\n        style={{\n          width: width - 2 * inset,\n          height: height - 2 * inset,\n          fill: fill\n        }}></rect>\n    </g>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ColorProps } from '../../utils/UNSAFE_interpolations/colors';\nimport { BarItem, BarSeries } from '../barChart.types';\n\nexport function getBarProps<K, D>(\n  item: BarItem<K>,\n  series: BarSeries<K, D>,\n  seriesColor: ColorProps['color']\n) {\n  const fill = item.color || series.color || seriesColor;\n  const stroke = item.borderColor || series.borderColor;\n  return { fill, stroke };\n}\n\n/**\n * Returns the coordinate of bar rect.\n * @param x1 The bar start coordinate in x axis.\n * @param x2 The bar end coordinate in x axis.\n * @param endCoord The coordinate of bar top in y axis.\n * @param baselineCoord The coordinate of bar base in y axis.\n * @param isHoriz Whether the chart is horizontal chart.\n * @returns\n */\nexport function getRectCoord(\n  x1: number,\n  x2: number,\n  endCoord: number,\n  baselineCoord: number,\n  isHoriz: boolean\n) {\n  let x: number;\n  let y: number;\n  let width: number;\n  let height: number;\n\n  let x_1 = x1;\n  let x_2 = x2;\n\n  // Bar width has to be at least 1px to prevent disappearing bars\n  let barWidth = x2 - x1;\n  if (barWidth < 1) {\n    x_1 = Math.floor(x_1);\n    x_2 = x_1 + 1;\n    barWidth = 1;\n  }\n\n  if (!isHoriz) {\n    x = x_1;\n    y = endCoord > baselineCoord ? baselineCoord : endCoord;\n    width = Math.abs(x_2 - x_1);\n    height = Math.abs(baselineCoord - endCoord);\n  } else {\n    y = x_1;\n    x = endCoord > baselineCoord ? baselineCoord : endCoord;\n    width = Math.abs(baselineCoord - endCoord);\n    height = Math.abs(x_2 - x_1);\n  }\n\n  return { x, y, width, height };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getBarGapsInfo } from './barSeriesUtils';\nimport { getRectCoord } from './barItemUtils';\nimport { BarSeries } from '../barChart.types';\nimport { ChartItem, Scale } from '../../UNSAFE_Chart';\n\n/**\n * Returns the base and end coordinate of the bar.\n * @param value The value of the bar item.\n * @param yScale The yscale.\n * @param isStacked Whether the bar chart is stacked or not.\n * @param isLog Whether the y axis is in log scale.\n * @param itemsGaps The gap between data item.\n * @param negCummulativeValue The negative cummulative value of the group.\n * @param posCummulativeValue The positive cummulative value of the group.\n * @returns\n */\nexport function getBaseAndEndCoord(\n  value: number,\n  yScale: Scale,\n  isStacked: boolean,\n  isLog: boolean,\n  itemsGaps: number,\n  negCummulativeValue: number,\n  posCummulativeValue: number\n) {\n  let baselineCoord;\n  let endCoord;\n  if (isStacked) {\n    baselineCoord = yScale.transform(value < 0 ? negCummulativeValue : posCummulativeValue);\n    negCummulativeValue += value < 0 ? value : 0;\n    posCummulativeValue += value > 0 ? value : 0;\n    endCoord = yScale.transform(value < 0 ? negCummulativeValue : posCummulativeValue);\n\n    baselineCoord += endCoord > baselineCoord ? itemsGaps : -itemsGaps;\n  } else {\n    baselineCoord = isLog ? yScale.range()[0] : yScale.transform(0);\n    endCoord = yScale.transform(value);\n  }\n\n  return { baselineCoord, endCoord };\n}\n\nexport function getBarPosition<K extends string | number, D extends ChartItem<K>>(\n  series: BarSeries<K, D>[],\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  xScale: Scale,\n  yScale: Scale,\n  hiddenIds: Set<number | string> | undefined,\n  dataItemGaps: number,\n  groupWidth: number,\n  barGapRatio: number,\n  isLog: boolean,\n  isStacked: boolean,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  return (seriesIndex: number, groupIndex: number) => {\n    const numOfSeries = series.length;\n    let posCumulativeValue = 0;\n    let negCumulativeValue = 0;\n    for (let index = 0; index < numOfSeries; index += 1) {\n      const item = getDataItem(index, groupIndex);\n      if (!item || hiddenIds?.has(item.id) || (isLog && item.value <= 0)) {\n        continue;\n      }\n      const groupCenter = xScale.transform(groupIndex);\n      const { barWidth, offset, itemsGaps } = getBarGapsInfo(\n        index,\n        groupWidth,\n        barGapRatio,\n        numOfSeries,\n        dataItemGaps,\n        isStacked,\n        isRtl\n      );\n      const x1 = groupCenter + offset;\n      const x2 = x1 + barWidth;\n\n      const { baselineCoord, endCoord } = getBaseAndEndCoord(\n        item.value,\n        yScale,\n        isStacked,\n        isLog,\n        itemsGaps,\n        negCumulativeValue,\n        posCumulativeValue\n      );\n      negCumulativeValue += item.value < 0 ? item.value : 0;\n      posCumulativeValue += item.value > 0 ? item.value : 0;\n\n      if (seriesIndex === index) {\n        return getRectCoord(x1, x2, endCoord, baselineCoord, isHoriz);\n      }\n    }\n    return;\n  };\n}\n\n/**\n * Returns the center coordinate of the bar item.\n * @param value\n * @param yScale\n * @param isStacked\n * @param isLog\n * @param dataItemGaps\n * @param negCummValue\n * @param posCummValue\n * @returns\n */\nexport function getBarCenterCoordinate(\n  value: number,\n  yScale: Scale,\n  isStacked: boolean,\n  isLog: boolean,\n  negCummValue: number,\n  posCummValue: number,\n  dataItemGaps: number\n) {\n  const { baselineCoord, endCoord } = getBaseAndEndCoord(\n    value,\n    yScale,\n    isStacked,\n    isLog,\n    dataItemGaps,\n    negCummValue,\n    posCummValue\n  );\n\n  return (baselineCoord + endCoord) / 2;\n}\n\nexport function getSeriesOffsetAndWidth(\n  groupWidth: number,\n  barGapRatio: number,\n  numOfSeries: number,\n  dataItemGaps: number,\n  isStacked: boolean,\n  isRtl: boolean\n) {\n  return (seriesIndex: number) => {\n    const { offset, barWidth } = getBarGapsInfo(\n      seriesIndex,\n      groupWidth,\n      barGapRatio,\n      numOfSeries,\n      dataItemGaps,\n      isStacked,\n      isRtl\n    );\n    return { offset, dataWidth: barWidth };\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { BarItem, BarSeries } from './barChart.types';\nimport { Bar } from './Bar';\nimport { getBarProps, getRectCoord } from './utils/barItemUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { getBarGapsInfo } from './utils/barSeriesUtils';\nimport { getBaseAndEndCoord } from './utils/barLayoutUtils';\nimport { Info, Scale } from '../UNSAFE_Chart';\nimport { Group } from '../UNSAFE_Axis/axis.types';\nimport { getGroupCenterCoord } from '../utils/PRIVATE_chartUtils/layoutUtils';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { getItemAriaLabel } from '../utils/PRIVATE_chartUtils/accUtils';\nimport { supportsMobileScreenReader } from '../utils/UNSAFE_visUtils';\n\ntype BarGroupProps<K, D> = {\n  yScale: Scale;\n  xScale: Scale;\n  colors?: ColorProps['color'][];\n  series: BarSeries<K, D>[];\n  group: Group;\n  timeAxisType?: 'enabled' | 'skipGaps' | 'mixedFrequency';\n  focusedItemInfo?: Info;\n  hoveredItemInfo?: Info;\n  isSelectionEnabled: boolean;\n  selectedIds?: Set<K>;\n  hiddenIds?: Set<K>;\n  highlightedIds?: Set<K>;\n  groupIndex: number;\n  barGapRatio: number;\n  dataItemGaps: number;\n  groupWidth: number;\n  isStacked: boolean;\n  activeId?: string;\n  orientation: 'horizontal' | 'vertical';\n  isDrillEnabled: boolean;\n  isLog: boolean;\n  isRtl: boolean;\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined;\n};\n\nexport function BarGroup<K extends string | number, D extends BarItem<K>>({\n  yScale,\n  xScale,\n  colors,\n  series,\n  groupIndex,\n  hiddenIds,\n  barGapRatio,\n  dataItemGaps,\n  groupWidth,\n  highlightedIds,\n  selectedIds,\n  orientation,\n  isLog,\n  activeId,\n  getDataItem,\n  isRtl,\n  isStacked,\n  isSelectionEnabled,\n  focusedItemInfo,\n  hoveredItemInfo,\n  isDrillEnabled,\n  group,\n  timeAxisType\n}: BarGroupProps<K, D>) {\n  const isHoriz = orientation === 'horizontal';\n  const items = [];\n  const numSeries = series.length;\n  let posCumulativeValue = isLog ? yScale.domain()[0] : 0;\n  let negCumulativeValue = 0;\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  for (let seriesIndex = 0; seriesIndex < numSeries; seriesIndex += 1) {\n    const item = getDataItem(seriesIndex, groupIndex);\n    if (!item || hiddenIds?.has(item.id) || (isLog && item.value <= 0)) {\n      continue;\n    }\n\n    const groupCenter = getGroupCenterCoord(group, groupIndex, xScale, item, timeAxisType);\n    const isFocused =\n      focusedItemInfo?.groupIndex === groupIndex &&\n      focusedItemInfo?.seriesIndex === seriesIndex &&\n      focusedItemInfo?.isFocusVisible;\n    const isHovered =\n      hoveredItemInfo?.groupIndex === groupIndex &&\n      hoveredItemInfo?.seriesIndex === seriesIndex &&\n      hoveredItemInfo?.isCurrent;\n    const isFocusVisible = !!isFocused || (!!isHovered && isSelectionEnabled);\n    const isActive = (isFocused && focusedItemInfo.isCurrent) || isHovered;\n    const isHighlighted = highlightedIds === undefined || highlightedIds.has(item.id);\n    const isSelected = !!selectedIds?.has(item.id!);\n    const isDrillable = item.drilling === 'on' || (item.drilling != 'off' && isDrillEnabled);\n\n    const { barWidth, offset, itemsGaps } = getBarGapsInfo(\n      seriesIndex,\n      groupWidth,\n      barGapRatio,\n      numSeries,\n      dataItemGaps,\n      isStacked,\n      isRtl\n    );\n    const x1 = groupCenter + offset;\n    const x2 = x1 + barWidth;\n\n    const { baselineCoord, endCoord } = getBaseAndEndCoord(\n      item.value,\n      yScale,\n      isStacked,\n      isLog,\n      itemsGaps,\n      negCumulativeValue,\n      posCumulativeValue\n    );\n\n    negCumulativeValue += item.value < 0 ? item.value : 0;\n    posCumulativeValue += item.value > 0 ? item.value : 0;\n\n    const barprops = getBarProps(item, series[seriesIndex], colors?.[seriesIndex]);\n    const rectParam = getRectCoord(x1, x2, endCoord, baselineCoord, isHoriz);\n    const ariaLabel =\n      supportsMobileScreenReader || isActive\n        ? getItemAriaLabel(\n            translations,\n            series[seriesIndex].name || series[seriesIndex].id.toString(),\n            group.name || group.id,\n            item.value,\n            isSelectionEnabled,\n            isSelected,\n            isDrillable,\n            item.accessibleLabel\n          )\n        : '';\n\n    items.push(\n      <Bar\n        {...rectParam}\n        {...barprops}\n        seriesIndex={seriesIndex}\n        groupIndex={groupIndex}\n        isFocused={isFocusVisible}\n        activeId={isActive ? activeId : ''}\n        aria-label={ariaLabel}\n        isDimmed={!isHighlighted}\n        isSelected={isSelected}\n        isDrillable={isDrillable}\n        key={`${groupIndex};${seriesIndex}`}\n      />\n    );\n  }\n  return <>{items}</>;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ChartItem, Info, ItemInfo } from '../../UNSAFE_Chart';\nimport {\n  getNextItemInGroup,\n  getNextItemInSeries,\n  getPrevItemInGroup,\n  getPrevItemInSeries\n} from '../../utils/PRIVATE_chartUtils/navUtils';\n\ntype isItemNavigableType = (seriesIndex: number, groupIndex: number) => boolean;\n\n/**\n * Get next item in unstacked bar chart.\n * @param info\n * @param viewportEndIndex\n * @param numSeries\n * @param isNavigable\n * @returns\n */\nexport function getNextItem(\n  info: ItemInfo,\n  viewportEndIndex: number,\n  numSeries: number,\n  isNavigable: isItemNavigableType\n): ItemInfo {\n  const nextItemInGroup = getNextItemInGroup(info, numSeries, isNavigable);\n  if (nextItemInGroup) return nextItemInGroup;\n\n  if (info.groupIndex < viewportEndIndex) {\n    let nextItem = { seriesIndex: 0, groupIndex: info.groupIndex + 1 };\n    if (isNavigable(nextItem.seriesIndex, nextItem.groupIndex)) return nextItem;\n    nextItem = getNextItem(nextItem, viewportEndIndex, numSeries, isNavigable);\n    if (nextItem) return nextItem;\n  }\n  return info;\n}\n\n/**\n * Get prev item in unstacked bar chart.\n * @param info\n * @param viewportStartIndex\n * @param numSeries\n * @param isNavigable\n * @returns\n */\nexport function getPreviousItem(\n  info: ItemInfo,\n  viewportStartIndex: number,\n  numSeries: number,\n  isNavigable: (seriesIndex: number, groupIndex: number) => boolean\n) {\n  const prevItemInGroup = getPrevItemInGroup(info, isNavigable);\n  if (prevItemInGroup) return prevItemInGroup;\n\n  if (info.groupIndex > viewportStartIndex) {\n    let prevItem = { groupIndex: info.groupIndex - 1, seriesIndex: numSeries - 1 };\n    if (isNavigable(prevItem.seriesIndex, prevItem.groupIndex)) return prevItem;\n    prevItem = getPreviousItem(prevItem, viewportStartIndex, numSeries, isNavigable);\n    if (prevItem) return prevItem;\n  }\n  return info;\n}\n\nexport function getBarChartNavUtil<K, D extends ChartItem<K>>(\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  numSeries: number,\n  viewportStartIndex: number,\n  viewportEndIndex: number,\n  isStacked: boolean,\n  isRtl: boolean\n) {\n  const isItemNavigable = (seriesIndex: number, groupIndex: number) => {\n    const barItem = getDataItem(seriesIndex, groupIndex);\n    return Boolean(barItem);\n  };\n\n  const getNextChartItem = (\n    itemInfo: Info,\n    arrow: 'ArrowLeft' | 'ArrowRight' | 'ArrowDown' | 'ArrowUp'\n  ): Info => {\n    if (!isStacked && (arrow === 'ArrowDown' || arrow === 'ArrowUp')) {\n      return itemInfo;\n    }\n    let newInfo: Info | undefined;\n    // TODO: this is just to keep typescript happy.\n    // figure out consistent typing while doing type cleanup.\n    const info = {\n      groupIndex: itemInfo.groupIndex!,\n      seriesIndex: itemInfo.seriesIndex!\n    };\n\n    if (info.groupIndex! < viewportStartIndex) {\n      info.groupIndex = viewportStartIndex;\n      return info;\n    } else if (info.groupIndex! > viewportEndIndex) {\n      info.groupIndex = viewportEndIndex;\n      return info;\n    }\n\n    if (isStacked) {\n      if (arrow === 'ArrowLeft') {\n        newInfo = isRtl\n          ? getNextItemInSeries(info, viewportEndIndex, isItemNavigable)\n          : getPrevItemInSeries(info, viewportStartIndex, isItemNavigable);\n      } else if (arrow === 'ArrowRight') {\n        newInfo = isRtl\n          ? getPrevItemInSeries(info, viewportStartIndex, isItemNavigable)\n          : getNextItemInSeries(info, viewportEndIndex, isItemNavigable);\n      } else if (arrow === 'ArrowDown') {\n        newInfo = getPrevItemInGroup(info, isItemNavigable);\n      } else {\n        newInfo = getNextItemInGroup(info, numSeries, isItemNavigable);\n      }\n    } else {\n      if (arrow === 'ArrowRight') {\n        newInfo = isRtl\n          ? getPreviousItem(info, viewportStartIndex, numSeries, isItemNavigable)\n          : getNextItem(info, viewportEndIndex, numSeries, isItemNavigable);\n      } else if (arrow === 'ArrowLeft') {\n        newInfo = isRtl\n          ? getNextItem(info, viewportEndIndex, numSeries, isItemNavigable)\n          : getPreviousItem(info, viewportStartIndex, numSeries, isItemNavigable);\n      }\n    }\n    return newInfo || info;\n  };\n\n  return getNextChartItem;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { BarChartProps, BarItem } from './barChart.types';\nimport { getBarGapRatio } from './utils/barSeriesUtils';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { BarGroup } from './BarGroup';\nimport { findNearestDataPoint } from '../utils/PRIVATE_chartUtils/layoutUtils';\nimport {\n  getBarCenterCoordinate,\n  getBarPosition,\n  getSeriesOffsetAndWidth\n} from './utils/barLayoutUtils';\nimport { getBarChartNavUtil } from './utils/barNavUtils';\nimport { Chart, Scale } from '../UNSAFE_Chart';\nimport { TimeAxisProps } from '../UNSAFE_Axis/axis.types';\nimport { getColorRamp } from '../utils/UNSAFE_visUtils';\n\n/* bar chart start and end axis offset */\nconst AXIS_OFFSET = 0.5;\n\n/**\n * A Bar chart displays information graphically using rectangular bars with heights or lengths proportional to the values that they represent, making relationships among the data easier to understand.\n */\nexport function BarChart<K extends string | number, D extends BarItem<K>>({\n  width = '100%',\n  height = '448px',\n  selectedIds = [],\n  hiddenIds = [],\n  highlightedIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  yAxis,\n  series,\n  groups,\n  isStacked = false,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataItemGaps = 0.5,\n  ...props\n}: BarChartProps<K, D>) {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const hiddenSet = new Set(hiddenIds);\n  const isHoriz = orientation === 'horizontal';\n  const selectedSet = new Set(selectedIds);\n  const highlightedSet = new Set(highlightedIds);\n  const getGapRatio = (startIndex: number, endIndex: number) => {\n    return getBarGapRatio(isStacked, startIndex, endIndex);\n  };\n  const getNextChartItemFunc = (startIndex: number, endIndex: number) => {\n    return getBarChartNavUtil(getDataItem, series.length, startIndex, endIndex, isStacked, isRtl);\n  };\n  const colors = getColorRamp();\n  const getDataItemPos = (xScale: Scale, yScale: Scale, groupWidth: number, gapRatio: number) => {\n    return getBarPosition(\n      series,\n      getDataItem,\n      xScale,\n      yScale,\n      hiddenSet,\n      dataItemGaps,\n      groupWidth,\n      gapRatio,\n      yAxis?.scale === 'log',\n      isStacked,\n      isRtl,\n      isHoriz\n    );\n  };\n\n  const findNearest = (xScale: Scale, yScale: Scale, groupWidth: number, gapRatio: number) => {\n    const getSeriesDataInfo = getSeriesOffsetAndWidth(\n      groupWidth,\n      gapRatio,\n      series.length,\n      dataItemGaps,\n      isStacked,\n      isRtl\n    );\n\n    return findNearestDataPoint(\n      series,\n      xScale,\n      yScale,\n      getDataItem,\n      isStacked,\n      getSeriesDataInfo,\n      getBarCenterCoordinate,\n      yAxis?.scale === 'log',\n      dataItemGaps,\n      hiddenSet\n    );\n  };\n\n  return (\n    <Chart\n      width={width}\n      height={height}\n      selectedIds={selectedIds}\n      hiddenIds={hiddenIds}\n      hideAndShowBehavior={hideAndShowBehavior}\n      orientation={orientation}\n      yAxis={yAxis}\n      series={series}\n      groups={groups}\n      isStacked={isStacked}\n      getDataItem={getDataItem}\n      selectionMode={selectionMode}\n      drilling={drilling}\n      renderGridLinesInFront={false}\n      findNearest={findNearest}\n      getDataItemPos={getDataItemPos}\n      getNavUtil={getNextChartItemFunc}\n      getGapRatio={getGapRatio}\n      isRtl={isRtl}\n      offset={AXIS_OFFSET}\n      {...props}>\n      {({\n        xStartIndex,\n        xEndIndex,\n        xScale,\n        yScale,\n        gapRatio,\n        activeId,\n        focusedItemInfo,\n        hoveredItemInfo,\n        groupWidth\n      }) => {\n        return (\n          <>\n            {groups.slice(xStartIndex, xEndIndex + 1).map((_, index) => (\n              <BarGroup\n                yScale={yScale}\n                xScale={xScale}\n                groupIndex={index + xStartIndex}\n                selectedIds={selectedSet}\n                hiddenIds={hiddenSet}\n                highlightedIds={highlightedIds ? highlightedSet : highlightedIds}\n                isDrillEnabled={drilling === 'on'}\n                series={series}\n                barGapRatio={gapRatio}\n                dataItemGaps={dataItemGaps}\n                isStacked={isStacked}\n                groupWidth={groupWidth}\n                group={groups[index]}\n                timeAxisType={(props.xAxis as TimeAxisProps)?.timeAxisType}\n                colors={colors}\n                activeId={activeId}\n                isLog={yAxis?.scale === 'log'}\n                orientation={orientation}\n                getDataItem={getDataItem}\n                isSelectionEnabled={selectionMode != 'none'}\n                isRtl={isRtl}\n                focusedItemInfo={focusedItemInfo}\n                hoveredItemInfo={hoveredItemInfo}\n              />\n            ))}\n          </>\n        );\n      }}\n    </Chart>\n  );\n}\n"],"names":["IDEAL_DATA_ITEM_GAP","DEFAULT_BAR_GAP_RATIO","getBarGapsInfo","seriesIndex","groupWidth","barGapRatio","numOfSeries","dataItemGaps","isStacked","isRtl","numSeries","itemsGaps","barWidth","offset","center","seriesStart","HOVERED_INNER_INSET","SELECTED_INNER_INSET","Bar","props","isSelected","isFocused","_jsx","jsx","InteractiveBar","x","y","groupIndex","role","undefined","id","activeId","style","width","height","fill","cursor","isDrillable","stroke","strokeWidth","class","classNames","styles","interactiveStyle","isDimmed","dimmed","inset","_jsxs","jsxs","className","children","selectedBorder","contrastBorder","getBarProps","item","series","seriesColor","color","borderColor","getRectCoord","x1","x2","endCoord","baselineCoord","isHoriz","x_1","x_2","Math","floor","abs","getBaseAndEndCoord","value","yScale","isLog","negCummulativeValue","posCummulativeValue","transform","range","getBarCenterCoordinate","negCummValue","posCummValue","BarGroup","xScale","colors","hiddenIds","highlightedIds","selectedIds","orientation","getDataItem","isSelectionEnabled","focusedItemInfo","hoveredItemInfo","isDrillEnabled","group","timeAxisType","items","length","posCumulativeValue","domain","negCumulativeValue","translations","useTranslationBundle","has","groupCenter","getGroupCenterCoord","isFocusVisible","isHovered","isCurrent","isActive","isHighlighted","drilling","barprops","rectParam","ariaLabel","supportsMobileScreenReader","getItemAriaLabel","name","toString","accessibleLabel","push","_createElement","createElement","key","_Fragment","Fragment","getNextItem","info","viewportEndIndex","isNavigable","nextItemInGroup","getNextItemInGroup","nextItem","getPreviousItem","viewportStartIndex","prevItemInGroup","getPrevItemInGroup","prevItem","hideAndShowBehavior","yAxis","groups","selectionMode","direction","useUser","hiddenSet","Set","selectedSet","highlightedSet","getColorRamp","Chart","renderGridLinesInFront","findNearest","gapRatio","getSeriesDataInfo","dataWidth","getSeriesOffsetAndWidth","findNearestDataPoint","scale","getDataItemPos","index","getBarPosition","getNavUtil","startIndex","endIndex","isItemNavigable","barItem","Boolean","itemInfo","arrow","newInfo","getNextItemInSeries","getPrevItemInSeries","getBarChartNavUtil","getGapRatio","getBarGapRatio","xStartIndex","xEndIndex","slice","map","_","xAxis"],"mappings":"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"}