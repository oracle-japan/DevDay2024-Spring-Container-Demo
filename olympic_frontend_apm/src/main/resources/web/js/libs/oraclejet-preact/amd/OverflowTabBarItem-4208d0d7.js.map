{"version":3,"file":"OverflowTabBarItem-4208d0d7.js","sources":["../../src/UNSAFE_RedwoodIcons/OverflowH/OverflowH.tsx","../../src/UNSAFE_TabBarCommon/OverflowTabBarItem.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\nconst SvgOverflowH = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <g fill=\"none\">\n      <path\n        d=\"M6 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm8 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm8 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0z\"\n        fill=\"currentcolor\"\n      />\n    </g>\n  </Icon>\n);\nexport { SvgOverflowH as OverflowH };\n","import { ComponentChild, ComponentProps, RefObject } from 'preact';\nimport { useCallback, useRef, useEffect } from 'preact/hooks';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport {\n  NavigationListItem,\n  NavigationList,\n  RemovableNavigationListItem\n} from '../UNSAFE_NavigationList';\nimport { OverflowH } from '../UNSAFE_RedwoodIcons/OverflowH';\nimport { useTabBarContext } from './useTabBarContext';\nimport { Dropdown } from '../UNSAFE_Dropdown';\nimport { Sheet } from '../UNSAFE_Sheet';\nimport { BaseTabBarItem } from './BaseTabBarItem';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TabBarItemVariantOptions } from './themes/TabBarItemStyles.css';\nimport { TabBarItemRedwoodTheme } from './themes/redwood/TabBarItemTheme';\n\ntype FocusableHandle = {\n  focus: () => void;\n};\n\nexport type OverflowSelectionDetail<K> = {\n  value: K;\n};\n\nexport type CloseDetail = {\n  /**\n   * dismissed represents dismissing the DropDown\n   */\n  reason: 'dismissed' | 'itemAction' | 'outsideMousedown';\n};\n\ntype Item<K extends string | number> = Omit<\n  ComponentProps<typeof NavigationListItem<K>>,\n  'testId'\n> & {\n  isRemovable?: boolean;\n};\n\nexport type OverflowTabBarItemProps<K extends string | number> = {\n  /**\n   * Key of the TabBarItem\n   */\n  overflowItemKey: K;\n  /**\n   * Whether to open the popup\n   */\n  isOpen: boolean;\n  /**\n   * Property that triggers a callback when DropDown is supposed to be closed.\n   */\n  onClose?: (detail: CloseDetail) => void;\n  /**\n   * The icon of the OverflowTabBarItem\n   */\n  icon?: ComponentChild;\n  /**\n   * The content to be rendered inside the Badge component.\n   */\n  badge?: string;\n  /**\n   * An array of data used by NavigationList to render individual overflow items.\n   */\n  overflowItems?: Item<K>[];\n};\n\n/**\n * An OverflowTabBarItem renders TabBarItems in a device appropriate popup. OverflowTabBarItem is used internally in an OverflowTabBar.\n */\n\nexport function OverflowTabBarItem<K extends string | number>({\n  overflowItemKey,\n  icon,\n  badge,\n  overflowItems,\n  isOpen,\n  onClose\n}: OverflowTabBarItemProps<K>) {\n  const { selection, showFocusRing, isEdgeBottom, onSelect, onRemove, layout } = useTabBarContext();\n\n  const isPointerSelection = useRef<boolean>(false);\n\n  const overflowTabBarItemRef = useRef<HTMLDivElement>(null);\n  const navigationListRef = useRef() as RefObject<FocusableHandle>;\n\n  const handleSelectionChange = useCallback<\n    Required<ComponentProps<typeof NavigationList>>['onSelectionChange']\n  >(\n    (detail: { value: string | number; reason?: 'pointer' | 'keyboard' }) => {\n      if (detail.reason === 'pointer') {\n        isPointerSelection.current = true;\n      }\n      onSelect?.({ value: detail.value });\n      onClose?.({ reason: 'itemAction' });\n    },\n    [onSelect, onClose]\n  );\n\n  const handleDropdownClose = useCallback(\n    (e: CloseDetail) => {\n      onClose?.({ reason: e.reason });\n    },\n    [onClose]\n  );\n\n  const handleSheetClose = useCallback(() => {\n    onClose?.({ reason: 'dismissed' });\n  }, [onClose]);\n\n  //When NavigationList steals focus the app resets it. Not always would it be reset to\n  //parent of OverflowTabBarItem. Though currentKey would be correct, but focusRing would would not be visible\n  //Hence we check for isPointerSelection.current\n\n  const focusRingRequirement = showFocusRing && !isPointerSelection.current && !getIsMobile();\n\n  //The focus should be on NavigationList only when it is open using keyboard\n  useEffect(() => {\n    if (isOpen && navigationListRef.current && focusRingRequirement) {\n      navigationListRef.current.focus();\n    }\n    isPointerSelection.current = false;\n  }, [isOpen, focusRingRequirement]);\n\n  const overflowContainsKey = (searchKey: K) => {\n    return overflowItems?.find((item) => item.itemKey === searchKey);\n  };\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const isSelected = selection !== undefined && overflowContainsKey(selection as K);\n\n  const { classes } = useComponentTheme<TabBarItemVariantOptions>(TabBarItemRedwoodTheme, {\n    selection: isSelected ? 'isSelected' : 'notSelected',\n    edgeBottom: isEdgeBottom ? 'isBottom' : 'notBottom'\n  });\n\n  const overflowTabBarItem = classNames([classes]);\n\n  //instead of specifying flex: '1 0 auto' in cssProps var\n  const styleInterpolations = mergeInterpolations<FlexitemProps>([\n    ...Object.values(flexitemInterpolations)\n  ]);\n  const flexDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto'\n  });\n\n  const getNavigationList = useCallback(() => {\n    return (\n      <NavigationList\n        ref={navigationListRef}\n        selection={selection}\n        onSelectionChange={handleSelectionChange}\n        onRemove={onRemove}>\n        {overflowItems?.map((item) =>\n          item.isRemovable ? (\n            <RemovableNavigationListItem\n              itemKey={item.itemKey}\n              label={item.label}\n              badge={item.badge}\n              metadata={item.metadata}\n              severity={item.severity}\n            />\n          ) : (\n            <NavigationListItem\n              itemKey={item.itemKey}\n              label={item.label}\n              badge={item.badge}\n              metadata={item.metadata}\n              severity={item.severity}\n            />\n          )\n        )}\n      </NavigationList>\n    );\n  }, [overflowItems, selection, handleSelectionChange, onRemove]);\n\n  return (\n    <>\n      {overflowItems && overflowItems.length > 0 && (\n        <div ref={overflowTabBarItemRef} class={overflowTabBarItem} style={flexDimensions}>\n          <BaseTabBarItem\n            itemKey={overflowItemKey}\n            label=\" \"\n            icon={icon ? icon : <OverflowH accessibleLabel={translations.overflowItemLabel()} />}\n            badge={badge}\n            showFocusRingOverride={focusRingRequirement}\n          />\n        </div>\n      )}\n      {getIsMobile() ? (\n        <Sheet isOpen={isOpen} onClose={handleSheetClose}>\n          {getNavigationList()}\n        </Sheet>\n      ) : (\n        <Dropdown\n          isOpen={isOpen}\n          onClose={handleDropdownClose}\n          placement={isEdgeBottom ? 'top-end' : 'bottom-end'}\n          anchorRef={overflowTabBarItemRef}>\n          {getNavigationList()}\n        </Dropdown>\n      )}\n    </>\n  );\n}\n\nconst getIsMobile = () => {\n  const { deviceType } = getClientHints();\n  return deviceType === 'phone';\n};\n"],"names":["SvgOverflowH","props","_jsx","jsx","Icon","viewBox","children","fill","d","getIsMobile","deviceType","getClientHints","overflowItemKey","icon","badge","overflowItems","isOpen","onClose","selection","showFocusRing","isEdgeBottom","onSelect","onRemove","layout","useTabBarContext","isPointerSelection","useRef","overflowTabBarItemRef","navigationListRef","handleSelectionChange","useCallback","detail","reason","current","value","handleDropdownClose","e","handleSheetClose","focusRingRequirement","useEffect","focus","translations","useTranslationBundle","isSelected","undefined","searchKey","find","item","itemKey","classes","useComponentTheme","TabBarItemRedwoodTheme","edgeBottom","overflowTabBarItem","classNames","flexDimensions","mergeInterpolations","Object","values","flexitemInterpolations","styleInterpolations","flex","getNavigationList","NavigationList","ref","onSelectionChange","map","isRemovable","RemovableNavigationListItem","label","metadata","severity","NavigationListItem","_jsxs","_Fragment","length","class","style","BaseTabBarItem","OverflowH","accessibleLabel","overflowItemLabel","showFocusRingOverride","Sheet","Dropdown","placement","anchorRef"],"mappings":"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"}