{"version":3,"file":"listViewSelectionTests-3a9899c6.js","sources":["../../src/PRIVATE_List/__tests__/shared/listViewTests.tsx","../../src/PRIVATE_List/__tests__/shared/listViewSelectionTests.tsx"],"sourcesContent":["import { fireEvent, render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { ComponentProps, VNode } from 'preact';\n\nimport {\n  CurrentItemVariant,\n  ItemActionDetail,\n  Metadata,\n  SelectionMode\n} from '../../../UNSAFE_Collection';\nimport { RootEnvironmentProvider } from '../../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../../UNSAFE_Environment';\nimport { Gridlines, ListView } from '../../../UNSAFE_ListView';\nimport { Keys } from '../../../utils/UNSAFE_keys';\nimport { matchTranslationBundle } from '../../../utils/UNSAFE_matchTranslationBundle';\nimport { CollectionGestureContext } from '../../../hooks/PRIVATE_useCollectionGestureContext';\nimport { MenuItem } from '../../../UNSAFE_Menu';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getContents, getItems, getRoot } from './testHelpers';\nimport {\n  getAllMenuItemsByRole,\n  getMenuItemByRole,\n  getLabel\n} from '../../../UNSAFE_Menu/__tests__/menuTestsUtils';\n//TODO: JET-63873\nfunction getSparkle(grid: HTMLElement) {\n  return grid.querySelector('.oj-collection-sparkle')?.firstElementChild as HTMLElement;\n}\nexport type Props<K, D> = {\n  currentItemVariant?: CurrentItemVariant;\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n  gridlines?: Gridlines;\n  initialKey?: K;\n  onItemAction?: (detail: ItemActionDetail<K, D>) => void;\n  selectedKeys?: Keys<K>;\n  selectionMode?: SelectionMode;\n  onClick?: () => void;\n  contextMenuRenderer?: ComponentProps<typeof ListView>['contextMenuRenderer'];\n};\n\ntype TestComponentProps<K extends string | number, D> = (props: Props<K, D>) => VNode;\n\nexport const testRender = (TestComponent: TestComponentProps<any, any>) => {\n  it('initial render', async function () {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems();\n    expect(items.length).eq(25);\n  });\n\n  // skip this test in jest, only run it in karma mocha\n  if (typeof jest == typeof undefined) {\n    it('initial render with sparkle', async () => {\n      const data = populateData(100) as Employee<string>[];\n      let dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n        (data) => {\n          return { data: data, metadata: { key: data.id } };\n        }\n      );\n\n      // add suggestions\n      dataMetadata[3].metadata.suggestion = { enable: true };\n      dataMetadata[7].metadata.suggestion = { enable: true };\n      dataMetadata[9].metadata.suggestion = { enable: true };\n\n      const suggestions = dataMetadata.filter((d) => d.metadata.suggestion);\n      dataMetadata = dataMetadata.filter((d) => !d.metadata.suggestion);\n      dataMetadata.unshift(...suggestions);\n\n      render(<TestComponent data={dataMetadata}></TestComponent>);\n      const grid = await getRoot();\n      const sparkle = getSparkle(grid);\n      expect(sparkle !== undefined).eq(true);\n\n      const items = await getItems();\n      expect(items?.length).eq(25);\n      expect(items[0].dataset['ojSuggestion']).eq('true');\n      expect(items[1].dataset['ojSuggestion']).eq('true');\n      expect(items[2].dataset['ojSuggestion']).eq('true');\n\n      const sparkleHeight = items[0].offsetHeight + items[1].offsetHeight + items[2].offsetHeight;\n      expect(sparkleHeight).eq(sparkle.offsetHeight);\n    });\n  }\n};\n\nexport const testContextMenu = (TestComponent: TestComponentProps<any, any>) => {\n  it('ContextMenu on right click', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    render(\n      <RootEnvironmentProvider>\n        <TestComponent\n          data={dataMetadata}\n          contextMenuRenderer={({ key }) => {\n            return (\n              <>\n                <MenuItem label={`MenuItem${key}`}></MenuItem>\n                <MenuItem label=\"MenuItem2\"></MenuItem>\n                <MenuItem label=\"MenuItem3\"></MenuItem>\n              </>\n            );\n          }}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const items = await getContents();\n    const grid = await getRoot();\n    const firstItem = items[0];\n\n    fireEvent.contextMenu(firstItem, {\n      clientX: 50,\n      clientY: 50,\n      currentTarget: grid\n    });\n\n    const menu = getMenuItemByRole('menu');\n    const menuItems = getAllMenuItemsByRole('menuitem');\n    //With this we check context menu context was set correctly\n    const menuItemGotByLabel = getLabel('MenuItemi0');\n\n    expect(menu).not.null;\n    expect(menuItems.length).equals(3);\n    expect(menuItemGotByLabel).not.null;\n  });\n\n  it('ContextMenu on Shift-F10', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    render(\n      <RootEnvironmentProvider>\n        <TestComponent\n          data={dataMetadata}\n          contextMenuRenderer={({ key }) => {\n            return (\n              <>\n                <MenuItem label={`MenuItem${key}`}></MenuItem>\n                <MenuItem label=\"MenuItem2\"></MenuItem>\n                <MenuItem label=\"MenuItem3\"></MenuItem>\n              </>\n            );\n          }}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot();\n    const items = await getContents();\n    const firstItem = items[0];\n\n    //We do the necessary to have firstItem as current item\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(firstItem.id);\n\n    fireEvent.keyDown(grid, { key: 'F10', shiftKey: true });\n\n    const menu = getMenuItemByRole('menu');\n    const menuItems = getAllMenuItemsByRole('menuitem');\n    //With this we check context menu context was set correctly\n    const menuItemGotByLabel = getLabel('MenuItemi0');\n\n    expect(menu).not.null;\n    expect(menuItems.length).equals(3);\n    expect(menuItemGotByLabel).not.null;\n  });\n};\n\nexport const testAria = (TestComponent: TestComponentProps<any, any>) => {\n  it('aria structure and properties (select-none)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq(null);\n\n    const items = await getItems();\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents();\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq(null);\n  });\n\n  it('aria structure and properties (single-select)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata} selectionMode=\"single\"></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq('false');\n\n    const items = await getItems();\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents();\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('aria structure and properties (multi-select)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq('true');\n\n    const items = await getItems();\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents();\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq('false');\n  });\n};\n\nexport const testKeys = (TestComponent: TestComponentProps<any, any>) => {\n  it('supports currentKey logic with numeric key', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents();\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n\n  it('supports currentKey logic with string key', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents();\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n\n  it('checking key type - string key', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems();\n    expect((items[0] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[1] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[2] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n  });\n\n  it('checking key type - numeric key', async () => {\n    const data = populateData(3, true) as Employee<number>[];\n    const dataMetadata: { data: Employee<number>; metadata: Metadata<number> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems();\n    expect((items[0] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[1] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[2] as HTMLElement).dataset['ojKeyType']).eq('number');\n  });\n};\n\nexport const testGridlines = (TestComponent: TestComponentProps<any, any>) => {\n  const isTopGridlineVisible = (item: HTMLElement) => {\n    const className = item.className;\n    return className.indexOf('gridlineTop_visible') > 0;\n  };\n\n  const isBottomGridlineVisible = (item: HTMLElement) => {\n    const className = item.className;\n    return className.indexOf('gridlineBottom_visible') > 0;\n  };\n\n  const isGridlineHidden = (item: HTMLElement) => {\n    return !isTopGridlineVisible(item) && !isBottomGridlineVisible(item);\n  };\n\n  it('gridlines - gridlines are hidden', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems();\n    expect(isGridlineHidden(items[0])).to.be.true;\n    expect(isGridlineHidden(items[1])).to.be.true;\n    expect(isGridlineHidden(items[2])).to.be.true;\n  });\n\n  it('gridlines - bottom gridlines are visible', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visible = { item: 'visible' as const, bottom: 'visible' as const };\n    render(<TestComponent data={dataMetadata} gridlines={visible}></TestComponent>);\n    const items = await getItems();\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.true;\n  });\n\n  it('gridlines - bottom gridlines are visible except for the last list item', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleExceptLast = { item: 'visible' as const };\n    render(<TestComponent data={dataMetadata} gridlines={visibleExceptLast}></TestComponent>);\n    const items = await getItems();\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.false;\n  });\n\n  it('gridlines - bottom gridlines are visible; The top gridlines of the first list item is visible', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleWithFirst = {\n      item: 'visible' as const,\n      top: 'visible' as const,\n      bottom: 'visible' as const\n    };\n    render(<TestComponent data={dataMetadata} gridlines={visibleWithFirst}></TestComponent>);\n    const items = await getItems();\n    expect(isTopGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.true;\n  });\n\n  it('gridlines - bottom gridlines are visible except for the last list item. The top gridlines of the first list item is visible.', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleWithFirstButNotLast = { item: 'visible' as const, top: 'visible' as const };\n    render(\n      <TestComponent data={dataMetadata} gridlines={visibleWithFirstButNotLast}></TestComponent>\n    );\n    const items = await getItems();\n    expect(isTopGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.false;\n  });\n};\n\nexport const testItemAction = (TestComponent: TestComponentProps<any, any>) => {\n  const isMetadataEqual = (metadata1: Metadata<any>, metadata2: Metadata<any>) => {\n    return metadata1.key === metadata2.key;\n  };\n\n  const isFocusHighlight = (item: HTMLElement) => {\n    const className = item.className;\n    return (\n      className.indexOf('focusHighlight_isFocusHighlight') > 0 ||\n      className.indexOf('MultiVariantStyles_compound') > 0\n    );\n  };\n\n  it('ItemAction - test click on item', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 0) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[2].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      }\n      count++;\n    };\n    render(<TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>);\n    const items = await getItems('row');\n    fireEvent.click(items[1]);\n    fireEvent.click(items[1]);\n    fireEvent.click(items[2]);\n    expect(count).eq(3);\n  });\n\n  it('ItemAction - test press enter on item', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 3) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[2].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      }\n      count++;\n    };\n    render(<TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>);\n    const grid = await getRoot();\n    const items = await getItems('row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: 'Enter' });\n    fireEvent.keyDown(items[1], { key: 'Enter' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[2], { key: 'Enter' });\n    expect(count).eq(4);\n  });\n\n  it('ItemAction - test press spacebar on item (Context value is embedded)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 3) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[2].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      }\n      count++;\n    };\n    render(\n      <CollectionGestureContext.Provider value={'embedded'}>\n        <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n      </CollectionGestureContext.Provider>\n    );\n    const grid = await getRoot();\n    const items = await getItems('row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[2], { key: ' ' });\n    expect(count).eq(4);\n  });\n\n  it('ItemAction - test press spacebar on item (Context value is default)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 3) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[2].metadata);\n      }\n      count++;\n    };\n    render(\n      <CollectionGestureContext.Provider value={'default'}>\n        <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n      </CollectionGestureContext.Provider>\n    );\n    const grid = await getRoot();\n    const items = await getItems('row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    expect(count).eq(1);\n  });\n\n  it('currentItemVariant - highlight', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: {\n      data: Employee<string>;\n      metadata: Metadata<string>;\n    }[] = data.map((data) => {\n      return { data: data, metadata: { key: data.id } };\n    });\n    render(\n      <TestComponent\n        data={dataMetadata}\n        initialKey={dataMetadata[1].metadata.key}\n        currentItemVariant=\"highlight\"></TestComponent>\n    );\n    const items = await getItems();\n    expect(isFocusHighlight(items[0])).to.be.false;\n\n    fireEvent.click(items[0]);\n    expect(isFocusHighlight(items[0])).to.be.true;\n  });\n\n  it('currentItemVariant - none', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: {\n      data: Employee<string>;\n      metadata: Metadata<string>;\n    }[] = data.map((data) => {\n      return { data: data, metadata: { key: data.id } };\n    });\n    render(\n      <TestComponent\n        data={dataMetadata}\n        initialKey={dataMetadata[1].metadata.key}\n        currentItemVariant=\"none\"></TestComponent>\n    );\n    const items = await getItems();\n    expect(isFocusHighlight(items[0])).to.be.false;\n\n    fireEvent.click(items[0]);\n    expect(isFocusHighlight(items[0])).to.be.false;\n  });\n};\n\nexport const testNavigation = (TestComponent: TestComponentProps<any, any>) => {\n  it('arrow keys', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot();\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents();\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[2].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[2].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n};\n","import { fireEvent, render, waitFor } from '@testing-library/preact';\nimport userEvent from '@testing-library/user-event';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport { Metadata, SelectionMode } from '../../../UNSAFE_Collection';\nimport { RootEnvironmentProvider } from '../../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../../UNSAFE_Environment';\nimport { Gridlines } from '../../../UNSAFE_ListView';\nimport { Keys } from '../../../utils/UNSAFE_keys';\nimport { matchTranslationBundle } from '../../../utils/UNSAFE_matchTranslationBundle';\nimport { CollectionGestureContext } from '../../../hooks/PRIVATE_useCollectionGestureContext';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getContents, getRoot, mouseCheckboxSelection, mouseItemSelection } from './testHelpers';\n\ntype Props<K> = {\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n  selectedKeys?: Keys<K>;\n  selectionMode?: SelectionMode;\n  gridlines?: Gridlines;\n  onClick?: () => void;\n};\n\ntype TestComponentProps<K extends string | number> = (props: Props<K>) => VNode;\n\nexport const testSelection = (TestComponent: TestComponentProps<any>) => {\n  it('select single - numeric key', async () => {\n    const data = populateData(10, true) as Employee<number>[];\n    const dataMetadata: { data: Employee<number>; metadata: Metadata<number> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(\n      <TestComponent\n        data={dataMetadata}\n        selectionMode=\"single\"\n        onClick={() => {\n          expect(false, 'Click event should not propagate').to.be.true;\n        }}></TestComponent>\n    );\n    const items = await getContents();\n\n    mouseItemSelection(items[3]);\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[5]);\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[7]);\n    await waitFor(() => {\n      expect(items[7].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('select multiple items using shift click', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    // console.log('here');\n    // console.log(list.debug());\n    await waitFor(() => {\n      //TODO: Add a reliable way to use waitFor correctly.JET-63874\n      /* eslint-disable */\n      expect(items[1].getAttribute('aria-selected')).eq('false');\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n      expect(items[6].getAttribute('aria-selected')).eq('false');\n      /* eslint-enable */\n    });\n  }, 3000);\n\n  it('select multiple items using shift space bar', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    fireEvent.keyUp(items[5], { key: ' ', shiftKey: true });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('selects multiple items when clicking on Selector checkboxes', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const selected: Keys<string> = { all: false, keys: new Set([data[2].id]) };\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent\n          data={dataMetadata}\n          selectionMode=\"multiple\"\n          selectedKeys={selected}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    mouseCheckboxSelection(4);\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('correctly modifies range selection when using SPACE to select', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    fireEvent.keyUp(items[5], { key: ' ', shiftKey: true });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n\n    // keyboard select to \"toggle\" one item off\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n\n    // keyboard select again to \"replace\" with single selection only\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('selects single items using space keypress', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  }, 3000);\n\n  it('selects single items using enter keypress (Context value is embedded)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <CollectionGestureContext.Provider value={'embedded'}>\n          <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n        </CollectionGestureContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    fireEvent.keyUp(items[3], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('selects single items using enter keypress (Context value is default)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <CollectionGestureContext.Provider value={'default'}>\n          <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n        </CollectionGestureContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    fireEvent.keyUp(items[2], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('select multiple items then click on a selected items', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[3]);\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('false');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('false');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('false');\n    });\n  });\n\n  it('select multiple items then shift click on a selected items', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[3], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('false');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('false');\n    });\n  });\n\n  it('select multiple items then metaKey click on a selected items, to select and unselect', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents();\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // first click to deselect\n    mouseItemSelection(items[3], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('false');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // second click to reselect\n    mouseItemSelection(items[3], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // click outside of range should be additive too\n    mouseItemSelection(items[7], { metaKey: true });\n    await waitFor(() => {\n      /* eslint-disable */\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n      expect(items[6].getAttribute('aria-selected')).eq('false');\n      expect(items[7].getAttribute('aria-selected')).eq('true');\n      /* eslint-enable */\n    });\n  }, 3000);\n\n  it('supports multi-select (and deselect) via keyboard arrow keys', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // select items 1-3\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n\n    // deselect 2 and 3 via up-arrow\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // continue up past initial anchor, to select items 0 and 1\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports extending mouse initiated range select via arrow keys', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // select items 2-5 via click\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n    expect(items[7].getAttribute('aria-selected')).eq('false');\n\n    // now extend by two more rows\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('true');\n    expect(items[7].getAttribute('aria-selected')).eq('true');\n\n    // now deselect those via up-arrow\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n    expect(items[7].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports range selection from current item to shift+click item', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 3rd item\n    fireEvent.click(items[2], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports range selection from current item to shift+arrow items', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 3rd item\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports range selection shift+click and then shift+click', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 2nd item\n    fireEvent.click(items[1], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + click the 4th item\n    fireEvent.click(items[3], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection shift+click and then shift+arrow  ', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 2nd item\n    fireEvent.click(items[1], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + arrow to the 4th item\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection shift+click and then shift+space', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + click the 2nd item\n    fireEvent.click(items[1], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the 4th item\n    fireEvent.keyUp(items[3], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection shift+arrow and then shift+click  ', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 2nd item\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + click the 4th item\n    fireEvent.click(items[3], { shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection shift+arrow and then shift+arrow  ', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 2nd item\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // arrow to the 3rd item, then shift + arrow to the 4th item\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection shift+arrow and then shift+space', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + arrow to the 2nd item\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // shift + space the 4th item\n    fireEvent.keyUp(items[3], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('supports range selection shift+space and then shift+space', async () => {\n    const data = populateData(4) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot();\n    const items = await getContents();\n\n    // tab and focus to make the 1st item current\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    // shift + space to select the 1st item\n    fireEvent.keyUp(items[0], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // arrow down to the 3rd item, then shift + space the 3rd item\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyUp(items[2], { key: ' ', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n};\n"],"names":["TestComponent","it","async","dataMetadata","populateData","map","data","metadata","key","id","render","_jsx","grid","getRoot","expect","getAttribute","eq","items","getItems","length","cells","getContents","selectionMode","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","env","RootEnvironmentProvider","environment","jsx","contextMenuRenderer","_jsxs","_Fragment","children","MenuItem","label","firstItem","fireEvent","contextMenu","clientX","clientY","currentTarget","menu","getMenuItemByRole","menuItems","getAllMenuItemsByRole","menuItemGotByLabel","getLabel","not","null","equals","click","keyDown","shiftKey","isTopGridlineVisible","item","className","indexOf","isBottomGridlineVisible","isGridlineHidden","to","be","true","gridlines","bottom","false","top","isMetadataEqual","metadata1","metadata2","isFocusHighlight","count","onItemAction","detail","context","CollectionGestureContext","Provider","value","initialKey","currentItemVariant","hasAttribute","undefined","dataset","jest","suggestion","enable","suggestions","filter","d","unshift","sparkle","querySelector","firstElementChild","getSparkle","sparkleHeight","offsetHeight","onClick","mouseItemSelection","waitFor","__variableDynamicImportRuntime1__","keyUp","selected","all","keys","__variableDynamicImportRuntime2__","selectedKeys","mouseCheckboxSelection","__variableDynamicImportRuntime3__","__variableDynamicImportRuntime4__","__variableDynamicImportRuntime5__","__variableDynamicImportRuntime6__","__variableDynamicImportRuntime7__","__variableDynamicImportRuntime8__","__variableDynamicImportRuntime9__","metaKey","__variableDynamicImportRuntime10__","__variableDynamicImportRuntime11__","__variableDynamicImportRuntime12__","userEvent","tab","matches","__variableDynamicImportRuntime13__","__variableDynamicImportRuntime14__","__variableDynamicImportRuntime15__","__variableDynamicImportRuntime16__","__variableDynamicImportRuntime17__","__variableDynamicImportRuntime18__","__variableDynamicImportRuntime19__","__variableDynamicImportRuntime20__"],"mappings":"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"}