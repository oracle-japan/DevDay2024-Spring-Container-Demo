{"version":3,"file":"render-c4ff78a5.js","sources":["../../src/__tests__/utils/render.tsx"],"sourcesContent":["import { RenderOptions, RenderResult, render } from '@testing-library/preact';\nimport { RootEnvironment, RootEnvironmentProvider } from '../../UNSAFE_Environment';\n\nimport { ComponentProps } from 'preact';\nimport translations from '../../resources/nls/en/bundle';\n\ntype RootEnvironmentProviderProps = ComponentProps<typeof RootEnvironmentProvider>;\n\nconst defaultEnvironment: Partial<RootEnvironment> = {\n  translations: { '@oracle/oraclejet-preact': translations },\n  mode: 'test'\n};\n\nexport const renderInEnv = (\n  children: RootEnvironmentProviderProps['children'],\n  environment = defaultEnvironment,\n  options?: Omit<RenderOptions, 'queries'>\n) => {\n  const mergedEnvironment = { ...environment };\n  if (mergedEnvironment.translations == null) {\n    mergedEnvironment.translations = {\n      ...defaultEnvironment.translations\n    };\n  }\n\n  const { rerender: _rerender, ...result } = render(\n    <RootEnvironmentProvider environment={mergedEnvironment}>{children}</RootEnvironmentProvider>,\n    options\n  );\n  const rerender = (children: RootEnvironmentProviderProps['children']) =>\n    _rerender(\n      <RootEnvironmentProvider environment={mergedEnvironment}>{children}</RootEnvironmentProvider>\n    );\n  return { rerender, ...result } as RenderResult;\n};\n"],"names":["defaultEnvironment","translations","mode","children","environment","options","mergedEnvironment","rerender","_rerender","result","render","_jsx","RootEnvironmentProvider"],"mappings":"6LAQA,MAAMA,EAA+C,CACnDC,aAAc,CAAE,2BAA4BA,WAC5CC,KAAM,sBAGmB,CACzBC,EACAC,EAAcJ,EACdK,KAEA,MAAMC,EAAoB,IAAKF,GACO,MAAlCE,EAAkBL,eACpBK,EAAkBL,aAAe,IAC5BD,EAAmBC,eAI1B,MAAQM,SAAUC,KAAcC,GAAWC,EAAMA,OAC/CC,MAACC,EAAuBA,wBAAA,CAACR,YAAaE,EAAiBH,SAAGA,IAC1DE,GAMF,MAAO,CAAEE,SAJSJ,GAChBK,EACEG,EAAAA,IAACC,EAAAA,wBAAuB,CAACR,YAAaE,WAAoBH,QAExCM,EAAwB"}