{"version":3,"file":"useLegendLayout-5c19395e.js","sources":["../../src/UNSAFE_Legend/LegendImageMarker.tsx","../../src/UNSAFE_Legend/LegendSymbol.tsx","../../src/UNSAFE_Legend/LegendText.tsx","../../src/UNSAFE_Legend/BaseLegendItem.tsx","../../src/UNSAFE_Legend/useLegendTooltip.ts","../../src/UNSAFE_Legend/useLegendLayout.ts","../../src/UNSAFE_Legend/BaseLegend.tsx","../../src/UNSAFE_Legend/useEvents.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from './themes/LegendStyles.css';\n\ntype ImageMarkerProps = {\n  source: string;\n};\n\nexport function ImageMarker(props: ImageMarkerProps) {\n  const { imageMarkerStyle } = styles;\n  return <img class={imageMarkerStyle} src={props.source} />;\n}\n","import { SvgSymbol } from '../UNSAFE_SvgShapes';\nimport { SymbolProps } from './Legend.type';\nimport { ImageMarker } from './LegendImageMarker';\nimport { Property } from 'csstype';\nimport { styles } from './themes/LegendStyles.css';\n\ntype LegendSymbolProps = {\n  isHidden?: boolean;\n  lineLength?: number;\n  width?: Property.Width;\n  height?: Property.Height;\n  borderColor?: Property.Color;\n} & SymbolProps;\n\nexport const LegendSymbol = ({\n  // The default color is not in the redwood pallete.\n  // TODO: replace default legend color with UX approved pallete color when available.\n  markerColor = '#a6acb1',\n  lineColor = '#a6acb1',\n  markerShape = 'square',\n  isHidden = false,\n  lineStyle = 'none',\n  ...props\n}: LegendSymbolProps) => {\n  const { legendSymbolBaseStyle } = styles;\n  const dimensionsNotSet = props.width == null && props.height == null;\n  const setAspectRatioNone =\n    !dimensionsNotSet && (markerShape === 'rectangle' || markerShape === 'ellipse');\n  const defaultLineWidth = lineStyle != 'none' && markerShape != 'none' ? 2 : 3;\n  return (\n    <div className={legendSymbolBaseStyle} style={{ width: props.width, height: props.height }}>\n      {props.source ? (\n        <ImageMarker source={props.source} />\n      ) : (\n        <SvgSymbol\n          setAspectRatioNone={setAspectRatioNone}\n          markerShape={isHidden ? 'square' : markerShape}\n          lineStyle={isHidden ? 'none' : lineStyle}\n          lineColor={lineColor}\n          lineLength={props.lineLength}\n          lineWidth={props.lineWidth != null ? props.lineWidth : defaultLineWidth}\n          markerColor={isHidden ? 'transparent' : markerColor}\n          borderColor={isHidden ? markerColor || lineColor : props.borderColor}\n          setAbsolutePos={true}\n        />\n      )}\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Text } from '../UNSAFE_Text';\nimport { Property } from 'csstype';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/LegendStyles.css';\n\ntype LegendTextProps = {\n  text: string;\n  type: 'label' | 'title';\n  fontStyle?: Property.FontStyle;\n  fontSize?: Property.FontSize;\n  fontWeight?: Property.FontWeight;\n  textDecoration?: Property.TextDecoration;\n  color?: Property.Color;\n  fontFamily?: Property.FontFamily;\n  id?: string;\n  align?: 'start' | 'center' | 'end';\n};\n\n/**\n * Returns the legend text component.\n */\nexport const LegendText = ({\n  text,\n  type = 'label',\n  id,\n  align = 'start',\n  ...props\n}: LegendTextProps) => {\n  const {\n    legendTextBaseStyle,\n    legendTextTitle,\n    legendTitleStartAlign,\n    legendTitleCenterAlign,\n    legendTitleEndAlign\n  } = styles;\n  const isTitle = type === 'title';\n  return (\n    <div\n      class={classNames([\n        legendTextBaseStyle,\n        isTitle ? legendTextTitle : '',\n        isTitle && align === 'start' ? legendTitleStartAlign : '',\n        isTitle && align === 'center' ? legendTitleCenterAlign : '',\n        isTitle && align === 'end' ? legendTitleEndAlign : ''\n      ])}\n      style={{\n        ...props\n      }}>\n      <Text size=\"inherit\" variant=\"inherit\" weight=\"inherit\" truncation={'ellipsis'} id={id}>\n        {text}\n      </Text>\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { LegendSymbol } from './LegendSymbol';\nimport { LegendText } from './LegendText';\nimport { SymbolProps, TextStylesProps } from './Legend.type';\nimport { ForwardedRef, forwardRef } from 'preact/compat';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { styles } from './themes/LegendStyles.css';\n\ntype BaseLegendItemProps = {\n  text: string;\n  itemIdx: number;\n  sectionIdx: number;\n  isCurrent: boolean;\n  isFocused: boolean;\n  isHighlighted?: boolean;\n  isHidden?: boolean;\n  symbolWidth?: number;\n  symbolHeight?: number;\n  labelledBy?: string;\n  id?: string;\n  'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];\n  class?: string;\n  minWidth?: number;\n  gridCol?: number;\n  gridRow?: number;\n} & SymbolProps &\n  TextStylesProps;\n\nexport const BaseLegendItem = forwardRef(\n  (\n    {\n      id,\n      text,\n      sectionIdx,\n      itemIdx,\n      isHighlighted,\n      symbolHeight,\n      symbolWidth,\n      isFocused,\n      isCurrent,\n      isHidden,\n      ...props\n    }: BaseLegendItemProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const textStyles = {\n      fontFamily: props.textFontFamily,\n      fontSize: props.textFontSize,\n      color: props.textColor,\n      fontStyle: props.textFontStyle,\n      fontWeight: props.textFontWeight,\n      textDecoration: props.textTextDecoration\n    };\n\n    const symbolProps = {\n      lineStyle: props.lineStyle,\n      lineWidth: props.lineWidth,\n      markerShape: props.markerShape,\n      markerColor: props.markerColor,\n      source: props.source,\n      borderColor: props.borderColor,\n      lineColor: props.lineColor\n    };\n\n    const isNotDimmed = isHighlighted || isHighlighted == null;\n    const { legendItemBaseStyle, legendItemIsCurrent, legendItemOpacity, legendItemFocusRing } =\n      styles;\n    return (\n      <div\n        class={classNames([\n          legendItemBaseStyle,\n          isCurrent && isHighlighted == null ? legendItemIsCurrent : '',\n          !isNotDimmed ? legendItemOpacity : '',\n          isFocused ? legendItemFocusRing : '',\n          props.class\n        ])}\n        style={{\n          gridRow: props.gridRow,\n          gridColumn: props.gridCol,\n          minWidth: props.minWidth !== undefined ? `${props.minWidth}px` : undefined\n        }}\n        id={id}\n        ref={ref}\n        data-oj-section={sectionIdx}\n        data-oj-item={itemIdx}\n        aria-labelledby={props.labelledBy}\n        role={isHidden != null ? 'menuitemcheckbox' : 'img'}\n        aria-checked={isHidden != null ? !isHidden : undefined}\n        aria-label={props['aria-label'] || text}>\n        <LegendSymbol\n          {...symbolProps}\n          isHidden={isHidden}\n          lineLength={symbolWidth}\n          width={symbolWidth != null ? `${symbolWidth}px` : undefined}\n          height={symbolHeight != null ? `${symbolHeight}px` : undefined}\n        />\n        <LegendText {...textStyles} text={text} type=\"label\" />\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { MutableRef, Ref, useLayoutEffect, useState } from 'preact/hooks';\nimport { useTooltipControlled } from '../hooks/UNSAFE_useTooltip';\nimport { ItemInfo } from './Legend.type';\nimport { useUser } from '../hooks/UNSAFE_useUser';\n\ntype props = {\n  text?: string;\n  rootDimsRef: MutableRef<DOMRect | undefined>;\n  focusedItemRef: Ref<HTMLDivElement>;\n  focusedItemInfo: ItemInfo;\n};\n\nconst DEFAULT_OFFSET = 8;\n\n/**\n * Calculate the datatip offset for datatip when keyboard focus is active.\n * @param focusedItemRef The ref for currentItem node.\n * @param rootRef The ref for root of the legend.\n * @param currentItem The ItemInfo of the current keyboard focused item.\n * @returns\n */\nconst calculateOffset = (\n  focusedItemRef: Ref<HTMLDivElement>,\n  rootDimsRef: MutableRef<DOMRect | undefined>,\n  currentItem: ItemInfo,\n  isRtl: boolean\n) => {\n  let crossAxis = 0;\n  let mainAxisOffset = DEFAULT_OFFSET;\n  if (focusedItemRef.current && currentItem.isCurrent && rootDimsRef.current) {\n    const rootDim = rootDimsRef.current;\n    const itemDim = focusedItemRef.current.getBoundingClientRect();\n    crossAxis = itemDim.x + itemDim.width / 2 - (rootDim.x + rootDim.width / 2);\n    crossAxis = isRtl ? -1 * crossAxis : crossAxis;\n    mainAxisOffset += rootDim.y - itemDim.y;\n    mainAxisOffset = Math.min(\n      DEFAULT_OFFSET,\n      Math.max(mainAxisOffset, itemDim.height - rootDim.height + DEFAULT_OFFSET)\n    );\n  }\n  return { crossAxis, mainAxis: mainAxisOffset };\n};\n\nexport const useLegendTooltip = ({ text, rootDimsRef, focusedItemRef, focusedItemInfo }: props) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const [offset, setOffset] = useState<{ mainAxis?: number; crossAxis?: number }>(\n    calculateOffset(focusedItemRef, rootDimsRef, focusedItemInfo, isRtl)\n  );\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  useLayoutEffect(() => {\n    setOffset(calculateOffset(focusedItemRef, rootDimsRef, focusedItemInfo, isRtl));\n  }, [focusedItemInfo, focusedItemRef, isRtl, rootDimsRef]);\n\n  const anchor = focusedItemInfo?.isCurrent ? 'element' : 'pointer';\n  const { tooltipContent, tooltipProps } = useTooltipControlled({\n    text: text,\n    position: 'top',\n    isDisabled: false,\n    variant: 'datatip',\n    anchor: { x: anchor, y: anchor },\n    offset: offset,\n    isOpen,\n    onToggle: ({ value }) => setIsOpen(value)\n  });\n\n  return { tooltipContent, tooltipProps };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { RefObject } from 'preact';\nimport { LegendItem, LegendSection } from './Legend.type';\nimport { useMemo, useRef, useLayoutEffect, useState } from 'preact/hooks';\nimport { Font, useTextDimensions } from '../hooks/PRIVATE_useTextDimensions';\n\ntype Props<K> = {\n  sections?: LegendSection<K>[];\n  items?: LegendItem<K>[];\n  resolvedVars: Record<string, any>;\n  rootRef: RefObject<HTMLDivElement>;\n  rootDimsRef: RefObject<DOMRect | undefined>;\n  orientation?: 'vertical' | 'horizontal';\n  legendFontStylesObj?: Font;\n  symbolWidth?: number;\n};\n\ntype getTextDimensionsType = NonNullable<\n  NonNullable<ReturnType<typeof useTextDimensions>>['getTextDimensions']\n>;\n\nexport type LayoutInfo = {\n  isWrapped: boolean;\n  maxItemWidth: number;\n  itemsPerRow: number;\n};\n\n/**\n * Returns maximum of the width among the items in a section of legend also return the width of the entire section.\n * @param items Legend items array\n * @param unitLength Base  element\n * @param getTextDimensions Text width measurement function\n * @param legendFontStylesObj Legend text font style properties object\n * @param symbolWidth Width of legend symbol\n *\n * @returns\n */\nconst getMaxWidth = <K>(\n  items: LegendItem<K>[],\n  unitLength: number,\n  getTextDimensions: getTextDimensionsType,\n  legendFontStylesObj?: Font,\n  symbolWidth?: number\n) => {\n  let maxItemWidth = 0;\n  let horizontalSectionWidth = 0;\n  let itemSymbolWidth = 0;\n  if (symbolWidth) {\n    itemSymbolWidth = unitLength * 1.5 + symbolWidth;\n  } else {\n    //itemSymbolWidth = marginLeft + marginRight + width below expression is simplified\n    itemSymbolWidth = 4 * unitLength;\n  }\n  items?.forEach((item) => {\n    const legendItem = item as LegendItem<K>;\n    const { width } = getTextDimensions(legendItem.text, legendFontStylesObj);\n    //itemTextWidth = paddingLeft + paddingRight + width\n    const itemTextWidth = unitLength * 2.5 + width;\n    //horizontalSectionWidth = total width of the section\n    horizontalSectionWidth += itemSymbolWidth + itemTextWidth;\n    maxItemWidth = Math.max(maxItemWidth, Math.ceil(itemSymbolWidth + itemTextWidth));\n  });\n\n  return { maxItemWidth, horizontalSectionWidth };\n};\n\nexport function useLegendLayout<K>({\n  resolvedVars,\n  sections,\n  items,\n  rootRef,\n  rootDimsRef,\n  orientation,\n  legendFontStylesObj = {},\n  symbolWidth\n}: Props<K>) {\n  const { textMeasureContent, getTextDimensions } = useTextDimensions();\n  const orientationRef = useRef(orientation);\n  const hasOrientationChanged = orientationRef.current !== orientation;\n  const [needsRerender, setRerender] = useState(false);\n\n  useLayoutEffect(() => {\n    if (hasOrientationChanged) {\n      //rerender the Legend\n      orientationRef.current = orientation;\n      setRerender(!needsRerender);\n    }\n  }, [hasOrientationChanged, needsRerender, orientation]);\n\n  const layoutInfo = useMemo(() => {\n    if (\n      !rootRef.current ||\n      !Object.keys(resolvedVars).length ||\n      !getTextDimensions ||\n      hasOrientationChanged ||\n      orientation === 'vertical'\n    ) {\n      return;\n    }\n    const unitLength = parseFloat(resolvedVars['unit']);\n    // recalculate rootDims everytime items change.\n    rootDimsRef.current = rootRef?.current?.getBoundingClientRect();\n    let maxWidth = 0;\n    let isWrapped = false;\n    if (sections) {\n      sections.forEach((section) => {\n        const { maxItemWidth, horizontalSectionWidth } = getMaxWidth(\n          section.items,\n          unitLength,\n          getTextDimensions,\n          legendFontStylesObj,\n          symbolWidth\n        );\n\n        if (!isWrapped) {\n          isWrapped = horizontalSectionWidth > rootDimsRef.current?.width!;\n        }\n        maxWidth = Math.max(maxWidth, maxItemWidth);\n      });\n    }\n    if (items) {\n      const { maxItemWidth, horizontalSectionWidth } = getMaxWidth(\n        items,\n        unitLength,\n        getTextDimensions,\n        legendFontStylesObj,\n        symbolWidth\n      );\n      maxWidth = maxItemWidth;\n      isWrapped = horizontalSectionWidth > rootDimsRef.current?.width!;\n    }\n    const legendLayoutInfo = {\n      maxItemWidth: Math.min(maxWidth, rootDimsRef.current?.width!),\n      itemsPerRow: Math.max(1, Math.floor(rootDimsRef.current?.width! / maxWidth)),\n      isWrapped\n    };\n    return legendLayoutInfo;\n  }, [\n    sections,\n    items,\n    rootDimsRef,\n    rootRef,\n    legendFontStylesObj,\n    resolvedVars,\n    symbolWidth,\n    getTextDimensions,\n    orientation,\n    hasOrientationChanged\n  ]);\n\n  return {\n    textMeasureContent,\n    layoutInfo\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { BaseLegendProps, LegendItem } from './Legend.type';\nimport { BaseLegendItem } from './BaseLegendItem';\nimport { getItemProps, getGridCellIndices } from './LegendUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/LegendStyles.css';\n\n/**\n * The controlled legend reponsible only for rendering the legend items.\n */\nexport const BaseLegend = <K,>({\n  orientation = 'horizontal',\n  highlightedIds,\n  hiddenIds,\n  focusedItemInfo,\n  hoveredItemInfo,\n  sectionIdx,\n  activeId,\n  isReadOnly,\n  items,\n  symbolHeight,\n  symbolWidth,\n  ...props\n}: BaseLegendProps<K>) => {\n  const isHoriz = orientation === 'horizontal';\n  const columTemplates = isHoriz ? `repeat(${props.itemsPerRow}, ${props.itemWidth})` : undefined;\n  const {\n    baseLegendStyles,\n    baseLegendHorizontal,\n    baseLegendVertical,\n    baseLegendVerticalItem,\n    baseLegendPaddingBottom,\n    baseLegendPaddingTop,\n    baseLegendPaddingEnd\n  } = styles;\n\n  return (\n    <div\n      className={classNames([\n        baseLegendStyles,\n        isHoriz ? baseLegendHorizontal : baseLegendVertical\n      ])}\n      style={{\n        gridTemplateColumns: columTemplates,\n        // set maxWidth to 100% on second render for text truncation to work.\n        maxWidth: '100%'\n      }}>\n      {items.map((item: LegendItem<K>, index: number) => {\n        const itemProps = getItemProps(\n          item,\n          index,\n          sectionIdx,\n          focusedItemInfo,\n          isReadOnly,\n          hoveredItemInfo,\n          hiddenIds,\n          highlightedIds\n        );\n        const isFocusedItem =\n          focusedItemInfo.sectionIdx === sectionIdx && focusedItemInfo.itemIdx === index;\n        const { gridRow, gridCol } = getGridCellIndices(\n          items.length,\n          index,\n          props.itemsPerRow,\n          props.itemsPerCol\n        );\n        const needsBottomSpace = gridRow != null && gridRow != props.itemsPerCol;\n        const needsTopSpace = gridRow != null && gridRow != 1;\n        return (\n          <BaseLegendItem\n            ref={isFocusedItem ? props.focusedItemRef : undefined}\n            itemIdx={index}\n            sectionIdx={sectionIdx}\n            symbolHeight={symbolHeight}\n            symbolWidth={symbolWidth}\n            {...props}\n            {...itemProps}\n            gridRow={gridRow}\n            gridCol={gridCol}\n            minWidth={props.itemWidth}\n            id={itemProps.isCurrent ? activeId : ''}\n            class={classNames([\n              isHoriz ? '' : baseLegendVerticalItem,\n              needsTopSpace ? baseLegendPaddingTop : '',\n              needsBottomSpace ? baseLegendPaddingBottom : '',\n              baseLegendPaddingEnd\n            ])}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useState } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { ItemActionDetail, InputDetail, ItemInfo } from './Legend.type';\nimport { getItemInfo, getRandomId, isEqualItem } from './LegendUtils';\n\nexport function useEvents<K>(\n  isInteractive: boolean,\n  isHideShow: boolean,\n  getDetailFromInfo: (info?: ItemInfo) => InputDetail<K>,\n  getPrevItemInfo: (info: ItemInfo) => ItemInfo,\n  getNextItemInfo: (info: ItemInfo) => ItemInfo,\n  onItemAction?: (detail: ItemActionDetail<K>) => void,\n  onInput?: (detail: InputDetail<K>) => void\n) {\n  const [focusedItemInfo, setfocusedItemInfo] = useState<ItemInfo>({\n    itemIdx: 0,\n    sectionIdx: 0\n  });\n  const [hoveredItemInfo, sethoveredItemInfo] = useState<ItemInfo>();\n  const activeId = useRef<string>();\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  const cancelEvent = (event: Event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const hoverHandler = (event: PointerEvent) => {\n    const itemInfo = getItemInfo(event.target as HTMLElement);\n    if (!isEqualItem(itemInfo, hoveredItemInfo)) {\n      sethoveredItemInfo(itemInfo && { ...itemInfo, isCurrent: true });\n      activeId.current = getRandomId();\n      if (isInteractive) {\n        focusedItemInfo ? setfocusedItemInfo({ ...focusedItemInfo, isCurrent: false }) : '';\n        onInput?.(getDetailFromInfo(itemInfo));\n      }\n    }\n  };\n\n  const pointerLeaveHandler = () => {\n    sethoveredItemInfo(undefined);\n    activeId.current = undefined;\n    if (isInteractive) {\n      onInput?.(getDetailFromInfo());\n    }\n  };\n\n  if (!isInteractive) {\n    return {\n      focusedItemInfo,\n      hoveredItemInfo,\n      // include pointer leave and pointer move for datatip\n      onPointerLeave: pointerLeaveHandler,\n      onPointerMove: hoverHandler\n    };\n  }\n\n  const updatefocusedItemInfo = (itemInfo: ItemInfo) => {\n    onInput?.(getDetailFromInfo(itemInfo));\n    activeId.current = getRandomId();\n    setfocusedItemInfo(itemInfo);\n  };\n\n  const handleKeyboardInput = (item: ItemInfo) => {\n    if (!isEqualItem(item, focusedItemInfo)) {\n      item.isCurrent = true;\n      item.isFocusVisible = true;\n      if (hoveredItemInfo) {\n        sethoveredItemInfo({ ...hoveredItemInfo, isCurrent: false });\n      }\n      updatefocusedItemInfo(item);\n    }\n  };\n\n  const triggerOnAction = () => {\n    const { sectionId, itemId } = getDetailFromInfo(focusedItemInfo);\n    if (itemId != null) {\n      onItemAction?.({ sectionId, itemId });\n      activeId.current = getRandomId();\n    }\n  };\n\n  const pointerUpHandler = (event: PointerEvent) => {\n    const itemInfo = getItemInfo(event.target as HTMLElement);\n    if (itemInfo != null) {\n      setfocusedItemInfo(itemInfo);\n      const { sectionId, itemId } = getDetailFromInfo(itemInfo);\n      if (itemId != null) {\n        onItemAction?.({ sectionId, itemId });\n        activeId.current = getRandomId();\n      }\n    }\n  };\n\n  const keyDownHandler = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'Tab':\n        return;\n      case 'ArrowDown': {\n        const nextItemInfo = getNextItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n      case 'ArrowUp': {\n        const nextItemInfo = getPrevItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n      case 'ArrowRight': {\n        const nextItemInfo = isRtl\n          ? getPrevItemInfo(focusedItemInfo)\n          : getNextItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n      case 'ArrowLeft': {\n        const nextItemInfo = isRtl\n          ? getNextItemInfo(focusedItemInfo)\n          : getPrevItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n    }\n    cancelEvent(event);\n  };\n\n  const keyUpHandler = (event: KeyboardEvent) => {\n    const key = event.code;\n    switch (key) {\n      case 'Space': {\n        if (isHideShow) {\n          triggerOnAction();\n        }\n        break;\n      }\n      case 'Enter': {\n        triggerOnAction();\n        break;\n      }\n      case 'Home': {\n        updatefocusedItemInfo({\n          itemIdx: 0,\n          sectionIdx: 0,\n          isFocusVisible: true,\n          isCurrent: true\n        });\n        break;\n      }\n      case 'End': {\n        updatefocusedItemInfo({\n          itemIdx: -1,\n          sectionIdx: -1,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        break;\n      }\n      case 'Tab': {\n        updatefocusedItemInfo({\n          ...focusedItemInfo,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        break;\n      }\n    }\n  };\n\n  const blurHandler = () => {\n    const itemInfo = { ...focusedItemInfo, isCurrent: false, isFocusVisible: false };\n    if (hoveredItemInfo != null || focusedItemInfo.isCurrent) {\n      onInput?.(getDetailFromInfo(undefined));\n    }\n    setfocusedItemInfo(itemInfo);\n  };\n\n  return {\n    focusedItemInfo,\n    hoveredItemInfo,\n    'aria-activedescendant': activeId.current,\n    onPointerUp: pointerUpHandler,\n    onPointerMove: hoverHandler,\n    onKeyUp: keyUpHandler,\n    onKeyDown: keyDownHandler,\n    onPointerLeave: pointerLeaveHandler,\n    onBlur: blurHandler\n  };\n}\n"],"names":["ImageMarker","props","imageMarkerStyle","styles","_jsx","jsx","class","src","source","LegendSymbol","markerColor","lineColor","markerShape","isHidden","lineStyle","legendSymbolBaseStyle","setAspectRatioNone","width","height","defaultLineWidth","className","style","SvgSymbol","lineLength","lineWidth","borderColor","setAbsolutePos","LegendText","text","type","id","align","legendTextBaseStyle","legendTextTitle","legendTitleStartAlign","legendTitleCenterAlign","legendTitleEndAlign","isTitle","classNames","children","Text","size","variant","weight","truncation","BaseLegendItem","forwardRef","sectionIdx","itemIdx","isHighlighted","symbolHeight","symbolWidth","isFocused","isCurrent","ref","textStyles","fontFamily","textFontFamily","fontSize","textFontSize","color","textColor","fontStyle","textFontStyle","fontWeight","textFontWeight","textDecoration","textTextDecoration","symbolProps","isNotDimmed","legendItemBaseStyle","legendItemIsCurrent","legendItemOpacity","legendItemFocusRing","_jsxs","gridRow","gridColumn","gridCol","minWidth","undefined","labelledBy","role","calculateOffset","focusedItemRef","rootDimsRef","currentItem","isRtl","crossAxis","mainAxisOffset","current","rootDim","itemDim","getBoundingClientRect","x","y","Math","min","max","mainAxis","getMaxWidth","items","unitLength","getTextDimensions","legendFontStylesObj","maxItemWidth","horizontalSectionWidth","itemSymbolWidth","forEach","item","legendItem","itemTextWidth","ceil","orientation","highlightedIds","hiddenIds","focusedItemInfo","hoveredItemInfo","activeId","isReadOnly","isHoriz","columTemplates","itemsPerRow","itemWidth","baseLegendStyles","baseLegendHorizontal","baseLegendVertical","baseLegendVerticalItem","baseLegendPaddingBottom","baseLegendPaddingTop","baseLegendPaddingEnd","gridTemplateColumns","maxWidth","map","index","itemProps","getItemProps","isFocusedItem","getGridCellIndices","length","itemsPerCol","needsBottomSpace","needsTopSpace","isInteractive","isHideShow","getDetailFromInfo","getPrevItemInfo","getNextItemInfo","onItemAction","onInput","setfocusedItemInfo","useState","sethoveredItemInfo","useRef","direction","useUser","hoverHandler","event","itemInfo","getItemInfo","target","isEqualItem","getRandomId","pointerLeaveHandler","onPointerLeave","onPointerMove","updatefocusedItemInfo","handleKeyboardInput","isFocusVisible","triggerOnAction","sectionId","itemId","onPointerUp","onKeyUp","code","onKeyDown","key","nextItemInfo","preventDefault","stopPropagation","cancelEvent","onBlur","resolvedVars","sections","rootRef","textMeasureContent","useTextDimensions","orientationRef","hasOrientationChanged","needsRerender","setRerender","useLayoutEffect","layoutInfo","useMemo","Object","keys","parseFloat","isWrapped","section","floor","offset","setOffset","isOpen","setIsOpen","anchor","tooltipContent","tooltipProps","useTooltipControlled","position","isDisabled","onToggle","value"],"mappings":"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"}