{"version":3,"file":"MeterCircle-e29b2eff.js","sources":["../../src/UNSAFE_MeterCircle/CircularReferenceLine.tsx","../../src/UNSAFE_MeterCircle/CircleMeterUtils.ts","../../src/UNSAFE_MeterCircle/LayoutUtils.ts","../../src/UNSAFE_MeterCircle/MeterCircle.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getCenterCoord } from '../utils/PRIVATE_meterUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { DvtThresholdsColors, getDvtThresholdColor } from '../utils/UNSAFE_meterUtils';\nimport { styles } from './themes/MeterCircleStyles.css';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype getCenterCoordParamType = Parameters<typeof getCenterCoord>;\n\nexport type CircularReferenceLineProps = {\n  color?: ColorProps['color'] | DvtThresholdsColors;\n  angle: number;\n  radius: string;\n  length: string;\n  section: getCenterCoordParamType[0];\n};\n\nexport function CircularReferenceLine({\n  color,\n  angle,\n  radius,\n  length,\n  section = 'full'\n}: CircularReferenceLineProps) {\n  const centerCoord = getCenterCoord(section);\n  const yOffset = `calc(${centerCoord.y * 100}% - ((${Math.sin(\n    (angle * 2 * Math.PI) / 360\n  )} * ${radius})))`;\n  const xOffset = `calc(${centerCoord.x * 100}%  + ((${Math.cos(\n    (angle * 2 * Math.PI) / 360\n  )} * ${radius})))`;\n  return (\n    <div\n      class={classNames([\n        styles.referenceBaseLineStyle,\n        color ? undefined : styles.referenceBorderStyle\n      ])}\n      style={{\n        left: xOffset,\n        top: yOffset,\n        width: `calc(${length})`,\n        transform: `translate(0, -1px) rotate(${360 - angle}deg)`,\n        backgroundColor: color ? getDvtThresholdColor(color) : undefined\n      }}></div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { Ref } from 'preact/hooks';\nimport {\n  getPositiveAngle,\n  convertToPolar,\n  getCenterCoord,\n  Sector\n} from '../utils/PRIVATE_meterUtils';\n\nimport { CenterContext } from './MeterCircle.types';\n\ntype Dimensions = {\n  width: number;\n  height: number;\n  innerRadius: number;\n  outerRadius: number;\n};\n\n/**\n * Returns the true dimensions of the meter circle after initial render. All dimensions are 0 for initial render.\n * @param element The HTML element that wraps the track and indicator div.\n * @param section The section in which the meter circle lies.\n * @returns The dimensions of the meter circle.\n */\nexport function getDimensions(element: HTMLElement | null, section: Sector): Dimensions {\n  if (!element) {\n    return {\n      width: 0,\n      height: 0,\n      innerRadius: 0,\n      outerRadius: 0\n    };\n  }\n\n  const circleTrack = element.children[0] as HTMLElement;\n  const rect = circleTrack.getBoundingClientRect();\n\n  return {\n    width: Math.round(rect.width),\n    height: Math.round(rect.height),\n    ...getInnerAndOuterRadius(circleTrack, rect, section)\n  };\n}\n\n/**\n * Returns the inner and outer radius of the meter circle.\n * @param element The HTML element that wraps the track and indicator div.\n * @param rect The bounding rect of the wrapper HTML element.\n * @param section The section in which the meter circle lies.\n * @returns The inner and outer radius of the meter circle.\n */\nfunction getInnerAndOuterRadius(\n  element: HTMLElement,\n  rect: any,\n  section: string\n): {\n  innerRadius: number;\n  outerRadius: number;\n} {\n  const width = element.clientWidth;\n  const height = element.clientHeight;\n\n  if (section === 'bottom' || section === 'top') {\n    return { outerRadius: rect.width / 2, innerRadius: height };\n  } else if (section === 'left' || section === 'right') {\n    return { outerRadius: rect.height / 2, innerRadius: width };\n  }\n  return { innerRadius: width / 2, outerRadius: rect.width / 2 };\n}\n\n/**\n * Returns the value corresponding to clicked point in the meter circle. Returns undefined if the clicked point is\n * outside the track of the meter circle.\n * @param pageX The pageX of the click event\n * @param pageY The pageY of the click event\n * @param max The max value of the meter circle.\n * @param min The min value of the meter circle.\n * @param step The step of the metercircle.\n * @param dimensionsRef The ref that stores dimensions reference of meter circle.\n * @param startAngle The startAngle of the meter circle.\n * @param angleExtent The angleExtent of the meter circle\n * @returns {number} The value corresponding to clicked point in the meter circle.\n */\nexport function getValue(\n  event: PointerEvent,\n  min: number,\n  max: number,\n  step: number,\n  dimensionsRef: Ref<Dimensions>,\n  startAngle: number,\n  angleExtent: number,\n  section: Sector,\n  isRtl: boolean\n): number | undefined {\n  const dims = dimensionsRef.current;\n  if (!dims) {\n    return undefined;\n  }\n\n  const center = getCenterCoord(section);\n  const { angle } = convertToPolar(\n    dims.width * center.x,\n    dims.height * center.y,\n    event.offsetX,\n    event.offsetY\n  );\n\n  const positiveAngle = getPositiveAngle(angle);\n\n  let val;\n  if (isRtl && startAngle + angleExtent > positiveAngle) {\n    val = (getPositiveAngle(angle - startAngle) / angleExtent) * (max - min);\n  }\n\n  if (!isRtl) {\n    const clockwiseArc = getPositiveAngle(startAngle - positiveAngle);\n    if (clockwiseArc <= angleExtent) {\n      val = (clockwiseArc * (max - min)) / angleExtent;\n    }\n  }\n\n  if (val != undefined) {\n    val = Math.round(val / step) * step;\n  }\n  return val;\n}\n\n/**\n * Returns the fraction of angle extent for given delta.\n * @param delta The delta of metric values.\n * @param min The minimum value of the meter circle.\n * @param max The maximum value of the meter circle.\n * @param angleExtent The angle extent of the meter circle.\n * @returns The angle extent corresponding to delta in metric value.\n */\nexport function getAngleExtentFromDelta(\n  delta: number,\n  min: number,\n  max: number,\n  angleExtent: number\n): number {\n  return (delta * angleExtent) / (max - min);\n}\n\n/**\n * Returns the start angle for given metric value.\n * @param value The metric value\n * @param min The minimum value of the meter circle.\n * @param max The maximum value of the meter circle.\n * @param startAngle The startAngle of the meter circle.\n * @param angleExtent The angleExtent of the meter circle.\n * @param isRtl Whether the reading mode is 'rtl'\n * @returns The startAngle for the metric value.\n */\nexport function getStartAngleForValue(\n  value: number,\n  min: number,\n  max: number,\n  startAngle: number,\n  angleExtent: number,\n  isRtl: boolean\n): number {\n  const extent = getAngleExtentFromDelta(value - min, min, max, angleExtent);\n  return startAngle + (isRtl ? 1 : -1) * extent;\n}\n\n/**\n * Returns the center context of for the meter circle.\n */\nexport function getCenterContext(\n  dimensionsRef: Ref<Dimensions>,\n  section: 'top' | 'bottom' | 'left' | 'right' | 'full'\n): CenterContext | undefined {\n  const dims = dimensionsRef.current;\n\n  if (!dims) {\n    return;\n  }\n\n  const center = getCenterCoord(section);\n  const cx = center.x * dims.width;\n  const cy = center.y * dims.height;\n\n  const isHoriz = section === 'top' || section === 'bottom';\n\n  let innerX, innerY, innerW, innerH;\n  let outerX, outerY, outerW, outerH;\n\n  if (isHoriz || section === 'full') {\n    outerW = 2 * dims.innerRadius;\n    outerH = section === 'full' ? 2 * dims.innerRadius : dims.innerRadius;\n    outerX = cx - dims.innerRadius;\n    outerY = section === 'bottom' ? 0 : cy - dims.innerRadius;\n\n    innerW = Math.sqrt(2) * dims.innerRadius;\n    innerH = section === 'full' ? innerW : dims.innerRadius / Math.sqrt(2);\n    innerX = cx - dims.innerRadius / Math.sqrt(2);\n    innerY = section === 'bottom' ? 0 : cy - dims.innerRadius / Math.sqrt(2);\n  } else {\n    outerH = 2 * dims.innerRadius;\n    outerW = dims.innerRadius;\n    outerX = section === 'left' ? cx - dims.innerRadius : 0;\n    outerY = cy - dims.innerRadius;\n\n    innerH = Math.sqrt(2) * dims.innerRadius;\n    innerW = dims.innerRadius / Math.sqrt(2);\n    innerX = section === 'left' ? cx - dims.innerRadius / Math.sqrt(2) : 0;\n    innerY = cy - dims.innerRadius / Math.sqrt(2);\n  }\n\n  return {\n    outerBounds: {\n      x: outerX,\n      y: outerY,\n      width: outerW,\n      height: outerH\n    },\n    innerBounds: {\n      x: innerX,\n      y: innerY,\n      width: innerW,\n      height: innerH\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  Threshold,\n  MeterSize,\n  ThresholdDisplay,\n  getDvtThresholdColor\n} from '../utils/UNSAFE_meterUtils';\nimport { getClipPath, Sector } from '../utils/PRIVATE_meterUtils';\nimport { getAngleExtentFromDelta, getStartAngleForValue } from './CircleMeterUtils';\nimport { MeterProps, CircularRefLine } from './MeterCircle.types';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { meterCircleVars } from './themes/MeterCircleContract.css';\nimport { colorSchemeVars } from '../Common/themes/themeContract.css';\nimport { xUnits } from '../UNSAFE_Theme/utils';\n\nexport type MeterInfo = Required<\n  Pick<MeterProps, 'min' | 'max' | 'value' | 'size' | 'startAngle' | 'angleExtent'>\n> & {\n  section: Sector;\n  isRtl: boolean;\n  innerRadius: number;\n};\n\n/**\n * Returns the css variable corresponding to the default size of the meter circle.\n * @param size The size of the meter circle.\n * @returns The css variable corresponding to the default size of the meter circle.\n */\nfunction getSizeVar(size: MeterSize): string {\n  return size ? meterCircleVars.sizes[size] : meterCircleVars.size;\n}\n\n/**\n * Returns the css variable corresponding to the default track size of the meter circle.\n * @param size The size of the meter circle.\n * @returns The css variable corresponding to the default track size of the meter circle.\n */\nfunction getTrackSizeVar(size: MeterSize): string {\n  return size ? meterCircleVars.trackSizes[size] : meterCircleVars.trackSize;\n}\n\n/**\n * Returns the calculated css variable string for the inner radius when given size and innerRadius of meter circle.\n * @param size The size of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns {string} CSS varible string for the calculated inner radius of the meter circle.\n */\n\nexport function getInnerRadius(size: MeterSize, innerRadius?: number): string {\n  if (innerRadius != undefined) {\n    return `(${getSizeVar(size)} * ${innerRadius / 2})`;\n  }\n  return `(${getSizeVar(size)} * 0.5 - ${getTrackSizeVar(size)})`;\n}\n\n/**\n * Returns the calculated css variable string for meter circle track for a given size and innerRadius of meter circle.\n * @param size The size of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns {string} CSS variable for the calculated track size of the meter circle.\n */\nexport function getTrackSize(size: MeterSize, innerRadius?: number): string {\n  if (innerRadius != undefined) {\n    return `(${getSizeVar(size)} * ${1 - innerRadius} / 2)`;\n  }\n  return getTrackSizeVar(size);\n}\n\n/**\n * Returns the calculated length of reference line for given size and inner radius of meter circle.\n * The length of reference line runs from the inner radius to slight outside the outer radius.\n * The length outside the outer radius depends on size of the meter circle.\n * @param size The size of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns The calculated CSS var for the length of reference line.\n */\nexport function getRefLineLength(size: MeterSize, innerRadius?: number): string {\n  return `${getTrackSize(size, innerRadius)} +  ${xUnits(2)}`;\n}\n\n/**\n * Returns the array of calculated props for InnerCircle representing each threshold.\n * @param meterInfo MeterInfo object containing info about given meter circle.\n * @param thresholds thresholds array of the meter circle.\n * @param isTrackRendered Whether track is rendered.\n * @param trackColor The track color of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns Array of calculated props object for InnerCircle representing each threshold.\n */\nexport function getThresholdsProps(\n  meterInfo: MeterInfo,\n  thresholds: Threshold[],\n  isTrackRendered: boolean,\n  trackColor?: ColorProps['color'],\n  innerRadius?: number\n): Array<{\n  clipPath: string;\n  color?: ColorProps['color'];\n  section: Sector;\n  size: string;\n}> {\n  const {\n    min,\n    max,\n    startAngle,\n    angleExtent,\n    size,\n    section,\n    isRtl,\n    innerRadius: innerDim\n  } = meterInfo;\n  const trackSize = `calc(${getTrackSize(size, innerRadius)})`;\n  const thresholdProps = [];\n  const validThresholds = thresholds\n    .filter((threshold: Threshold) => threshold.max > min && threshold.max <= max)\n    .sort((a, b) => a.max - b.max);\n  const numOfThreshold = validThresholds.length;\n  for (let i = 0; i < numOfThreshold; i++) {\n    const threshold = validThresholds[i];\n    const startValue = i === 0 ? min : validThresholds[i - 1].max;\n    const diff = i === 0 ? threshold.max : threshold.max - validThresholds[i - 1].max;\n\n    let thresholdStart = getStartAngleForValue(\n      startValue,\n      min,\n      max,\n      startAngle,\n      angleExtent,\n      isRtl\n    );\n    let thresholdExtent = getAngleExtentFromDelta(diff, min, max, angleExtent);\n\n    const { startOffset, extentOffset } = getThresholdsBuffer(\n      innerDim,\n      angleExtent,\n      i === 0,\n      threshold.max === max,\n      isRtl\n    );\n    const clipPath = getClipPath(\n      thresholdStart + startOffset,\n      thresholdExtent + extentOffset,\n      isRtl,\n      section\n    );\n\n    thresholdProps.push({\n      clipPath,\n      color: getDvtThresholdColor(threshold.color),\n      size: trackSize,\n      section\n    });\n\n    if (i === numOfThreshold - 1 && threshold.max < max && isTrackRendered) {\n      thresholdStart = thresholdStart + (isRtl ? 1 : -1) * thresholdExtent;\n      thresholdExtent = getAngleExtentFromDelta(max - threshold.max, min, max, angleExtent);\n      const { startOffset, extentOffset } = getThresholdsBuffer(\n        innerDim,\n        angleExtent,\n        false,\n        true,\n        isRtl\n      );\n      thresholdProps.push({\n        clipPath: getClipPath(\n          thresholdStart + startOffset,\n          thresholdExtent + extentOffset,\n          isRtl,\n          section\n        ),\n        color: trackColor,\n        size: trackSize,\n        section\n      });\n    }\n  }\n  return thresholdProps;\n}\n\n/**\n * Returns the calculated props for CircularReferenceLine.\n * @param meterInfo MeterInfo object containing info about the meter circle.\n * @param refLine The CircularRefLine object\n * @param innerRadius The innerRadius of the meter circle.\n * @returns An bject with calculated props for CircularReferenceLine.\n */\nexport function getReferenceLinesProps(\n  meterInfo: MeterInfo,\n  refLine: CircularRefLine,\n  innerRadius?: number\n): {\n  radius: string;\n  length: string;\n  angle: number;\n  color?: ColorProps['color'];\n} {\n  const { min, max, startAngle, angleExtent, size, isRtl } = meterInfo;\n  return {\n    radius: getInnerRadius(size, innerRadius),\n    length: getRefLineLength(size, innerRadius),\n    angle: getStartAngleForValue(refLine.value, min, max, startAngle, angleExtent, isRtl),\n    color: refLine.color\n  };\n}\n\n/**\n * Returns the calculated props for InnerCircle representing the track.\n * @param meterInfo MeterInfo object containing info about the meter circle.\n * @param trackColor The color of the track.\n * @param istrackRendered Whether the track is rendered.\n * @param thresholdDisplay Specifies whether the current threshold is displayed in the track, on the indicator, or if all thresholds are displayed in the track.\n * @param innerRadius The innerRadius of the meter circle.\n * @param thresholds thresholds array of the meter circle.\n * @returns An object with calculated props for InnerCircle that represents the track.\n */\nexport function getTrackProps(\n  meterInfo: MeterInfo,\n  isTrackRendered: boolean,\n  thresholdDisplay: ThresholdDisplay,\n  trackColor?: ColorProps['color'],\n  innerRadius?: number,\n  thresholds?: Threshold[]\n): {\n  section: Sector;\n  color?: ColorProps['color'];\n  clipPath: string;\n  size: string;\n} {\n  const { startAngle, angleExtent, size, section, isRtl } = meterInfo;\n  const color = !isTrackRendered\n    ? 'transparent'\n    : thresholdDisplay === 'all' && thresholds\n    ? `${colorSchemeVars.dvt.contrastLine}`\n    : trackColor;\n  return {\n    section,\n    color,\n    clipPath: getClipPath(startAngle, angleExtent, isRtl, section),\n    size: `calc(${getTrackSize(size, innerRadius)})`\n  };\n}\n\n/**\n * Returns the calculated props for InnerCircle representing the indicator.\n * @param meterInfo MeterInfo object containing info about the meter circle.\n * @param indicatorSize Relative thickness of the indicator to the track.\n * @param innerRadius The innerRadius of the meter circle.\n * @returns An object with calculated props for InnerCircle that represents the indicator.\n */\nexport function getIndicatorProps(\n  meterInfo: MeterInfo,\n  indicatorSize: number,\n  innerRadius?: number\n): {\n  section: Sector;\n  width: string;\n  height: string;\n  size: string;\n  clipPath: string;\n} {\n  const { value, min, max, startAngle, angleExtent, size, section, isRtl } = meterInfo;\n  const valueExtent = ((value - min) * angleExtent) / (max - min);\n  const validIndicatorSize = Math.min(Math.max(0, indicatorSize), 1);\n  const isHoriz = section === 'left' || section === 'right';\n  const isVert = section === 'top' || section === 'bottom';\n  const valueTrackSize = `calc(${getTrackSize(size, innerRadius)} * ${validIndicatorSize})`;\n  const diameter = `${getSizeVar(size)} - ((1 - ${validIndicatorSize}) * ${getTrackSize(\n    size,\n    innerRadius\n  )})`;\n  const radius = `(${diameter}) / 2`;\n  return {\n    section,\n    width: isHoriz ? `calc(${radius})` : `calc(${diameter})`,\n    height: isVert ? `calc(${radius})` : `calc(${diameter})`,\n    size: valueTrackSize,\n    clipPath: getClipPath(startAngle, valueExtent, isRtl, section)\n  };\n}\n\n/**\n * Returns the threshold offsets to create the whitespace between the thresholds.\n * @param innerRadius The innerRadius of the meter circle.\n * @param angleExtent The angleExtent of the meter circle.\n * @param firstThreshold Whether the current threshold is the first threshold.\n * @param lastThreshold  Whether the current threshold is the last threshold.\n * @param isRtl Whether the document reading mode is 'rtl'\n * @returns The offsets (startOffset and extentOffset) to add to calculated threshold startAngle and threhsold extent.\n */\nfunction getThresholdsBuffer(\n  innerRadius: number,\n  angleExtent: number,\n  firstThreshold: boolean,\n  lastThreshold: boolean,\n  isRtl: boolean\n): {\n  startOffset: number;\n  extentOffset: number;\n} {\n  if (!innerRadius) {\n    return { startOffset: 0, extentOffset: 0 };\n  }\n  const offset = 360 / (2 * Math.PI * innerRadius);\n  let startOffset = (offset / 2) * (isRtl ? 1 : -1);\n  let extentOffset = -1 * offset;\n\n  if (firstThreshold && angleExtent < 360) {\n    startOffset = 0;\n    extentOffset = -0.5 * offset;\n  }\n\n  if (lastThreshold && angleExtent < 360) {\n    extentOffset = -0.5 * offset;\n  }\n  return { startOffset, extentOffset };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { CircleWrapper, CircleInner } from '../PRIVATE_Meter';\nimport { CircularReferenceLine } from './CircularReferenceLine';\n\nimport {\n  validateRange,\n  getTrackAndIndicatorColor,\n  getMeterAriaProps,\n  getCircleSection\n} from '../utils/PRIVATE_meterUtils';\n\nimport { getDimensions, getValue, getCenterContext } from './CircleMeterUtils';\n\nimport {\n  getIndicatorProps,\n  getTrackProps,\n  getThresholdsProps,\n  getReferenceLinesProps,\n  MeterInfo\n} from './LayoutUtils';\n\nimport {\n  usePointerEvents,\n  useKeyboardEvents,\n  useMeterDatatip\n} from '../hooks/PRIVATE_useDvtMeterEvents';\n\nimport { MeterProps, CircularRefLine } from './MeterCircle.types';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { MeterCircleStyles, MeterCircleVariantOptions } from './themes/MeterCircleStyles.css';\nimport { MeterCircleRedwoodTheme } from './themes/redwood/MeterCircleTheme';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\n\n/**\n * A Meter circle displays information graphically in a circular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function MeterCircle({\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  size,\n  startAngle = 90,\n  angleExtent = 360,\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  testId,\n  ...props\n}: MeterProps) {\n  const testIdProps = useTestId(testId);\n\n  validateRange(min, max, value, step);\n  const currentInputRef = useRef<number>();\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const section = getCircleSection(startAngle, angleExtent, isRtl);\n  const dimensionsRef = useRef(getDimensions(null, section));\n  const circleWrapperRef = useRef<HTMLDivElement>(null);\n  const [isDimsReady, setDimsReady] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (props.onCommit || props.onInput || props.children) {\n      dimensionsRef.current = getDimensions(circleWrapperRef.current, section);\n      setDimsReady(true);\n    }\n  }, [size, section, props.onCommit, props.onInput, props.children]);\n\n  const getValueFromEvent = (event: PointerEvent) => {\n    const circleContainer = circleWrapperRef.current;\n    if (event.target == circleContainer) {\n      return getValue(\n        event,\n        min,\n        max,\n        step,\n        dimensionsRef,\n        startAngle,\n        angleExtent,\n        section,\n        isRtl\n      );\n    }\n    return;\n  };\n\n  const isPointerActiveRef = useRef(false);\n\n  const pointerEventsProps = usePointerEvents(\n    value,\n    getValueFromEvent,\n    circleWrapperRef,\n    currentInputRef,\n    isPointerActiveRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    min,\n    max,\n    step,\n    currentInputRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { datatipContent, datatipProps } = useMeterDatatip(\n    value,\n    isPointerActiveRef,\n    props.datatip,\n    props['aria-describedby']\n  );\n\n  const ariaProps = getMeterAriaProps(\n    value,\n    min,\n    max,\n    props['aria-label'],\n    props['aria-labelledby'],\n    props.thresholds\n  );\n  const mergedProps = mergeProps(pointerEventsProps, keyboardEventsProps, datatipProps, ariaProps);\n\n  const { trackColor, indicatorColor } = getTrackAndIndicatorColor(\n    value,\n    thresholdDisplay,\n    props.trackColor,\n    props.indicatorColor,\n    props.thresholds\n  );\n\n  const orientation =\n    section === 'bottom' || section === 'top'\n      ? 'Horizontal'\n      : section === 'left' || section === 'right'\n      ? 'Vertical'\n      : 'Full';\n\n  const meterInfo = {\n    min,\n    max,\n    value,\n    startAngle,\n    angleExtent,\n    size,\n    section,\n    isRtl,\n    innerRadius: dimensionsRef.current.innerRadius\n  } as MeterInfo;\n  const isInteractive = props.onCommit || props.onInput;\n\n  const { classes, styles } = useComponentTheme<MeterCircleVariantOptions, MeterCircleStyles>(\n    MeterCircleRedwoodTheme,\n    {\n      size,\n      interaction: isInteractive ? 'isInteractive' : undefined\n    }\n  );\n\n  const { isTabbable } = useTabbableMode();\n  const centerContext = getCenterContext(dimensionsRef, section);\n\n  return (\n    <>\n      <div\n        class={classNames([classes])}\n        tabIndex={!isTabbable ? -1 : 0}\n        {...testIdProps}\n        {...mergedProps}>\n        <CircleWrapper\n          wrapperRef={circleWrapperRef}\n          class={classNames([\n            styles.circleWrapperBaseStyle,\n            props.referenceLines && props.referenceLines.length > 0\n              ? size && styles[`${size}${section}Style`]\n              : '',\n            styles[`meterCircle${orientation}SizeStyle`]\n          ])}>\n          <CircleInner\n            class={classNames([styles.circleTrackBaseStyle, styles[`${section}Style`]])}\n            {...getTrackProps(\n              meterInfo,\n              isTrackRendered,\n              thresholdDisplay,\n              trackColor,\n              props.innerRadius,\n              props.thresholds\n            )}\n          />\n          {thresholdDisplay === 'all' &&\n            props.thresholds &&\n            getThresholdsProps(\n              meterInfo,\n              props.thresholds,\n              isTrackRendered,\n              trackColor,\n              props.innerRadius\n            ).map((threshold) => {\n              return (\n                <CircleInner\n                  class={classNames([styles.circleTrackBaseStyle, styles[`${section}Style`]])}\n                  {...threshold}\n                />\n              );\n            })}\n\n          <CircleInner\n            color={indicatorColor}\n            class={classNames([\n              styles.circleValueBaseStyle,\n              styles[`circleValue${section}Style`],\n              styles[`${section}Style`]\n            ])}\n            {...getIndicatorProps(meterInfo, indicatorSize, props.innerRadius)}\n          />\n          {props.referenceLines?.map((refLine: CircularRefLine) => {\n            return (\n              <CircularReferenceLine\n                {...getReferenceLinesProps(meterInfo, refLine, props.innerRadius)}\n                section={section}\n              />\n            );\n          })}\n          {isDimsReady && props.children && centerContext && (\n            <div class={classNames([styles.meterCircleCenterContent])}>\n              {props.children(centerContext)}\n            </div>\n          )}\n        </CircleWrapper>\n      </div>\n      {datatipContent}\n    </>\n  );\n}\n"],"names":["CircularReferenceLine","color","angle","radius","length","section","centerCoord","getCenterCoord","yOffset","y","Math","sin","PI","xOffset","x","cos","_jsx","class","classNames","styles","referenceBaseLineStyle","undefined","referenceBorderStyle","style","left","top","width","transform","backgroundColor","getDvtThresholdColor","getDimensions","element","height","innerRadius","outerRadius","circleTrack","children","rect","getBoundingClientRect","round","getInnerAndOuterRadius","clientWidth","clientHeight","getAngleExtentFromDelta","delta","min","max","angleExtent","getStartAngleForValue","value","startAngle","isRtl","getSizeVar","size","meterCircleVars","sizes","getTrackSizeVar","trackSizes","trackSize","getInnerRadius","getTrackSize","getRefLineLength","xUnits","getThresholdsProps","meterInfo","thresholds","isTrackRendered","trackColor","innerDim","thresholdProps","validThresholds","filter","threshold","sort","a","b","numOfThreshold","i","startValue","diff","thresholdStart","thresholdExtent","startOffset","extentOffset","getThresholdsBuffer","clipPath","getClipPath","push","getReferenceLinesProps","refLine","getTrackProps","thresholdDisplay","colorSchemeVars","dvt","contrastLine","getIndicatorProps","indicatorSize","valueExtent","validIndicatorSize","isHoriz","isVert","valueTrackSize","diameter","firstThreshold","lastThreshold","offset","step","testId","props","testIdProps","useTestId","validateRange","currentInputRef","useRef","direction","useUser","getCircleSection","dimensionsRef","circleWrapperRef","isDimsReady","setDimsReady","useState","useEffect","onCommit","onInput","current","isPointerActiveRef","pointerEventsProps","usePointerEvents","event","circleContainer","target","dims","center","convertToPolar","offsetX","offsetY","positiveAngle","getPositiveAngle","val","clockwiseArc","getValue","keyboardEventsProps","useKeyboardEvents","datatipContent","datatipProps","useMeterDatatip","datatip","ariaProps","getMeterAriaProps","mergedProps","mergeProps","indicatorColor","getTrackAndIndicatorColor","orientation","isInteractive","classes","useComponentTheme","MeterCircleRedwoodTheme","interaction","isTabbable","useTabbableMode","centerContext","cx","cy","innerX","innerY","innerW","innerH","outerX","outerY","outerW","outerH","sqrt","outerBounds","innerBounds","getCenterContext","_jsxs","jsxs","_Fragment","Fragment","tabIndex","CircleWrapper","wrapperRef","circleWrapperBaseStyle","referenceLines","CircleInner","circleTrackBaseStyle","map","jsx","circleValueBaseStyle","meterCircleCenterContent"],"mappings":"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"}