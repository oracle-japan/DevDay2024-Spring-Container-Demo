{"version":3,"file":"Toolbar.spec.js","sources":["../../../../src/UNSAFE_Toolbar/tests/Toolbar.spec.tsx"],"sourcesContent":["import { fireEvent, render, screen } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { Toolbar } from '../Toolbar';\nimport { ToolbarSeparator } from '../ToolbarSeparator';\nimport { BaseButton } from '../../UNSAFE_BaseButton';\nimport { Button } from '../../UNSAFE_Button';\nimport { MenuButton } from '../../UNSAFE_MenuButton';\nimport { SplitMenuButton } from '../../UNSAFE_SplitMenuButton';\nimport userEvent from '@testing-library/user-event';\n\ndescribe('Test Toolbar component', () => {\n  const sampleToolbar = (\n    <Toolbar>\n      <BaseButton></BaseButton>\n      <Button isDisabled={true}></Button>\n      <ToolbarSeparator />\n      <MenuButton></MenuButton>\n      <SplitMenuButton></SplitMenuButton>\n    </Toolbar>\n  );\n\n  it('Checks for Toolbar and amount of Toolbar content', async () => {\n    render(sampleToolbar);\n    const toolbar = screen.getAllByRole('toolbar')[0];\n    const content = toolbar?.childNodes;\n\n    expect(toolbar).not.to.be.null;\n    expect(content?.length).equals(5);\n  });\n\n  it('Uses left/right arrow keys to navigate, skipping disabled content and dividers', async () => {\n    render(sampleToolbar);\n    const toolbar = screen.getAllByRole('toolbar')[0];\n    const content = toolbar?.childNodes;\n    const firstEnabledElement = content?.[0] as HTMLElement;\n    const secondEnabledElement = content?.[3] as HTMLElement;\n\n    await userEvent.tab();\n    expect(document.activeElement).equals(firstEnabledElement);\n\n    expect(firstEnabledElement.getAttribute('tabIndex')).equals('0');\n    fireEvent.keyDown(firstEnabledElement, { key: 'ArrowRight', code: 'ArrowRight', charCode: 39 });\n    expect(document.activeElement).equals(secondEnabledElement);\n    expect(secondEnabledElement.getAttribute('tabIndex')).equals('0');\n    expect(firstEnabledElement.getAttribute('tabIndex')).equals('-1');\n    fireEvent.keyDown(secondEnabledElement, { key: 'ArrowLeft', code: 'ArrowLeft', charCode: 37 });\n    expect(document.activeElement).equals(firstEnabledElement);\n    expect(firstEnabledElement.getAttribute('tabIndex')).equals('0');\n    expect(secondEnabledElement.getAttribute('tabIndex')).equals('-1');\n  });\n});\n"],"names":["describe","sampleToolbar","_jsxs","jsxs","Toolbar","children","_jsx","BaseButton","Button","isDisabled","jsx","ToolbarSeparator","MenuButton","SplitMenuButton","it","async","render","toolbar","screen","getAllByRole","content","childNodes","expect","not","to","be","null","length","equals","firstEnabledElement","secondEnabledElement","userEvent","tab","document","activeElement","getAttribute","fireEvent","keyDown","key","code","charCode"],"mappings":"wqLAUAA,SAAS,0BAA0B,KACjC,MAAMC,EACJC,EAAAC,KAACC,UAAO,CAAAC,SAAA,CACNC,EAAAA,IAACC,EAAUA,WAAc,CAAA,GACzBD,EAAAA,IAACE,EAAMA,QAACC,YAAY,IACpBH,EAAAI,IAACC,EAAgBA,iBAAA,IACjBL,EAACI,IAAAE,EAAUA,WAAc,IACzBN,EAACI,IAAAG,EAAeA,gBAAmB,CAAA,MAIvCC,GAAG,oDAAoDC,UACrDC,EAAMA,OAACf,GACP,MAAMgB,EAAUC,EAAAA,OAAOC,aAAa,WAAW,GACzCC,EAAUH,GAASI,WAEzBC,EAAMA,OAACL,GAASM,IAAIC,GAAGC,GAAGC,KAC1BJ,EAAAA,OAAOF,GAASO,QAAQC,OAAO,EAAE,IAGnCd,GAAG,kFAAkFC,UACnFC,EAAMA,OAACf,GACP,MAAMgB,EAAUC,EAAAA,OAAOC,aAAa,WAAW,GACzCC,EAAUH,GAASI,WACnBQ,EAAsBT,IAAU,GAChCU,EAAuBV,IAAU,SAEjCW,GAAAA,QAAUC,MAChBV,EAAAA,OAAOW,SAASC,eAAeN,OAAOC,GAEtCP,EAAMA,OAACO,EAAoBM,aAAa,aAAaP,OAAO,KAC5DQ,EAAAA,UAAUC,QAAQR,EAAqB,CAAES,IAAK,aAAcC,KAAM,aAAcC,SAAU,KAC1FlB,EAAAA,OAAOW,SAASC,eAAeN,OAAOE,GACtCR,EAAMA,OAACQ,EAAqBK,aAAa,aAAaP,OAAO,KAC7DN,EAAMA,OAACO,EAAoBM,aAAa,aAAaP,OAAO,MAC5DQ,EAAAA,UAAUC,QAAQP,EAAsB,CAAEQ,IAAK,YAAaC,KAAM,YAAaC,SAAU,KACzFlB,EAAAA,OAAOW,SAASC,eAAeN,OAAOC,GACtCP,EAAMA,OAACO,EAAoBM,aAAa,aAAaP,OAAO,KAC5DN,EAAMA,OAACQ,EAAqBK,aAAa,aAAaP,OAAO,KAAK,GAClE"}