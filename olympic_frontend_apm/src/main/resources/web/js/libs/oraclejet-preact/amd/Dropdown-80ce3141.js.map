{"version":3,"file":"Dropdown-80ce3141.js","sources":["../../src/UNSAFE_Dropdown/Dropdown.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, RefObject, JSX } from 'preact';\nimport { useCallback, useRef } from 'preact/hooks';\n\nimport { Floating } from '../UNSAFE_Floating';\nimport { Layer } from '../UNSAFE_Layer';\nimport { KEYS } from '../utils/PRIVATE_keyboardUtils';\n\nimport { dropdownStyles } from './themes/dropdownStyles.css';\nimport { useOutsideMousedown } from '../hooks/PRIVATE_useOutsideMousedown';\n\ntype FloatingProps = ComponentProps<typeof Floating>;\n\n//Same as Menu onClose, only difference is mouseDown instead of outside click\n//Once menu consumes dropdown is going to start using mouseDown\ntype CloseDetail = { reason: 'dismissed' } | { reason: 'outsideMousedown'; target: Element };\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'children'>;\n\ntype Props = IntrinsicProps & {\n  /**\n   *Specifies whether Dropdown is open.\n   */\n  isOpen?: boolean;\n  /**\n   * Trigger element reference.\n   */\n  anchorRef: FloatingProps['anchorRef'];\n  /**\n   * Id of the dropdown container.\n   * Used usually for accesibility reasons.\n   */\n  id?: string;\n  /**\n   * Called when dropdown is supposed to be closed.\n   * Called when user tab/esc or mouseDown outside the dropdown.\n   */\n  onClose?: (detail: CloseDetail) => void;\n  /**\n   *Min width represented in pixels of the dropdown container.\n   */\n  minWidth?: number;\n  /**\n   * Placement of the floating element relative to its reference element.\n   */\n  placement?: FloatingProps['placement'];\n  /**\n   * Offset displaces the floating element from its core placement along the specified axes.\n   */\n  offset?: FloatingProps['offsetValue'];\n  /**\n   * Triggered when placement or coordinates are changed after collision is detected.\n   */\n  onPosition?: FloatingProps['onPosition'];\n  /**\n   * Specifies the flipping behavior along the respective axis.\n   */\n  flipOptions?: FloatingProps['flipOptions'];\n  /**\n   * Specifies the resizing behaviour for max-height and max-width of the floating component.\n   */\n  sizeOptions?: FloatingProps['sizeOptions'];\n};\n\nconst DEFAULT_PLACEMENT = 'bottom-start';\nconst DEFAULT_OFFSET = { mainAxis: 4, crossAxis: 0 };\nconst DEFAULT_SIZE_OPTIONS = { isMaxWidthAdjusted: true, isMaxHeightAdjusted: true };\n\n//TODO: Add animation to dropdown. JET-62628\n//TODO: Investigate best approach to have different virtual padding depending on the position and implement it.JET-57950\nexport function Dropdown({\n  isOpen = false,\n  anchorRef,\n  children,\n  id,\n  onClose,\n  minWidth,\n  placement = DEFAULT_PLACEMENT,\n  offset = DEFAULT_OFFSET,\n  onPosition,\n  flipOptions,\n  sizeOptions = DEFAULT_SIZE_OPTIONS\n}: Props) {\n  const dropdownRef = useRef(null);\n\n  const handleMousedownClose = useCallback(\n    (event: MouseEvent) => {\n      onClose?.({ reason: 'outsideMousedown', target: event.target as Element });\n    },\n    [onClose]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.defaultPrevented) {\n        return;\n      }\n      switch (event.code) {\n        case KEYS.ESC:\n        case KEYS.TAB:\n          onClose?.({ reason: 'dismissed' });\n          break;\n        default:\n          break;\n      }\n    },\n    [onClose]\n  );\n\n  // use the mousedown event to be consistent with legacy JET\n  useOutsideMousedown({\n    isDisabled: false,\n    ref: [dropdownRef],\n    handler: handleMousedownClose\n  });\n\n  return (\n    <>\n      {isOpen ? (\n        <Layer logicalParentRef={anchorRef as RefObject<Element>}>\n          <Floating\n            anchorRef={anchorRef}\n            ref={dropdownRef}\n            placement={placement}\n            flipOptions={flipOptions}\n            shiftOptions={{\n              mainAxis: false,\n              crossAxis: false\n            }}\n            sizeOptions={sizeOptions}\n            offsetValue={offset}\n            onPosition={onPosition}>\n            <div\n              id={id}\n              class={dropdownStyles.base}\n              style={{ minWidth: `${minWidth || 0}px` }}\n              onKeyDown={handleKeyDown}>\n              {children}\n            </div>\n          </Floating>\n        </Layer>\n      ) : null}\n    </>\n  );\n}\n"],"names":["DEFAULT_OFFSET","mainAxis","crossAxis","DEFAULT_SIZE_OPTIONS","isMaxWidthAdjusted","isMaxHeightAdjusted","isOpen","anchorRef","children","id","onClose","minWidth","placement","offset","onPosition","flipOptions","sizeOptions","dropdownRef","useRef","handleMousedownClose","useCallback","event","reason","target","handleKeyDown","defaultPrevented","code","KEYS","ESC","TAB","useOutsideMousedown","isDisabled","ref","handler","_jsx","jsx","_Fragment","Layer","logicalParentRef","Floating","shiftOptions","offsetValue","class","dropdownStyles","base","style","onKeyDown"],"mappings":"gSAuEA,MACMA,EAAiB,CAAEC,SAAU,EAAGC,UAAW,GAC3CC,EAAuB,CAAEC,oBAAoB,EAAMC,qBAAqB,cAI9D,UAASC,OACvBA,GAAS,EAAKC,UACdA,EAASC,SACTA,EAAQC,GACRA,EAAEC,QACFA,EAAOC,SACPA,EAAQC,UACRA,EAbwB,eAaKC,OAC7BA,EAASb,EAAcc,WACvBA,EAAUC,YACVA,EAAWC,YACXA,EAAcb,IAEd,MAAMc,EAAcC,SAAO,MAErBC,EAAuBC,eAC1BC,IACCX,IAAU,CAAEY,OAAQ,mBAAoBC,OAAQF,EAAME,QAAoB,GAE5E,CAACb,IAGGc,EAAgBJ,eACnBC,IACC,IAAIA,EAAMI,iBAGV,OAAQJ,EAAMK,MACZ,KAAKC,EAAAA,KAAKC,IACV,KAAKD,EAAIA,KAACE,IACRnB,IAAU,CAAEY,OAAQ,cAIvB,GAEH,CAACZ,IAUH,OANAoB,sBAAoB,CAClBC,YAAY,EACZC,IAAK,CAACf,GACNgB,QAASd,IAITe,EAAAC,IAAAC,WAAA,CAAA5B,SACGF,EACC4B,EAACC,IAAAE,SAAMC,iBAAkB/B,EAA+BC,SACtD0B,MAACK,EAAAA,SAAQ,CACPhC,UAAWA,EACXyB,IAAKf,EACLL,UAAWA,EACXG,YAAaA,EACbyB,aAAc,CACZvC,UAAU,EACVC,WAAW,GAEbc,YAAaA,EACbyB,YAAa5B,EACbC,WAAYA,WACZoB,EAAAA,IACE,MAAA,CAAAzB,GAAIA,EACJiC,MAAOC,EAAcA,eAACC,KACtBC,MAAO,CAAElC,SAAU,GAAGA,GAAY,OAClCmC,UAAWtB,WACVhB,QAIL,MAGV"}