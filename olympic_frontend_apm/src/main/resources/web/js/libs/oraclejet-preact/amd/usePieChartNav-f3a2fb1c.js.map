{"version":3,"file":"usePieChartNav-f3a2fb1c.js","sources":["../../src/hooks/PRIVATE_usePieChartNav/usePieChartNav.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useState } from \"preact/hooks\";\nimport { getRandomId } from \"../../utils/PRIVATE_visLayoutUtils\";\nimport { cancelEvent } from \"../../utils/UNSAFE_visUtils\";\n\nexport type ItemInfo = {\n    isFocusVisible?: boolean;\n    itemIndex: number;\n};\n\ntype Props = {\n    getNextChartItem: (\n        info: ItemInfo,\n        arrow: 'ArrowLeft' | 'ArrowRight' | 'ArrowDown' | 'ArrowUp'\n    ) => ItemInfo\n};\n\nexport const getItemInfo = (event: Event) => {\n    const itemIndex = (event.target as HTMLElement).dataset['ojItemIndex'];\n    if (itemIndex) {\n        return {\n            itemIndex: parseInt(itemIndex, 10),\n        };\n    }\n    return;\n};\n\n/**\n * Hook to handle chart navigation. This can be shared between the pie, funnel and pyramid chart\n * as they follow similar navigation pattern.\n * TODO: rename \n */\nexport function usePieChartNav({\n    getNextChartItem\n}: Props) {\n\n    const [focusedItemInfo, setfocusedItemInfo] = useState<ItemInfo>({\n        itemIndex: 0\n    });\n\n    const [hoveredItemInfo, setHoveredItemInfo] = useState<ItemInfo>();\n    const activeId = useRef<string>();\n\n    const updateFocusedItemInfo = (itemInfo: ItemInfo) => {\n        if (\n            itemInfo.itemIndex !== focusedItemInfo.itemIndex ||\n            itemInfo.isFocusVisible !== focusedItemInfo.isFocusVisible\n        ) {\n            setfocusedItemInfo(itemInfo);\n            setHoveredItemInfo(undefined);\n        }\n    };\n\n    const onPointerUp = (event: PointerEvent) => {\n        const info = getItemInfo(event);\n        if (info) {\n            updateFocusedItemInfo({ ...info, isFocusVisible: false });\n        }\n    };\n\n    const onPointerMove = (event: PointerEvent) => {\n        const info = getItemInfo(event);\n        if (info?.itemIndex != hoveredItemInfo?.itemIndex) {\n            setHoveredItemInfo(info);\n            activeId.current = getRandomId();\n        }\n    }\n\n    const onKeyDown = (event: KeyboardEvent) => {\n        const key = event.key;\n        switch (key) {\n            case 'Tab':\n                return;\n            case 'ArrowDown': {\n                const info = getNextChartItem(focusedItemInfo, 'ArrowDown');\n                updateFocusedItemInfo({ ...info, isFocusVisible: true });\n                cancelEvent(event);\n                break;\n            }\n            case 'ArrowUp': {\n                const info = getNextChartItem(focusedItemInfo, 'ArrowUp');\n                updateFocusedItemInfo({ ...info, isFocusVisible: true });\n                cancelEvent(event);\n                break;\n            }\n            case 'ArrowLeft': {\n                const info = getNextChartItem(focusedItemInfo, 'ArrowLeft');\n                updateFocusedItemInfo({ ...info, isFocusVisible: true });\n                cancelEvent(event);\n                break;\n            }\n            case 'ArrowRight': {\n                const info = getNextChartItem(focusedItemInfo, 'ArrowRight');\n                updateFocusedItemInfo({ ...info, isFocusVisible: true });\n                cancelEvent(event);\n                break;\n            }\n        }\n        activeId.current = getRandomId();\n    };\n\n    const onKeyUp = (event: KeyboardEvent) => {\n        const key = event.key;\n        if (key === 'Tab') {\n            updateFocusedItemInfo({ ...focusedItemInfo, isFocusVisible: true });\n        }\n    };\n\n    const onBlur = () => {\n        updateFocusedItemInfo({\n            ...focusedItemInfo,\n            isFocusVisible: false\n        });\n    };\n\n    return {\n        focusedItemInfo,\n        hoveredItemInfo,\n        activeId: activeId.current,\n        navProps: {\n            onKeyDown,\n            onKeyUp,\n            onPointerUp,\n            onBlur,\n            onPointerMove\n        }\n    }\n}\n"],"names":["getItemInfo","event","itemIndex","target","dataset","parseInt","getNextChartItem","focusedItemInfo","setfocusedItemInfo","useState","hoveredItemInfo","setHoveredItemInfo","activeId","useRef","updateFocusedItemInfo","itemInfo","isFocusVisible","undefined","current","navProps","onKeyDown","key","info","cancelEvent","getRandomId","onKeyUp","onPointerUp","onBlur","onPointerMove"],"mappings":"4IAwBO,MAAMA,EAAeC,IACxB,MAAMC,EAAaD,EAAME,OAAuBC,QAAqB,YACrE,GAAIF,EACA,MAAO,CACHA,UAAWG,SAASH,EAAW,IAGhC,mBAQK,UAAeI,iBAC3BA,IAGA,MAAOC,EAAiBC,GAAsBC,WAAmB,CAC7DP,UAAW,KAGRQ,EAAiBC,GAAsBF,EAAQA,WAChDG,EAAWC,EAAAA,SAEXC,EAAyBC,IAEvBA,EAASb,YAAcK,EAAgBL,WACvCa,EAASC,iBAAmBT,EAAgBS,iBAE5CR,EAAmBO,GACnBJ,OAAmBM,GACtB,EAiEL,MAAO,CACHV,kBACAG,kBACAE,SAAUA,EAASM,QACnBC,SAAU,CACNC,UApDWnB,IAEf,OADYA,EAAMoB,KAEd,IAAK,MACD,OACJ,IAAK,YAAa,CACd,MAAMC,EAAOhB,EAAiBC,EAAiB,aAC/CO,EAAsB,IAAKQ,EAAMN,gBAAgB,IACjDO,EAAWA,YAACtB,GACZ,KACH,CACD,IAAK,UAAW,CACZ,MAAMqB,EAAOhB,EAAiBC,EAAiB,WAC/CO,EAAsB,IAAKQ,EAAMN,gBAAgB,IACjDO,EAAWA,YAACtB,GACZ,KACH,CACD,IAAK,YAAa,CACd,MAAMqB,EAAOhB,EAAiBC,EAAiB,aAC/CO,EAAsB,IAAKQ,EAAMN,gBAAgB,IACjDO,EAAWA,YAACtB,GACZ,KACH,CACD,IAAK,aAAc,CACf,MAAMqB,EAAOhB,EAAiBC,EAAiB,cAC/CO,EAAsB,IAAKQ,EAAMN,gBAAgB,IACjDO,EAAWA,YAACtB,GACZ,KACH,EAELW,EAASM,QAAUM,EAAAA,aAAa,EAuB5BC,QApBSxB,IAED,QADAA,EAAMoB,KAEdP,EAAsB,IAAKP,EAAiBS,gBAAgB,GAC/D,EAiBGU,YArEazB,IACjB,MAAMqB,EAAOtB,EAAYC,GACrBqB,GACAR,EAAsB,IAAKQ,EAAMN,gBAAgB,GACpD,EAkEGW,OAfO,KACXb,EAAsB,IACfP,EACHS,gBAAgB,GAClB,EAYEY,cAhEe3B,IACnB,MAAMqB,EAAOtB,EAAYC,GACrBqB,GAAMpB,WAAaQ,GAAiBR,YACpCS,EAAmBW,GACnBV,EAASM,QAAUM,EAAAA,cACtB,GA8DT"}