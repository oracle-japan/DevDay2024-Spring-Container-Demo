{"version":3,"file":"BaseCardViewTest-52c9476f.js","sources":["../../src/PRIVATE_BaseCardView/__tests__/testHelpers.tsx","../../src/PRIVATE_BaseCardView/__tests__/BaseCardViewTest.tsx"],"sourcesContent":["import { screen } from '@testing-library/preact';\nimport { VNode } from 'preact';\nimport { ListItemRendererContext, SelectionMode } from '../../UNSAFE_Collection';\nimport { ActionDetail } from '../../UNSAFE_BaseButton';\nimport { Avatar } from '../../UNSAFE_Avatar';\nimport { Button } from '../../UNSAFE_Button';\nimport { Text } from '../../UNSAFE_Text';\nimport { View } from '../../UNSAFE_View';\nimport { Employee } from '../__dev__/BaseCardViewData';\n\nexport type GenericCardGridProps = {\n  data: Employee[];\n  delay?: number;\n};\n\nexport type ActionCardGridProps = GenericCardGridProps & {\n  handleAction?: (details: ActionDetail) => void;\n  showButton?: boolean; // for testing invalid focusBehavior\n};\n\nexport type SelectionCardGridProps = GenericCardGridProps & {\n  selectionMode?: SelectionMode;\n  selectedKeys?: Set<Employee['id']>;\n};\n\nexport type TestComponentsProps = {\n  GenericCardGrid: (props: GenericCardGridProps) => VNode;\n  ActionCardGrid: (props: ActionCardGridProps) => VNode;\n  SelectionCardGrid: (props: SelectionCardGridProps) => VNode;\n} & Record<string, (props: any) => VNode>;\n\nexport const CardContent = ({\n  context,\n  showButton\n}: {\n  context: ListItemRendererContext<Employee['id'], Employee>;\n  showButton?: boolean;\n}) => {\n  return (\n    <View padding=\"4x\">\n      <Avatar initials={context.data.initials} size=\"xl\" />\n      <div style=\"margin-top: 15px;\">\n        <Text variant=\"primary\" size=\"md\" lineClamp={1}>\n          {context.data.name}\n        </Text>\n      </div>\n      <Text variant=\"secondary\" size=\"md\" lineClamp={1}>\n        {context.data.title}\n      </Text>\n      {showButton && (\n        <div style=\"margin-top: 5px;\">\n          <div style=\"margin-right: 5px; display: inline-block;\">\n            <Button variant=\"outlined\" size=\"md\" label=\"A\"></Button>\n          </div>\n          <div style=\"display: inline-block;\">\n            <Button variant=\"outlined\" size=\"md\" label=\"B\"></Button>\n          </div>\n        </div>\n      )}\n      {context.selector && (\n        <div style=\"position: relative; left: -13px\">{context.selector?.()}</div>\n      )}\n    </View>\n  );\n};\n\nexport const populateData = (count: number, isNumberKey?: boolean) =>\n  [...Array(count)].map(\n    (_, i) =>\n      ({\n        id: isNumberKey ? i : `${i}`,\n        name: `Employee ${i}`,\n        title: `Employee title ${i}`,\n        initials: `E${i}`\n      }) as Employee\n  );\n\nexport const getRoot = async () => {\n  return screen.findByRole('grid');\n};\n\nexport const getItems = async (role = 'row') => {\n  return screen.findAllByRole(role);\n};\n","import { render, waitFor } from '@testing-library/preact';\nimport userEvent from '@testing-library/user-event';\nimport { expect } from 'chai';\nimport { getRoot, getItems, populateData, TestComponentsProps } from './testHelpers';\n\nexport const testRender = ({\n  GenericCardGrid,\n  ActionCardGrid,\n  SelectionCardGrid,\n  ContentUpdatableCardGrid\n}: TestComponentsProps) => {\n  it('initial render', async function () {\n    const data = populateData(100);\n    render(<GenericCardGrid data={data}></GenericCardGrid>);\n    const items = await getItems('gridcell');\n    expect(items.length).eq(25);\n  });\n\n  it('checking key type - string key', async () => {\n    const data = populateData(3);\n    render(<GenericCardGrid data={data}></GenericCardGrid>);\n    const items = await getItems('gridcell');\n    expect((items[0] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[1] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[2] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n  });\n\n  it('checking key type - numeric key', async () => {\n    const data = populateData(3, true);\n    render(<GenericCardGrid data={data}></GenericCardGrid>);\n    const items = await getItems('gridcell');\n    expect((items[0] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[1] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[2] as HTMLElement).dataset['ojKeyType']).eq('number');\n  });\n\n  it('aria attributes - multiselectable and selected, selectionMode is none', async () => {\n    const data = populateData(2);\n    render(<SelectionCardGrid data={data}></SelectionCardGrid>);\n    const items = await getItems('gridcell');\n    const grid = await getRoot();\n\n    expect((grid as HTMLElement).getAttribute('aria-multiselectable')).eq(null);\n    expect((items[0] as HTMLElement).getAttribute('aria-selected')).eq(null);\n    expect((items[1] as HTMLElement).getAttribute('aria-selected')).eq(null);\n  });\n\n  it('aria attributes - multiselectable and selected, selectionMode is single', async () => {\n    const data = populateData(2);\n    render(\n      <SelectionCardGrid\n        data={data}\n        selectionMode={'single'}\n        selectedKeys={new Set(['1'])}></SelectionCardGrid>\n    );\n    const items = await getItems('gridcell');\n    const grid = await getRoot();\n\n    expect((grid as HTMLElement).getAttribute('aria-multiselectable')).eq('false');\n    expect((items[0] as HTMLElement).getAttribute('aria-selected')).eq('false');\n    expect((items[1] as HTMLElement).getAttribute('aria-selected')).eq('true');\n  });\n\n  it('aria attributes - multiselectable and selected, selectionMode is multiple', async () => {\n    const data = populateData(3);\n    render(\n      <SelectionCardGrid\n        data={data}\n        selectionMode={'multiple'}\n        selectedKeys={new Set(['1', '2'])}></SelectionCardGrid>\n    );\n    const items = await getItems('gridcell');\n    const grid = await getRoot();\n\n    expect((grid as HTMLElement).getAttribute('aria-multiselectable')).eq('true');\n    expect((items[0] as HTMLElement).getAttribute('aria-selected')).eq('false');\n    expect((items[1] as HTMLElement).getAttribute('aria-selected')).eq('true');\n    expect((items[2] as HTMLElement).getAttribute('aria-selected')).eq('true');\n  });\n\n  // skip this test in jest, only run it in karma mocha\n  if (typeof jest === typeof undefined) {\n    // because jest doesn't show grid layout, the number of focusable elements is not calculated correctly\n    it('content focusBehavior - valid case', async () => {\n      const data = populateData(3);\n      render(<ActionCardGrid data={data}></ActionCardGrid>);\n      const items = await getItems('gridcell');\n\n      await userEvent.tab();\n\n      await waitFor(() => {\n        expect(items[0].matches(':focus-within')).to.be.true;\n      });\n    });\n\n    it('content focusBehavior - invalid case', async () => {\n      const data = populateData(3);\n      render(<ActionCardGrid data={data} showButton={true}></ActionCardGrid>);\n      const grid = await getRoot();\n\n      await userEvent.tab();\n      await waitFor(() => {\n        expect(grid.matches(':focus')).to.be.true;\n      });\n    });\n  }\n\n  // JET-61732\n  it('memoization - update memoized children', async () => {\n    const data = populateData(3);\n    const { queryByTestId } = render(\n      <ContentUpdatableCardGrid data={data}></ContentUpdatableCardGrid>\n    );\n\n    const elem0 = queryByTestId(data[0].id) as HTMLElement;\n    const elem1 = queryByTestId(data[1].id) as HTMLElement;\n    const elem2 = queryByTestId(data[2].id) as HTMLElement;\n    expect(elem0?.innerHTML, 'the 1st item initial count should be 0').eq('0');\n    expect(elem1?.innerHTML, 'the 2nd item initial count should be 0').eq('0');\n    expect(elem2?.innerHTML, 'the 3rd item initial count should be 0').eq('0');\n\n    const button = queryByTestId('mybutton') as HTMLElement;\n    await userEvent.click(button);\n\n    expect(elem0?.innerHTML, 'the 1st item new count should be 1').eq('1');\n    expect(elem1?.innerHTML, 'the 2nd item new count should be 1').eq('1');\n    expect(elem2?.innerHTML, 'the 3rd item new count should be 1').eq('1');\n  });\n};\n"],"names":["populateData","count","isNumberKey","Array","map","_","i","id","name","title","initials","getRoot","async","screen","findByRole","getItems","role","findAllByRole","context","showButton","_jsxs","View","padding","children","_jsx","Avatar","data","size","style","Text","variant","lineClamp","jsx","jsxs","Button","label","selector","GenericCardGrid","ActionCardGrid","SelectionCardGrid","ContentUpdatableCardGrid","it","render","items","expect","length","eq","undefined","dataset","grid","getAttribute","selectionMode","selectedKeys","Set","jest","userEvent","tab","waitFor","matches","to","be","true","queryByTestId","elem0","elem1","elem2","innerHTML","button","click"],"mappings":"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"}