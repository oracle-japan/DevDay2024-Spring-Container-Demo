{"version":3,"file":"useResizeObserver-5de04057.js","sources":["../../src/hooks/UNSAFE_useResizeObserver/useResizeObserver.tsx"],"sourcesContent":["import { type Ref, useLayoutEffect } from 'preact/hooks';\n\n// Use a shared ResizeObserver to observe all components using this hook.\n// This is much more performant than using one ResizeObserver per element according to this\n// benchmark from 2017\n// https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n//\n// A more recent benchmark created in 2023 here https://jsfiddle.net/b6gfdh7k/8/ shows that\n// this is still the case across all browsers (though the performance gap is much smaller).\n\ntype UseResizeObserverCallback = (entry: ResizeObserverEntry) => void;\n\nclass SharedResizeObserver {\n  private readonly targetCallbacks: Map<Element, Set<UseResizeObserverCallback>>;\n  private readonly resizeObserver: ResizeObserver;\n\n  constructor() {\n    this.targetCallbacks = new Map();\n    this.resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        const callbacks = this.targetCallbacks.get(entry.target);\n        if (callbacks !== undefined) {\n          callbacks.forEach((cb) => cb(entry));\n        }\n      }\n    });\n  }\n\n  subscribe(target: Element, callback: UseResizeObserverCallback, options?: ResizeObserverOptions) {\n    const callbacks = this.targetCallbacks.get(target);\n    if (callbacks === undefined) {\n      this.targetCallbacks.set(target, new Set([callback]));\n      this.resizeObserver.observe(target, options);\n    } else {\n      callbacks.add(callback);\n    }\n  }\n\n  unsubscribe(target: Element, callback: UseResizeObserverCallback) {\n    const callbacks = this.targetCallbacks.get(target);\n    if (callbacks === undefined) return;\n\n    callbacks.delete(callback);\n\n    if (callbacks.size === 0) {\n      this.resizeObserver.unobserve(target);\n      this.targetCallbacks.delete(target);\n    }\n  }\n}\n\nconst sharedResizeObserver = new SharedResizeObserver();\n\ntype UseResizeObserverOptions = {\n  /**\n   * The ref to the target DOM element to observe.\n   */\n  ref: Ref<Element>;\n\n  /**\n   * A callback function to be called when the size of the observed element changes.\n   * If the provided callback triggers the consuming component to re-render, then\n   * it's important to pass the same instance of the callback function during each render\n   * to prevent infinite re-render loops. One way to achieve this is by using useCallback.\n   */\n  callback: (entry: ResizeObserverEntry) => void;\n\n  /**\n   * Configuration options for the ResizeObserver.\n   * If the consuming component re-renders due to resize changes, then\n   * it's important to pass the same instance of the options object during each render\n   * to prevent infinite re-render loops. One way to achieve this is by using useMemo.\n   */\n  resizeObserverOptions?: ResizeObserverOptions;\n};\n\n/**\n * A hook for observing and responding to changes to the size of a DOM element.\n * It utilizes a ResizeObserver to observe changes to the size of the specified element\n * and accepts a callback function to respond to these changes.\n */\nconst useResizeObserver = ({ ref, callback, resizeObserverOptions }: UseResizeObserverOptions) => {\n  useLayoutEffect(() => {\n    // Note ref may be undefined in the hooks storybook demo\n    if (!ref?.current) return;\n\n    const target = ref.current;\n    sharedResizeObserver.subscribe(target, callback, resizeObserverOptions);\n\n    return () => sharedResizeObserver.unsubscribe(target, callback);\n  }, [ref, callback, resizeObserverOptions]);\n};\n\nexport { useResizeObserver };\n"],"names":["sharedResizeObserver","constructor","this","targetCallbacks","Map","resizeObserver","ResizeObserver","entries","entry","callbacks","get","target","undefined","forEach","cb","subscribe","callback","options","set","Set","observe","add","unsubscribe","delete","size","unobserve","ref","resizeObserverOptions","useLayoutEffect","current"],"mappings":"8DAmDA,MAAMA,EAAuB,IAvC7B,MAIE,WAAAC,GACEC,KAAKC,gBAAkB,IAAIC,IAC3BF,KAAKG,eAAiB,IAAIC,gBAAgBC,IACxC,IAAK,MAAMC,KAASD,EAAS,CAC3B,MAAME,EAAYP,KAAKC,gBAAgBO,IAAIF,EAAMG,aAC/BC,IAAdH,GACFA,EAAUI,SAASC,GAAOA,EAAGN,IAEhC,IAEJ,CAED,SAAAO,CAAUJ,EAAiBK,EAAqCC,GAC9D,MAAMR,EAAYP,KAAKC,gBAAgBO,IAAIC,QACzBC,IAAdH,GACFP,KAAKC,gBAAgBe,IAAIP,EAAQ,IAAIQ,IAAI,CAACH,KAC1Cd,KAAKG,eAAee,QAAQT,EAAQM,IAEpCR,EAAUY,IAAIL,EAEjB,CAED,WAAAM,CAAYX,EAAiBK,GAC3B,MAAMP,EAAYP,KAAKC,gBAAgBO,IAAIC,QACzBC,IAAdH,IAEJA,EAAUc,OAAOP,GAEM,IAAnBP,EAAUe,OACZtB,KAAKG,eAAeoB,UAAUd,GAC9BT,KAAKC,gBAAgBoB,OAAOZ,IAE/B,uBAiCuB,EAAGe,MAAKV,WAAUW,4BAC1CC,EAAAA,iBAAgB,KAEd,IAAKF,GAAKG,QAAS,OAEnB,MAAMlB,EAASe,EAAIG,QAGnB,OAFA7B,EAAqBe,UAAUJ,EAAQK,EAAUW,GAE1C,IAAM3B,EAAqBsB,YAAYX,EAAQK,EAAS,GAC9D,CAACU,EAAKV,EAAUW,GAAuB"}