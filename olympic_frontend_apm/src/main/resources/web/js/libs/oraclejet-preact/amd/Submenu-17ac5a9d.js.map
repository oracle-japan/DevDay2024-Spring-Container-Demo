{"version":3,"file":"Submenu-17ac5a9d.js","sources":["../../src/UNSAFE_Menu/DropdownSubmenu.tsx","../../src/UNSAFE_Menu/SheetSubmenu.tsx","../../src/UNSAFE_Menu/Submenu.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from 'preact/compat';\n\nimport { DirectionalExpandArrowIcon } from '../PRIVATE_ThemedIcons/DirectionalExpandArrowIcon';\nimport { useId } from '../hooks/UNSAFE_useId';\n\nimport { BaseMenuItem } from './MenuItem';\nimport { DropdownMenu } from './DropdownMenu';\nimport { useMenuContainerContext } from './useMenuContainerContext';\nimport { SubmenuProps } from './Submenu';\n\nexport const DropdownSubmenu = ({ label, children }: SubmenuProps) => {\n  //Id of the submenu that will be used to connect via aria-owns, menuItem with its submenu\n  const submenuId = useId();\n\n  const preProcessedMenuItemID = useId();\n  //MenuItem id\n  const menuItemId = useMemo(\n    () => `oj-menu-item-${preProcessedMenuItemID}`,\n    [preProcessedMenuItemID]\n  );\n\n  const { changeKey, currentKey } = useMenuContainerContext();\n\n  const submenuMenuItemRef = useRef<HTMLAnchorElement | null>(null);\n  const dropdownSubmenuRef = useRef<HTMLDivElement | null>(null);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [currentFocus, setCurrentFocus] = useState<'menu' | 'firstItem' | 'none'>('none');\n\n  useEffect(() => {\n    if (menuItemId !== currentKey) {\n      setIsOpen(false);\n    }\n  }, [currentKey, menuItemId]);\n\n  //This function is used when pressing submenuitem and hovering over it\n  const openSubmenuAction = useCallback((e: Event) => {\n    submenuMenuItemRef.current?.focus();\n    //If not click/touch we set the focus on the first item\n    setIsOpen(true);\n    if (e.type === 'keyup') {\n      setCurrentFocus('firstItem');\n    } else {\n      setCurrentFocus('none');\n    }\n  }, []);\n\n  //TODO: There is a bug in a Icon, once that bug is solved we have to check this again. JET-56980\n  const hoverStatus = useRef<{ recentClose: boolean; pendingUnhover: boolean }>({\n    recentClose: false,\n    pendingUnhover: false\n  });\n\n  return (\n    <>\n      <BaseMenuItem\n        id={menuItemId}\n        submenuId={submenuId}\n        ref={submenuMenuItemRef}\n        label={label}\n        endIcon={<DirectionalExpandArrowIcon></DirectionalExpandArrowIcon>}\n        type=\"submenu\"\n        role=\"menuitem\"\n        onAction={openSubmenuAction}\n        hoverInfo={{\n          //Specific hover events of submenuItem\n          hoverProps: {\n            onMouseEnter: (e: MouseEvent) => {\n              openSubmenuAction(e);\n            }\n          },\n          hoverStatus\n        }}\n        //Open submenu using right/left key\n        openSubmenu={() => {\n          setIsOpen(true);\n          setCurrentFocus('firstItem');\n        }}\n        submenuRef={dropdownSubmenuRef}\n        isSubmenuOpen={isOpen}></BaseMenuItem>\n      {isOpen ? (\n        <DropdownMenu\n          menuLevel=\"sub\"\n          menuId={submenuId}\n          //Close submenu with left/right key\n          closeSubmenu={() => {\n            hoverStatus.current.recentClose = true;\n            changeKey({ key: currentKey, reason: 'keyboard' });\n            setTimeout(() => {\n              hoverStatus.current.recentClose = false;\n            }, HOVER_SHIFT_TIMEOUT);\n            setIsOpen(false);\n            //CurrentKey can be the same as submenuItem, because of that we explicitly focus it\n            submenuMenuItemRef.current?.focus();\n          }}\n          /*For now we are exposing ref if this is exposed at some point we would look for other\n            mechanisms to use this ref */\n          ref={dropdownSubmenuRef}\n          anchorRef={submenuMenuItemRef}\n          defaultPlacement=\"end-top\"\n          currentFocus={currentFocus}\n          offsetValue={{\n            mainAxis: -8, //TODO: need to figure out how to make this themable.\n            crossAxis: -8\n          }}\n          flipOptions={{\n            crossAxis: true,\n            mainAxis: true,\n            fallbackPlacements: ['start-top', 'end-bottom', 'start-bottom']\n          }}>\n          {children}\n        </DropdownMenu>\n      ) : null}\n    </>\n  );\n};\n\nconst HOVER_SHIFT_TIMEOUT = 100;\n","import { useCallback, useEffect, useRef, useState } from 'preact/hooks';\n\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { DirectionalCollapseArrowIcon } from '../PRIVATE_ThemedIcons/DirectionalCollapseArrowIcon';\nimport { DirectionalExpandArrowIcon } from '../PRIVATE_ThemedIcons/DirectionalExpandArrowIcon';\n\nimport { BaseMenuItem } from './MenuItem';\nimport { SheetMenu } from './SheetMenu';\nimport { useMenuContainerContext } from './useMenuContainerContext';\nimport { SubmenuProps } from './Submenu';\n\nexport const SheetSubmenu = ({ label, children }: SubmenuProps) => {\n  const submenuId = useId();\n  const submenuItemId = useId();\n  const submenuTitleId = useId();\n\n  const submenuMenuItemRef = useRef<HTMLAnchorElement | null>(null);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const [initialFocus, setInitialFocus] = useState<'menu' | 'secondItem'>('menu');\n\n  const { menuContainerRef, changeKey } = useMenuContainerContext();\n  /* We have to wrap opening display change inside a useEffect to avoid flashy effect when opening submenu*/\n  useEffect(() => {\n    if (isOpen) {\n      if (menuContainerRef.current) {\n        /*Menu hidden instead of unmounted for two main reasons:\n      1. Children need to be updated even if menu is present.\n      2. We can't unmount parent since all the submenus are children of main menuContainer*/\n        menuContainerRef.current.style.display = 'none';\n      }\n    }\n  }, [isOpen, menuContainerRef]);\n\n  const openSubmenuDirectional = useCallback(() => {\n    setIsOpen(true);\n    setInitialFocus('secondItem');\n  }, []);\n\n  const openSubmenuAction = useCallback((e: Event) => {\n    //If the submenu is open using keyboard focus has to go to second item(first is the title), if not to the menu Container\n    setIsOpen(true);\n    if (e.type === 'keyup') {\n      setInitialFocus('secondItem');\n    } else {\n      setInitialFocus('menu');\n    }\n  }, []);\n\n  const returnFocusToSubmenuItem = useCallback(() => {\n    changeKey({ key: submenuItemId, reason: 'keyboard' });\n    submenuMenuItemRef.current?.focus();\n  }, [changeKey, submenuItemId, submenuMenuItemRef]);\n\n  /* No need to \"save\" these functions with useCallback */\n  const closeSubmenu = () => {\n    setIsOpen(false);\n    if (menuContainerRef.current) {\n      //Submenu is unmounted and prev menu is visible again.\n      /*Dom manipulation is kind of dirty. Have to check for new approaches. JET-57239 */\n      menuContainerRef.current.style.display = 'block';\n    }\n  };\n\n  const closeSubmenuPressingTitleItem = (e: Event) => {\n    closeSubmenu();\n    //If the submenu is closed using keyboard focus has to go to submenuItem that opened submenu, if not to the menu Container\n    if (e.type === 'keyup') {\n      returnFocusToSubmenuItem();\n    } else {\n      changeKey({ key: undefined, reason: 'click' });\n      menuContainerRef.current?.focus();\n    }\n  };\n\n  const closeDirectional = () => {\n    closeSubmenu();\n    returnFocusToSubmenuItem();\n  };\n\n  return (\n    <>\n      <BaseMenuItem\n        id={submenuItemId}\n        submenuId={submenuId}\n        ref={submenuMenuItemRef}\n        label={label}\n        endIcon={<DirectionalExpandArrowIcon></DirectionalExpandArrowIcon>}\n        type=\"submenu\"\n        role=\"menuitem\"\n        onAction={openSubmenuAction}\n        openSubmenu={openSubmenuDirectional}\n        isSubmenuOpen={isOpen}></BaseMenuItem>\n      {!isOpen ? null : (\n        <SheetMenu\n          menuId={submenuId}\n          closeSubmenu={closeDirectional}\n          menuLevel=\"sub\"\n          anchorRef={submenuMenuItemRef}\n          //TODO: We need to check if this initial focus is desired based on some W3C specs\n          currentFocus={initialFocus}>\n          <BaseMenuItem\n            id={submenuTitleId}\n            menuItemLabelWeight=\"bold\"\n            role=\"menuitem\"\n            type=\"submenu\"\n            startIcon={<DirectionalCollapseArrowIcon></DirectionalCollapseArrowIcon>}\n            onAction={closeSubmenuPressingTitleItem}\n            label={label}></BaseMenuItem>\n          {children}\n        </SheetMenu>\n      )}\n    </>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\n\nimport { DropdownSubmenu } from './DropdownSubmenu';\nimport { SheetSubmenu } from './SheetSubmenu';\nimport { useMenuContext } from './useMenuContext';\n\nexport type SubmenuProps = {\n  /**\n   * Set of menu groups or menu items that submenumenu will hold.Even though you could pass other type of children,\n   * is strongly recommended to use MenuItem, menu groups or components that return this type of components\n   * since passing other type of components children produces not desirable behaviors.\n   */\n  children?: ComponentChildren;\n\n  /**\n   *  Determines submenu text.\n   */\n  label: string;\n};\n\n/*Submenu behaves differently depending the device */\nexport const Submenu = ({ label, children }: SubmenuProps) => {\n  const { isMobile } = useMenuContext();\n  return (\n    <>\n      {isMobile ? (\n        <SheetSubmenu label={label}>{children}</SheetSubmenu>\n      ) : (\n        <DropdownSubmenu label={label}>{children}</DropdownSubmenu>\n      )}\n    </>\n  );\n};\n"],"names":["DropdownSubmenu","label","children","submenuId","useId","preProcessedMenuItemID","menuItemId","useMemo","changeKey","currentKey","useMenuContainerContext","submenuMenuItemRef","useRef","dropdownSubmenuRef","isOpen","setIsOpen","useState","currentFocus","setCurrentFocus","useEffect","openSubmenuAction","useCallback","e","current","focus","type","hoverStatus","recentClose","pendingUnhover","_jsxs","jsxs","_Fragment","Fragment","_jsx","BaseMenuItem","id","ref","endIcon","DirectionalExpandArrowIcon","role","onAction","hoverInfo","hoverProps","onMouseEnter","openSubmenu","submenuRef","isSubmenuOpen","jsx","DropdownMenu","menuLevel","menuId","closeSubmenu","key","reason","setTimeout","HOVER_SHIFT_TIMEOUT","anchorRef","defaultPlacement","offsetValue","mainAxis","crossAxis","flipOptions","fallbackPlacements","SheetSubmenu","submenuItemId","submenuTitleId","initialFocus","setInitialFocus","menuContainerRef","style","display","openSubmenuDirectional","returnFocusToSubmenuItem","SheetMenu","menuItemLabelWeight","startIcon","DirectionalCollapseArrowIcon","undefined","isMobile","useMenuContext"],"mappings":"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"}