{"version":3,"file":"MeterBar-1dc3eac7.js","sources":["../../src/UNSAFE_MeterBar/MeterUtils.ts","../../src/UNSAFE_MeterBar/ReferenceLines.tsx","../../src/UNSAFE_MeterBar/ThresholdBar.tsx","../../src/UNSAFE_MeterBar/MeterBar.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { Ref } from 'preact/hooks';\nimport { ReferenceLine } from '../utils/UNSAFE_meterUtils';\n\ntype Dimensions = {\n  width: number;\n  height: number;\n};\n\n/**\n * Returns the metric value of the clicked point.\n * @param event The PointerEvent\n * @param dimensionsRef Ref to stored dimensions of the meter bar.\n * @param min The minimum value of the meter bar.\n * @param max The maximum value of the meter bar.\n * @param step The step value of the meter bar.\n * @param orientation The orientation of the meter bar.\n * @param isRtl Whether the reading mode is 'rtl'\n * @returns The metric value of the clicked point.\n */\nexport function getValue(\n  event: PointerEvent,\n  dimensionsRef: Ref<Dimensions>,\n  min: number,\n  max: number,\n  step: number,\n  orientation?: 'horizontal' | 'vertical',\n  isRtl?: boolean\n): number | undefined {\n  const dims = dimensionsRef.current;\n  if (!dims || dims.width === 0) {\n    return undefined;\n  }\n\n  let val;\n\n  if (orientation === 'horizontal') {\n    const width = event.offsetX;\n    val = min + ((max - min) * (isRtl ? dims.width - width : width)) / dims.width;\n  } else {\n    const height = dims.height - event.offsetY;\n    val = min + ((max - min) * height) / dims.height;\n  }\n  val = Math.round(val / step) * step;\n  return Math.max(min, Math.min(max, val));\n}\n\n/**\n * Returns the true dimension of the meter bar after first render. All dimensions are 0 for initial render.\n * @param element The meter bar track HTML element\n * @returns The dimension of the meter bar.\n */\nexport function getDimensions(element: HTMLElement | null): Dimensions {\n  if (!element) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  const trackDims = element.getBoundingClientRect();\n\n  return {\n    width: trackDims.width,\n    height: trackDims.height\n  };\n}\n\n/**\n * Returns object with 'start' and 'end' keys. Value for each key will be true if at least one ref line with correposnding position is present in meter bar.\n * @param lines The array of reference lines.\n * @returns Returns object with start and end keys.\n */\nexport function getRefLinesInfo(lines?: ReferenceLine[]): { start: boolean; end: boolean } {\n  let refLineInfo = { start: false, end: false };\n  if (lines) {\n    refLineInfo = lines.reduce((acc, cur) => {\n      acc.start = acc.start || cur.position === 'start';\n      acc.end = acc.end || cur.position === 'end' || cur.position == null;\n      return acc;\n    }, refLineInfo);\n  }\n  return refLineInfo;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { styles } from './themes/MeterBarStyles.css';\nimport { DvtThresholdsColors } from '../utils/UNSAFE_meterUtils';\nimport { getDvtThresholdColor } from '../utils/UNSAFE_meterUtils';\n\ntype ReferenceLineProps = {\n  orientation: 'horizontal' | 'vertical';\n  percentage: string;\n  position?: 'start' | 'end';\n  color?: ColorProps['color'] | DvtThresholdsColors;\n};\n\nexport function ReferenceLineBar({ orientation, percentage, color, position }: ReferenceLineProps) {\n  const isHoriz = orientation === 'horizontal';\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const isStartPos = position === 'start';\n\n  return (\n    <div\n      class={classNames([\n        styles.referenceLinesBaseStyle,\n        isHoriz ? styles.referenceLinesHorizontalStyle : styles.referenceLinesVerticalStyle,\n        isStartPos\n          ? isHoriz\n            ? styles.referenceLinesHoriontalStartStyle\n            : isRtl\n            ? styles.referenceLinesVerticalStartRtlStyle\n            : styles.referenceLinesVerticalStartLtrStyle\n          : ''\n      ])}\n      style={{\n        left: isHoriz && !isRtl ? percentage : undefined,\n        right: isHoriz && isRtl ? percentage : undefined,\n        bottom: isHoriz ? undefined : percentage,\n        backgroundColor: getDvtThresholdColor(color)\n      }}></div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { styles } from './themes/MeterBarStyles.css';\nimport { DvtThresholdsColors, getDvtThresholdColor } from '../utils/UNSAFE_meterUtils';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'class'>;\ntype ThresholdBarProps = IntrinsicProps & {\n  color?: ColorProps['color'] | DvtThresholdsColors;\n  length: string;\n  orientation: 'horizontal' | 'vertical';\n};\n\nexport function ThresholdBar({ color, length, orientation, ...otherProps }: ThresholdBarProps) {\n  const { direction } = useUser();\n  const isHoriz = orientation === 'horizontal';\n  const isRtl = direction === 'rtl';\n\n  return (\n    <div\n      class={classNames([\n        styles.thresholdBarBaseStyle,\n        isHoriz\n          ? isRtl\n            ? styles.thresholdBarHorizontalBarTrackSectionRtlStyle\n            : styles.thresholdBarHorizontalBarTrackSectionLtrStyle\n          : styles.thresholdBarVerticalBarTrackSectionStyle,\n        otherProps.class\n      ])}\n      style={{\n        width: isHoriz ? length : '100%',\n        height: isHoriz ? '100%' : length,\n        backgroundColor: getDvtThresholdColor(color)\n      }}></div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { sizeToCSS } from '../utils/UNSAFE_size';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport {\n  usePointerEvents,\n  useKeyboardEvents,\n  useMeterDatatip\n} from '../hooks/PRIVATE_useDvtMeterEvents';\n\nimport {\n  getMeterAriaProps,\n  validateRange,\n  getTrackAndIndicatorColor\n} from '../utils/PRIVATE_meterUtils';\n\nimport { Threshold } from '../utils/UNSAFE_meterUtils';\nimport { BarTrack, BarValue } from '../PRIVATE_Meter';\nimport { getDimensions, getRefLinesInfo, getValue } from './MeterUtils';\nimport { ReferenceLineBar } from './ReferenceLines';\nimport { ThresholdBar } from './ThresholdBar';\nimport { MeterBarProps } from './MeterBar.types';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { MeterBarStyles, MeterBarVariantOptions } from './themes/MeterBarStyles.css';\nimport { MeterBarRedwoodTheme } from './themes/redwood/MeterBarTheme';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\n\n/**\n * A Meter bar displays information graphically in a rectangular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function MeterBar({\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  length = '100%',\n  size,\n  orientation = 'horizontal',\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  testId,\n  ...props\n}: MeterBarProps) {\n  const testIdProps = useTestId(testId);\n\n  validateRange(min, max, value, step);\n  const currentInputRef = useRef<number>();\n\n  const isHoriz = orientation === 'horizontal';\n  const barTrackRef = useRef<HTMLDivElement>(null);\n  const dimensionsRef = useRef(getDimensions(null));\n  const { direction, forcedColors } = useUser();\n  const isRtl = direction === 'rtl';\n\n  useEffect(() => {\n    if (props.onCommit || props.onInput) {\n      dimensionsRef.current = getDimensions(barTrackRef.current);\n    }\n  }, [size, length, orientation, props.onCommit, props.onInput]);\n\n  const getValueFromEvent = (event: PointerEvent): number | undefined => {\n    // only evaluate value from bar track\n    if (event.target == barTrackRef.current) {\n      return getValue(event, dimensionsRef, min, max, step, orientation, isRtl);\n    }\n    return;\n  };\n\n  const isPointerActiveRef = useRef(false);\n\n  const pointerEventsProps = usePointerEvents(\n    value,\n    getValueFromEvent,\n    barTrackRef,\n    currentInputRef,\n    isPointerActiveRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    min,\n    max,\n    step,\n    currentInputRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { datatipContent, datatipProps } = useMeterDatatip(\n    value,\n    isPointerActiveRef,\n    props.datatip,\n    props['aria-describedby']\n  );\n\n  const ariaLabelProps = getMeterAriaProps(\n    value,\n    min,\n    max,\n    props['aria-label'],\n    props['aria-labelledby'],\n    props.thresholds\n  );\n  const mergedProps = mergeProps(\n    pointerEventsProps,\n    keyboardEventsProps,\n    datatipProps,\n    ariaLabelProps\n  );\n\n  const validIndicatorSize = Math.max(0, Math.min(1, indicatorSize));\n  const valueBarLength = `${((value - min) * 100) / (max - min)}%`;\n  const valueBarSize = `${validIndicatorSize * 100}%`;\n  const { trackColor, indicatorColor } = getTrackAndIndicatorColor(\n    value,\n    thresholdDisplay,\n    props.trackColor,\n    props.indicatorColor,\n    props.thresholds\n  );\n\n  const sizeStyle = getRefLinesInfo(props.referenceLines);\n  const isInteractive = props.onCommit || props.onInput;\n  const { isTabbable } = useTabbableMode();\n\n  const {\n    classes,\n    styles: {\n      interactiveStyle,\n\n      barValueBaseStyle,\n      barValueVerticalStyle,\n      barValueHorizontalStyle,\n      barValueHighContrastStyle,\n\n      barTrackBaseStyle,\n\n      barTrackHorizontalSizeStyle,\n      barTrackVerticalSizeStyle,\n      barTrackBorderStyle,\n\n      barTrackMarginTopStyle,\n      barTrackMarginStartStyle,\n      barTrackMarginBottomStyle,\n      barTrackMarginEndStyle,\n\n      trackSectionHorizontalFirstStyle,\n      trackSectionHorizontalLastStyle,\n\n      trackSectionVerticalFirstStyle,\n      trackSectionVerticalLastStyle,\n\n      trackSectionRoundedCornersStyle\n    }\n  } = useComponentTheme<MeterBarVariantOptions, MeterBarStyles>(MeterBarRedwoodTheme, {\n    size,\n    orientation\n  });\n\n  return (\n    <>\n      <div\n        tabIndex={!isTabbable ? -1 : 0}\n        {...testIdProps}\n        {...mergedProps}\n        style={{\n          width: isHoriz ? sizeToCSS(length) : undefined,\n          height: isHoriz ? undefined : sizeToCSS(length)\n        }}\n        class={classNames([classes])}>\n        <BarTrack\n          ref={barTrackRef}\n          orientation={orientation}\n          color={\n            !isTrackRendered || (thresholdDisplay === 'all' && props.thresholds)\n              ? 'transparent'\n              : trackColor\n          }\n          class={classNames([\n            barTrackBaseStyle,\n            isInteractive ? interactiveStyle : '',\n            isHoriz ? barTrackHorizontalSizeStyle : barTrackVerticalSizeStyle,\n            !isTrackRendered || (thresholdDisplay === 'all' && props.thresholds)\n              ? undefined\n              : barTrackBorderStyle,\n            ...getMarginClass(\n              sizeStyle,\n              isHoriz,\n              barTrackMarginTopStyle,\n              barTrackMarginStartStyle,\n              barTrackMarginBottomStyle,\n              barTrackMarginEndStyle\n            )\n          ])}>\n          {thresholdDisplay === 'all' &&\n            props.thresholds\n              ?.filter((threshold: Threshold) => threshold.max > min && threshold.max <= max)\n              .sort((a, b) => a.max - b.max)\n              .map((threshold: Threshold, index, thresholds) => {\n                const diff =\n                  index === 0 ? threshold.max - min : threshold.max - thresholds[index - 1].max;\n                const trackSectionLastStyle = isHoriz\n                  ? trackSectionHorizontalLastStyle\n                  : trackSectionVerticalLastStyle;\n                let trackSectionStyleClass =\n                  index === 0\n                    ? isHoriz\n                      ? trackSectionHorizontalFirstStyle\n                      : trackSectionVerticalFirstStyle\n                    : '';\n                if (threshold.max === max)\n                  trackSectionStyleClass =\n                    index === 0\n                      ? trackSectionRoundedCornersStyle // Single threshold from min to max\n                      : trackSectionLastStyle;\n                return (\n                  <>\n                    <ThresholdBar\n                      class={trackSectionStyleClass}\n                      orientation={orientation}\n                      length={`${(diff * 100) / (max - min)}%`}\n                      color={threshold.color}\n                    />\n                    {isTrackRendered && index === thresholds.length - 1 && threshold.max < max ? (\n                      <ThresholdBar\n                        class={trackSectionLastStyle}\n                        color={trackColor}\n                        orientation={orientation}\n                        length={`${((max - thresholds[index].max) * 100) / (max - min)}%`}\n                      />\n                    ) : (\n                      ''\n                    )}\n                  </>\n                );\n              })}\n          <BarValue\n            length={valueBarLength}\n            size={valueBarSize}\n            orientation={orientation}\n            class={classNames([\n              barValueBaseStyle,\n              isHoriz ? barValueHorizontalStyle : barValueVerticalStyle,\n              forcedColors === 'active' ? barValueHighContrastStyle : ''\n            ])}\n            color={indicatorColor}\n          />\n          {props.referenceLines?.map((item) => (\n            <ReferenceLineBar\n              color={item.color}\n              orientation={orientation}\n              percentage={`${((item.value - min) * 100) / (max - min)}%`}\n              position={item.position}\n            />\n          ))}\n        </BarTrack>\n      </div>\n      {datatipContent}\n    </>\n  );\n}\n\nconst getMarginClass = function (\n  info: { start: boolean; end: boolean },\n  isHoriz: boolean,\n  barTrackMarginTopStyle: string,\n  barTrackMarginStartStyle: string,\n  barTrackMarginBottomStyle: string,\n  barTrackMarginEndStyle: string\n) {\n  const className = [];\n\n  if (info.start) {\n    className.push(isHoriz ? barTrackMarginTopStyle : barTrackMarginStartStyle);\n  }\n\n  if (info.end) {\n    className.push(isHoriz ? barTrackMarginBottomStyle : barTrackMarginEndStyle);\n  }\n  return className;\n};\n"],"names":["getDimensions","element","width","height","trackDims","getBoundingClientRect","ReferenceLineBar","orientation","percentage","color","position","isHoriz","direction","useUser","isRtl","isStartPos","_jsx","class","classNames","styles","referenceLinesBaseStyle","referenceLinesHorizontalStyle","referenceLinesVerticalStyle","referenceLinesHoriontalStartStyle","referenceLinesVerticalStartRtlStyle","referenceLinesVerticalStartLtrStyle","style","left","undefined","right","bottom","backgroundColor","getDvtThresholdColor","ThresholdBar","length","otherProps","thresholdBarBaseStyle","thresholdBarHorizontalBarTrackSectionRtlStyle","thresholdBarHorizontalBarTrackSectionLtrStyle","thresholdBarVerticalBarTrackSectionStyle","getMarginClass","info","barTrackMarginTopStyle","barTrackMarginStartStyle","barTrackMarginBottomStyle","barTrackMarginEndStyle","className","start","push","end","max","min","value","step","size","isTrackRendered","thresholdDisplay","indicatorSize","testId","props","testIdProps","useTestId","validateRange","currentInputRef","useRef","barTrackRef","dimensionsRef","forcedColors","useEffect","onCommit","onInput","current","isPointerActiveRef","pointerEventsProps","usePointerEvents","event","target","dims","val","offsetX","offsetY","Math","round","getValue","keyboardEventsProps","useKeyboardEvents","datatipContent","datatipProps","useMeterDatatip","datatip","ariaLabelProps","getMeterAriaProps","thresholds","mergedProps","mergeProps","validIndicatorSize","valueBarLength","valueBarSize","trackColor","indicatorColor","getTrackAndIndicatorColor","sizeStyle","lines","refLineInfo","reduce","acc","cur","getRefLinesInfo","referenceLines","isInteractive","isTabbable","useTabbableMode","classes","interactiveStyle","barValueBaseStyle","barValueVerticalStyle","barValueHorizontalStyle","barValueHighContrastStyle","barTrackBaseStyle","barTrackHorizontalSizeStyle","barTrackVerticalSizeStyle","barTrackBorderStyle","trackSectionHorizontalFirstStyle","trackSectionHorizontalLastStyle","trackSectionVerticalFirstStyle","trackSectionVerticalLastStyle","trackSectionRoundedCornersStyle","useComponentTheme","MeterBarRedwoodTheme","_jsxs","tabIndex","sizeToCSS","children","BarTrack","ref","filter","threshold","sort","a","b","map","index","diff","trackSectionLastStyle","trackSectionStyleClass","jsx","BarValue","item"],"mappings":"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"}