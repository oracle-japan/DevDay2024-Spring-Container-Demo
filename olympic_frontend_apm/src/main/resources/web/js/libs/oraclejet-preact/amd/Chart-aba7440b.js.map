{"version":3,"file":"Chart-aba7440b.js","sources":["../../src/UNSAFE_Axis/utils/axisNavUtils.ts","../../src/UNSAFE_Chart/Chart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Group } from '../axis.types';\nimport { GroupInfo } from '../../UNSAFE_Chart';\ntype isGroupNavigableType = (groupIndex: number) => boolean;\n\nexport function getNextGroup(\n  info: GroupInfo,\n  viewportEndIndex: number,\n  isGroupNavigable: isGroupNavigableType\n): GroupInfo | undefined {\n  const groupIndex = info.groupIndex + 1;\n  if (groupIndex >= viewportEndIndex) {\n    return;\n  }\n\n  if (isGroupNavigable(groupIndex)) {\n    return { groupIndex };\n  }\n  return getNextGroup({ groupIndex }, viewportEndIndex, isGroupNavigable);\n}\n\nexport function getPreviousGroup(\n  info: GroupInfo,\n  isGroupNavigable: isGroupNavigableType\n): GroupInfo | undefined {\n  const groupIndex = info.groupIndex - 1;\n  if (groupIndex < 0) {\n    return;\n  }\n  if (isGroupNavigable(groupIndex)) {\n    return { groupIndex };\n  }\n  return getPreviousGroup({ groupIndex }, isGroupNavigable);\n}\n\nexport function getGroupNavUtil(\n  groups: Group[],\n  renderedGroups: number[],\n  xIndexExtent: { startIndex: number; endIndex: number },\n  drilling: 'on' | 'off' | 'groupsOnly',\n  isRtl: boolean\n) {\n  const isGroupNavigable = (groupIndex: number) => {\n    const groupsDrilling = groups[renderedGroups[groupIndex]].drilling;\n    return (drilling === 'on' || drilling === 'groupsOnly') && groupsDrilling != 'off';\n  };\n\n  const getDefaultNavGroup = (info: GroupInfo) => {\n    if (xIndexExtent.startIndex > renderedGroups[info.groupIndex]) {\n      info.groupIndex = 0;\n      return info;\n    } else if (xIndexExtent.endIndex < renderedGroups[info.groupIndex]) {\n      info.groupIndex = renderedGroups.length - 1;\n      return info;\n    }\n    return;\n  };\n\n  const getNextNavGroup = (info: GroupInfo, arrow: 'ArrowRight' | 'ArrowLeft') => {\n    let nextGroup = getDefaultNavGroup(info);\n\n    if (nextGroup) return nextGroup;\n\n    if (arrow === 'ArrowRight') {\n      nextGroup = isRtl\n        ? getPreviousGroup(info, isGroupNavigable)\n        : getNextGroup(info, renderedGroups.length, isGroupNavigable);\n    } else {\n      nextGroup = isRtl\n        ? getNextGroup(info, renderedGroups.length, isGroupNavigable)\n        : getPreviousGroup(info, isGroupNavigable);\n    }\n    return nextGroup || info;\n  };\n\n  return { getDefaultNavGroup, getNextNavGroup };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useTextDimensions } from '../hooks/PRIVATE_useTextDimensions';\nimport { useCssVars } from '../hooks/PRIVATE_useCssVars/useCssVars';\nimport { getChartVars } from '../utils/PRIVATE_chartUtils';\nimport { styles } from './themes/ChartStyles.css';\nimport { useRef } from 'preact/hooks';\nimport { PlotArea } from '../UNSAFE_PlotArea';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { Axis } from '../UNSAFE_Axis/Axis';\nimport { TrackResizeContainer } from '../PRIVATE_TrackResizeContainer';\nimport { useChartViewport } from '../hooks/PRIVATE_useChartViewport';\nimport {\n  getAvailSpace,\n  getLayoutInfo,\n  getScrollBarSpace,\n  updateScrollBarSpace\n} from '../utils/PRIVATE_chartUtils/layoutUtils';\nimport { useChartNav } from '../hooks/PRIVATE_useChartNav/useChartNav';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { getAxesPosition } from '../UNSAFE_Axis/utils/axisUtils';\nimport { ScrollBar } from '../PRIVATE_ChartScrollBar';\nimport { useSelectDrill } from '../hooks/PRIVATE_useChartEvents/useSelectDrill';\nimport { useChartDatatipAndCursor } from '../hooks/PRIVATE_useChartEvents/useDatatipAndCursor';\nimport { getGroupNavUtil } from '../UNSAFE_Axis/utils/axisNavUtils';\nimport { ChartCommonProps, ChartItem } from './chart.types';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\nimport { TimeAxisProps } from '../UNSAFE_Axis/axis.types';\nimport { Gridlines } from '../UNSAFE_PlotArea/Gridlines';\n\nexport function Chart<K extends string | number, D extends ChartItem<K>>({\n  width = '100%',\n  height = '448px',\n  selectedIds = [],\n  hiddenIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  xAxis,\n  yAxis,\n  plotArea,\n  series,\n  groups,\n  isStacked = false,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataCursorPosition,\n  onSelectionChange,\n  isDataCursorEnabled,\n  dataCursorStyle,\n  onViewportChange,\n  onDataCursorPositionChange,\n  onItemDrill,\n  onGroupDrill,\n  onItemInput,\n  datatip,\n  zoomAndScroll = 'off',\n  offset,\n  getNavUtil,\n  getDataItemPos,\n  getGapRatio,\n  valueFormats,\n  findNearest,\n  isRtl,\n  children,\n  testId,\n  renderGridLinesInFront,\n  ...props\n}: ChartCommonProps<K, D>) {\n  // TODO: reevaluate how we handle empty data\n  const chartVars = getChartVars();\n\n  const testIdProps = useTestId(testId);\n  return (\n    <TrackResizeContainer width={width} height={height}>\n      {function _(width, height) {\n        const rootRef = useRef<HTMLDivElement>(null);\n        const isHoriz = orientation === 'horizontal';\n        const { xAxisPosition, yAxisPosition } = getAxesPosition(yAxis, isHoriz, isRtl);\n\n        const { resolvedVars, cssContent } = useCssVars(chartVars);\n        const { textMeasureContent, getTextDimensions } = useTextDimensions();\n\n        let availSpace = getAvailSpace(width, height);\n        const updatedSpace = getScrollBarSpace(availSpace, zoomAndScroll, xAxisPosition);\n        let scrollDims = updatedSpace.scrollDims;\n        availSpace = updatedSpace.availSpace;\n\n        const hiddenSet = new Set(hiddenIds);\n        const {\n          xProps,\n          xScale,\n          xViewportExtent,\n          xAxisExtent,\n          xIndexExtent,\n          yViewportExtent,\n          yAxisExtent,\n          groupWidth,\n          yProps,\n          yScale,\n          yMaxDim,\n          yMajorTicks,\n          yMinorTicks,\n          plotAreaSpace\n        } = getLayoutInfo(\n          series,\n          groups,\n          getDataItem,\n          xAxis,\n          yAxis,\n          availSpace,\n          hiddenSet,\n          hideAndShowBehavior,\n          isHoriz,\n          isRtl,\n          isStacked,\n          resolvedVars['labelFontSize'],\n          offset,\n          getTextDimensions\n        );\n\n        scrollDims = updateScrollBarSpace(scrollDims, xAxisPosition === 'bottom', yMaxDim);\n\n        const gapRatio = getGapRatio(xIndexExtent.startIndex, xIndexExtent.endIndex);\n\n        const getNextChartItem = getNavUtil(xIndexExtent.startIndex, xIndexExtent.endIndex);\n\n        const renderedGroupsIndex = xProps.tickLabels.map(\n          ({ index }) => index + xIndexExtent.startIndex\n        );\n        const { getNextNavGroup, getDefaultNavGroup } = getGroupNavUtil(\n          groups,\n          renderedGroupsIndex,\n          xIndexExtent,\n          drilling,\n          isRtl\n        );\n\n        const { activeId, focusedItemInfo, hoveredItemInfo, focusedGroupInfo, navProps } =\n          useChartNav({\n            rootRef,\n            getNextChartItem,\n            getNextNavGroup,\n            getDefaultNavGroup,\n            onItemInput,\n            drilling,\n            xIndexExtent\n          });\n\n        const selectDrillProps = useSelectDrill({\n          selectionMode,\n          selection: selectedIds,\n          onChange: onSelectionChange,\n          rootRef,\n          drilling,\n          onItemDrill,\n          onGroupDrill,\n          focusedGroupInfo,\n          focusedItemInfo,\n          groups,\n          getDataItem\n        });\n\n        const viewportProps = useChartViewport({\n          width,\n          height,\n          xViewportExtent,\n          yViewportExtent,\n          xAxisExtent,\n          yAxisExtent,\n          xScale,\n          yScale,\n          plotAreaSpace,\n          isRtl,\n          isHoriz,\n          zoomAndScroll,\n          onViewportChange\n        });\n\n        const findNearestData = findNearest(xScale as any, yScale, groupWidth, gapRatio);\n        const getDataItemPosition = getDataItemPos(xScale as any, yScale, groupWidth, gapRatio);\n\n        const { datatipContent, dataCursorContent, datatipProps } = useChartDatatipAndCursor<K, D>({\n          series,\n          groups,\n          width,\n          height,\n          findNearest: findNearestData,\n          plotAreaSpace,\n          onDataCursorPositionChange,\n          isDataCursorEnabled,\n          dataCursorPosition,\n          dataCursorStyle,\n          hoveredItemInfo,\n          focusedItemInfo,\n          getDataItem,\n          getDataItemPos: getDataItemPosition,\n          datatip,\n          valueFormats,\n          isHoriz,\n          xScale: xScale as any,\n          yScale\n        });\n\n        const eventsProps = mergeProps(navProps, selectDrillProps, viewportProps, datatipProps);\n\n        const isGroupInteractive = (index: number) => {\n          if ((xAxis as TimeAxisProps)?.timeAxisType != null) {\n            return false;\n          }\n          const groupDrill = groups[index].drilling;\n          if (groupDrill === 'on') {\n            return true;\n          }\n\n          if (groupDrill != 'off' && (drilling === 'on' || drilling === 'groupsOnly')) {\n            return true;\n          }\n          return false;\n        };\n\n        const plotAreaClipPathId = useId();\n        const { viewportMin: xViewportMin, viewportMax: xViewportMax } = xViewportExtent;\n        const { startIndex: xStartIndex, endIndex: xEndIndex } = xIndexExtent;\n        const gridLines = (\n          <Gridlines\n            plotArea={plotArea}\n            yMinorTicks={yMinorTicks}\n            xScale={xScale}\n            yScale={yScale}\n            isLog={yAxis?.scale === 'log'}\n            xViewportMin={xViewportMin}\n            xViewportMax={xViewportMax}\n            yTicks={yMajorTicks}\n            yAxisPosition={yAxisPosition}\n          />\n        );\n\n        return (\n          <div\n            tabIndex={0}\n            ref={rootRef}\n            aria-activedescendant={activeId}\n            aria-label={props['aria-label']}\n            aria-labelledby={props['aria-labelledby']}\n            aria-describedby={props['aria-describedby']}\n            style={{ width, height }}\n            role=\"application\"\n            className={styles.outline}\n            {...testIdProps}\n            {...eventsProps}>\n            <svg width=\"100%\" height=\"100%\">\n              <clipPath id={`${plotAreaClipPathId}`}>\n                <rect {...plotAreaSpace}></rect>\n              </clipPath>\n              <PlotArea\n                color={plotArea?.color}\n                yScale={yScale}\n                isLog={yAxis?.scale === 'log'}\n                availSpace={plotAreaSpace}\n                xAxisPosition={xAxisPosition}\n              />\n              {!renderGridLinesInFront && gridLines}\n              <Axis {...yProps} axisPosition={yAxisPosition} />\n              <Axis\n                {...xProps}\n                axisPosition={xAxisPosition}\n                isTextInteractive={isGroupInteractive}\n                activeId={activeId}\n                focusedGroupIndex={\n                  focusedGroupInfo.isFocusVisible ? focusedGroupInfo.groupIndex : undefined\n                }\n              />\n              <g clip-path={`url(#${plotAreaClipPathId})`}>\n                {children({\n                  xStartIndex,\n                  xEndIndex,\n                  xScale: xScale as any,\n                  yScale,\n                  gapRatio,\n                  activeId,\n                  focusedItemInfo,\n                  hoveredItemInfo,\n                  groupWidth\n                })}\n                {renderGridLinesInFront && gridLines}\n                {dataCursorContent}\n              </g>\n              {zoomAndScroll === 'live' && (\n                <ScrollBar\n                  availSpace={scrollDims}\n                  viewport={xViewportExtent}\n                  axisExtent={xAxisExtent}\n                  isHoriz={xAxisPosition === 'bottom'}\n                />\n              )}\n            </svg>\n            {textMeasureContent}\n            {cssContent}\n            {datatipContent}\n          </div>\n        );\n      }}\n    </TrackResizeContainer>\n  );\n}\n"],"names":["getNextGroup","info","viewportEndIndex","isGroupNavigable","groupIndex","getPreviousGroup","width","height","selectedIds","hiddenIds","hideAndShowBehavior","orientation","xAxis","yAxis","plotArea","series","groups","isStacked","getDataItem","selectionMode","drilling","dataCursorPosition","onSelectionChange","isDataCursorEnabled","dataCursorStyle","onViewportChange","onDataCursorPositionChange","onItemDrill","onGroupDrill","onItemInput","datatip","zoomAndScroll","offset","getNavUtil","getDataItemPos","getGapRatio","valueFormats","findNearest","isRtl","children","testId","renderGridLinesInFront","props","chartVars","getChartVars","testIdProps","useTestId","_jsx","TrackResizeContainer","rootRef","useRef","isHoriz","xAxisPosition","yAxisPosition","getAxesPosition","resolvedVars","cssContent","useCssVars","textMeasureContent","getTextDimensions","useTextDimensions","availSpace","getAvailSpace","updatedSpace","getScrollBarSpace","scrollDims","hiddenSet","Set","xProps","xScale","xViewportExtent","xAxisExtent","xIndexExtent","yViewportExtent","yAxisExtent","groupWidth","yProps","yScale","yMaxDim","yMajorTicks","yMinorTicks","plotAreaSpace","getLayoutInfo","updateScrollBarSpace","gapRatio","startIndex","endIndex","getNextChartItem","renderedGroupsIndex","tickLabels","map","index","getNextNavGroup","getDefaultNavGroup","renderedGroups","groupsDrilling","length","arrow","nextGroup","getGroupNavUtil","activeId","focusedItemInfo","hoveredItemInfo","focusedGroupInfo","navProps","useChartNav","selectDrillProps","useSelectDrill","selection","onChange","viewportProps","useChartViewport","findNearestData","getDataItemPosition","datatipContent","dataCursorContent","datatipProps","useChartDatatipAndCursor","eventsProps","mergeProps","plotAreaClipPathId","useId","viewportMin","xViewportMin","viewportMax","xViewportMax","xStartIndex","xEndIndex","gridLines","Gridlines","isLog","scale","yTicks","_jsxs","tabIndex","ref","style","role","className","styles","outline","jsx","id","PlotArea","color","Axis","axisPosition","isTextInteractive","timeAxisType","groupDrill","focusedGroupIndex","isFocusVisible","undefined","ScrollBar","viewport","axisExtent"],"mappings":"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"}