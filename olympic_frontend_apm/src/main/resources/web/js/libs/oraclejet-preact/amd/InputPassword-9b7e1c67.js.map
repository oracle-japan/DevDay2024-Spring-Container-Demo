{"version":3,"file":"InputPassword-9b7e1c67.js","sources":["../../src/UNSAFE_InputPassword/RevealToggleIcon.tsx","../../src/UNSAFE_InputPassword/InputPassword.tsx"],"sourcesContent":["import { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { ViewHideIcon } from '../PRIVATE_ThemedIcons/ViewHideIcon';\nimport { ViewIcon } from '../PRIVATE_ThemedIcons/ViewIcon';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { ButtonLayoutRedwoodTheme } from '#UNSAFE_ButtonLayout/themes/redwood/ButtonLayoutTheme';\nimport { revealToggleIconBaseStyles } from './RevealToggleIconStyles.css';\n\ntype RevealToogleIconProps = {\n  onPress: (event: Event) => void;\n  isRevealed?: boolean;\n};\n\nexport function RevealToggleIcon({ isRevealed, onPress }: RevealToogleIconProps) {\n  const { pressProps } = usePress(onPress);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  // title attribute. We removed these because title is taking precedence over aria-label and this\n  // is messing up the screen readers. To be accessible we are removing title and will implement\n  // this as a <Tooltip> component when we have one.\n  // TODO JET-51517 implement reveal icon title as a Tooltip\n  // const hidePasswordStr = translations.inputPassword_hide();\n  // const showPasswordStr = translations.inputPassword_show();\n  const passwordMaskedStr = translations.inputPassword_hidden();\n\n  // Because the RevealToggleIconStyles.css.ts uses buttonLayoutBaseTheme styles, we\n  // need their vars to be loaded as well. This is why we are adding the buttonLayoutBaseTheme\n  // style class.\n  const { baseTheme: buttonLayoutBaseTheme } = useComponentTheme(ButtonLayoutRedwoodTheme);\n  const styleClasses = classNames([buttonLayoutBaseTheme, revealToggleIconBaseStyles]);\n  // TODO: Use toggle <Button> when that is available, JET-49207\n  return (\n    <button\n      aria-label={passwordMaskedStr}\n      role=\"switch\"\n      aria-checked={isRevealed ? false : true}\n      class={styleClasses}\n      tabIndex={0}\n      {...pressProps}>\n      {isRevealed ? <ViewHideIcon /> : <ViewIcon />}\n    </button>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { RevealToggleIcon } from './RevealToggleIcon';\nimport { useClearIcon } from '../hooks/UNSAFE_useClearIcon';\nimport { beforeVNode } from '../utils/UNSAFE_componentUtils';\nimport { ClearIcon } from '../UNSAFE_InputText/ClearIcon';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useToggle } from '../hooks/UNSAFE_useToggle';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies whether the clear icon should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The clear icon is always visible.</li>\n   * <li><code>'conditionally'</code>: The clear icon is visible under the following conditions:\n   * if the component has a non-empty value, and it either has focus or the mouse is over the field.</li>\n   * <li><code>'never'</code>: The clear icon is never visible.</li>\n   * </ul>\n   */\n  hasClearIcon?: 'always' | 'conditionally' | 'never';\n  /**\n   * Specifies whether the reveal toggle should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The reveal toggle is always visible and the user can click on it to reveal the password in plain text.\n   * When the user leaves the field, the password is automatically masked.</li>\n   * <li><code>'never'</code>: The reveal toggle is never visible and the user can never reveal the password in plain text.</li>\n   * </ul>\n   */\n  hasRevealToggle?: 'always' | 'never';\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field. If the labelEdge is 'none',\n   * the labelHint is hidden from the user but is still accessible.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n   *\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n} & TestIdProps;\n\n// One way InputPassword differs from InputText is InputPassword's readonly\n// is implemented with an <input> and not a <div>.\nexport const InputPassword = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      columnSpan,\n      hasClearIcon,\n      hasRevealToggle = 'always',\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit,\n      testId\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const {\n      bool: isRevealed,\n      setFalse: setRevealedFalse,\n      setTrue: setRevealedTrue\n    } = useToggle(false);\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLInputElement\n    >({ isDisabled, isReadonly, ref, onBlurWithin: setRevealedFalse });\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy,\n        helpSourceLink,\n        helpSourceText,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        isRequiredShown,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        userAssistanceDensity,\n        value\n      });\n\n    // Callback on the RevealToggleButton.\n    // When the user clicks on the reveal buttton,\n    // toggle revealing/masking password\n    const onRevealIconPress = useCallback(() => {\n      isRevealed ? setRevealedFalse() : setRevealedTrue();\n    }, [isRevealed, setRevealedFalse, setRevealedTrue]);\n\n    const revealToggleIcon =\n      !isDisabled && hasRevealToggle === 'always' ? (\n        <RevealToggleIcon onPress={onRevealIconPress} isRevealed={isRevealed} />\n      ) : null;\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: value, value: '' });\n    }, [onInputAndDispatch, value, enabledElementRef]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n    const endContentCombined = beforeVNode(revealToggleIcon, maybeClearIcon);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            ref={anchorRef}\n            testId={testId}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              as=\"input\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              textAlign={textAlign}\n              type=\"password\"\n              value={value}\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <TextFieldInput\n        aria-label={ariaLabel}\n        autoComplete={autoComplete}\n        autoFocus={autoFocus}\n        currentCommitValue={currentCommitValue}\n        hasEmptyLabel={label === '' && labelEdge === 'none'}\n        hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n        inputRef={enabledElementRef}\n        isRequired={isRequired}\n        onInput={onInputAndDispatch}\n        onCommit={onCommitAndDispatch}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        value={value}\n        type={isRevealed ? 'text' : 'password'}\n        {...inputProps}\n      />\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          columnSpan={columnSpan}\n          endContent={endContentCombined}\n          inlineUserAssistance={inlineUserAssistance}\n          compactUserAssistance={compactUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          mainFieldRef={anchorRef}\n          testId={testId}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["RevealToggleIcon","isRevealed","onPress","pressProps","usePress","passwordMaskedStr","useTranslationBundle","inputPassword_hidden","baseTheme","buttonLayoutBaseTheme","useComponentTheme","ButtonLayoutRedwoodTheme","styleClasses","classNames","_jsx","jsx","role","class","tabIndex","ViewHideIcon","ViewIcon","InputPassword","forwardRef","ariaDescribedBy","assistiveText","autoComplete","autoFocus","columnSpan","hasClearIcon","hasRevealToggle","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","placeholder","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","variant","onInput","onCommit","testId","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","bool","setFalse","setRevealedFalse","setTrue","setRevealedTrue","useToggle","enabledElementRef","focusProps","isFocused","readonlyElementRef","useFocusableTextField","onBlurWithin","hoverProps","isHover","useHover","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","onRevealIconPress","revealToggleIcon","onClickClearIcon","current","focus","previousValue","maybeClearIcon","useClearIcon","clearIcon","ClearIcon","onClick","display","hasValue","isEnabled","endContentCombined","beforeVNode","labelComp","Label","undefined","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","anchorRef","useRef","compactUserAssistance","CompactUserAssistance","FormFieldContext","Provider","children","ReadonlyTextField","ReadonlyTextFieldInput","id","as","elementRef","hasEmptyLabel","hasInsideLabel","mainContent","TextFieldInput","inputRef","TextField","endContent","onBlur","onfocusout","onFocus","onfocusin","mainFieldRef"],"mappings":"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"}