{"version":3,"file":"LineChartWebElementBase.js","sourceRoot":"","sources":["LineChartWebElementBase.ts"],"names":[],"mappings":";;;AAAA,iEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,uBAAwB,SAAQ,uBAAY;IACvD;;;;;OAKG;IACI,kBAAkB;QACvB,OAAO,IAAI,CAAC,WAAW,CAAO,iBAAiB,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAS,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAS,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAS,aAAa,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAQ,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAQ,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAW,UAAU,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAS,eAAe,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAe,cAAc,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACI,mBAAmB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAO,kBAAkB,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,WAAW,CAAO,MAAM,CAAC,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAS,eAAe,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,eAAe,CAAC,SAAqB;QAC1C,OAAO,IAAI,CAAC,WAAW,CAAa,WAAW,EAAE,SAAS,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;OAKG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,CAAa,WAAW,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,sBAAsB,CAAC,gBAA+B;QAC3D,OAAO,IAAI,CAAC,WAAW,CAAgB,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;IAC/E,CAAC;IAED;;;;;OAKG;IACI,mBAAmB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAgB,kBAAkB,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;OAKG;IACI,2BAA2B,CAAC,qBAAoC;QACrE,OAAO,IAAI,CAAC,WAAW,CAAgB,uBAAuB,EAAE,qBAAqB,CAAC,CAAC;IACzF,CAAC;IAED;;;;;OAKG;IACI,wBAAwB;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAgB,uBAAuB,CAAC,CAAC;IAClE,CAAC;IAED;;;;;OAKG;IACI,sBAAsB;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAS,qBAAqB,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAS,eAAe,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,iBAAiB;QACtB,OAAO,IAAI,CAAC,WAAW,CAAS,gBAAgB,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAS,QAAQ,CAAC,CAAC;IAC5C,CAAC;CACF;AA5ND,0DA4NC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-line-chart WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, LineChartWebElement.ts.\n */\nexport class LineChartWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>groupComparator</code> property.\n   * A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data.\n   * @return The value of <code>groupComparator</code> property.\n   *\n   */\n  public getGroupComparator(): Promise<null> {\n    return this.getProperty<null>('groupComparator');\n  }\n\n  /**\n   * Gets the value of <code>stack</code> property.\n   * Defines whether the data items are stacked.\n   * @return The value of <code>stack</code> property.\n   *\n   */\n  public getStack(): Promise<string> {\n    return this.getProperty<string>('stack');\n  }\n\n  /**\n   * Gets the value of <code>drilling</code> property.\n   * Whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an &lt;code class=\"prettyprint\">ojDrill&lt;/code> event on click (double click if selection is enabled). Use \"on\" to enable drilling for all series objects (legend items), group objects (x-axis labels), and data items. Use \"seriesOnly\" or \"groupsOnly\" to enable drilling for series objects or group objects only. To enable or disable drilling on individual series, group, or data item, use the drilling attribute in each series, group, or data item.\n   * @return The value of <code>drilling</code> property.\n   *\n   */\n  public getDrilling(): Promise<string> {\n    return this.getProperty<string>('drilling');\n  }\n\n  /**\n   * Gets the value of <code>orientation</code> property.\n   * The orientation of the chart.\n   * @return The value of <code>orientation</code> property.\n   *\n   */\n  public getOrientation(): Promise<string> {\n    return this.getProperty<string>('orientation');\n  }\n\n  /**\n   * Gets the value of <code>yAxis</code> property.\n   * The yAxis options for the chart.\n   * @return The value of <code>yAxis</code> property.\n   *\n   */\n  public getYAxis(): Promise<YAxis> {\n    return this.getProperty<YAxis>('yAxis');\n  }\n\n  /**\n   * Gets the value of <code>xAxis</code> property.\n   * The xAxis options for the chart.\n   * @return The value of <code>xAxis</code> property.\n   *\n   */\n  public getXAxis(): Promise<XAxis> {\n    return this.getProperty<XAxis>('xAxis');\n  }\n\n  /**\n   * Gets the value of <code>plotArea</code> property.\n   * The plot area of the chart.\n   * @return The value of <code>plotArea</code> property.\n   *\n   */\n  public getPlotArea(): Promise<PlotArea> {\n    return this.getProperty<PlotArea>('plotArea');\n  }\n\n  /**\n   * Gets the value of <code>zoomAndScroll</code> property.\n   * The zoom and scroll behavior.\n   * @return The value of <code>zoomAndScroll</code> property.\n   *\n   */\n  public getZoomAndScroll(): Promise<string> {\n    return this.getProperty<string>('zoomAndScroll');\n  }\n\n  /**\n   * Gets the value of <code>valueFormats</code> property.\n   * An object specifying value formatting and tooltip behavior, whose keys generally correspond to the attribute names on the data items.\n   * @return The value of <code>valueFormats</code> property.\n   *\n   */\n  public getValueFormats(): Promise<ValueFormats> {\n    return this.getProperty<ValueFormats>('valueFormats');\n  }\n\n  /**\n   * Gets the value of <code>seriesComparator</code> property.\n   * A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data.\n   * @return The value of <code>seriesComparator</code> property.\n   *\n   */\n  public getSeriesComparator(): Promise<null> {\n    return this.getProperty<null>('seriesComparator');\n  }\n\n  /**\n   * Gets the value of <code>data</code> property.\n   * Specifies the DataProvider for the sections and items of the line-chart.\n   * @return The value of <code>data</code> property.\n   *\n   */\n  public getData(): Promise<null> {\n    return this.getProperty<null>('data');\n  }\n\n  /**\n   * Gets the value of <code>selectionMode</code> property.\n   * Specifies the selection mode.\n   * @return The value of <code>selectionMode</code> property.\n   *\n   */\n  public getSelectionMode(): Promise<string> {\n    return this.getProperty<string>('selectionMode');\n  }\n\n  /**\n   * Sets the value of <code>selection</code> property.\n   * An array containing the ids of the initially selected data items.\n   * @param selection The value to set for <code>selection</code>\n   *\n   */\n  public changeSelection(selection: Array<any>): Promise<void> {\n    return this.setProperty<Array<any>>('selection', selection);\n  }\n\n  /**\n   * Gets the value of <code>selection</code> property.\n   * An array containing the ids of the initially selected data items.\n   * @return The value of <code>selection</code> property.\n   *\n   */\n  public getSelection(): Promise<Array<any>> {\n    return this.getProperty<Array<any>>('selection');\n  }\n\n  /**\n   * Sets the value of <code>hiddenCategories</code> property.\n   *\n   * @param hiddenCategories The value to set for <code>hiddenCategories</code>\n   *\n   */\n  public changeHiddenCategories(hiddenCategories: Array<string>): Promise<void> {\n    return this.setProperty<Array<string>>('hiddenCategories', hiddenCategories);\n  }\n\n  /**\n   * Gets the value of <code>hiddenCategories</code> property.\n   *\n   * @return The value of <code>hiddenCategories</code> property.\n   *\n   */\n  public getHiddenCategories(): Promise<Array<string>> {\n    return this.getProperty<Array<string>>('hiddenCategories');\n  }\n\n  /**\n   * Sets the value of <code>highlightedCategories</code> property.\n   * An array of category string used for highlighting.\n   * @param highlightedCategories The value to set for <code>highlightedCategories</code>\n   *\n   */\n  public changeHighlightedCategories(highlightedCategories: Array<string>): Promise<void> {\n    return this.setProperty<Array<string>>('highlightedCategories', highlightedCategories);\n  }\n\n  /**\n   * Gets the value of <code>highlightedCategories</code> property.\n   * An array of category string used for highlighting.\n   * @return The value of <code>highlightedCategories</code> property.\n   *\n   */\n  public getHighlightedCategories(): Promise<Array<string>> {\n    return this.getProperty<Array<string>>('highlightedCategories');\n  }\n\n  /**\n   * Gets the value of <code>hideAndShowBehavior</code> property.\n   * Defines the hide and show behavior that is performed when clicking on a leegnd item.\n   * @return The value of <code>hideAndShowBehavior</code> property.\n   *\n   */\n  public getHideAndShowBehavior(): Promise<string> {\n    return this.getProperty<string>('hideAndShowBehavior');\n  }\n\n  /**\n   * Gets the value of <code>hoverBehavior</code> property.\n   * Defines the behavior applied when hovering over data items.\n   * @return The value of <code>hoverBehavior</code> property.\n   *\n   */\n  public getHoverBehavior(): Promise<string> {\n    return this.getProperty<string>('hoverBehavior');\n  }\n\n  /**\n   * Gets the value of <code>highlightMatch</code> property.\n   * The matching condition for the highlighted property.\n   * @return The value of <code>highlightMatch</code> property.\n   *\n   */\n  public getHighlightMatch(): Promise<string> {\n    return this.getProperty<string>('highlightMatch');\n  }\n\n  /**\n   * Gets the value of <code>legend</code> property.\n   * An object defining the style, positioning, and behavior of the legend.\n   * @return The value of <code>legend</code> property.\n   *\n   */\n  public getLegend(): Promise<Legend> {\n    return this.getProperty<Legend>('legend');\n  }\n}\nexport interface YAxis {\n  /**\n   *\n   */\n  majorTick: YAxisMajorTick;\n  /**\n   *\n   */\n  minorTick: YAxisMinorTick;\n}\nexport interface YAxisMajorTick {\n  /**\n   *\n   */\n  lineStyle: string;\n  /**\n   *\n   */\n  lineWidth: number;\n  /**\n   *\n   */\n  lineColor: string;\n  /**\n   *\n   */\n  rendered: string;\n}\nexport interface YAxisMinorTick {\n  /**\n   *\n   */\n  lineStyle: string;\n  /**\n   *\n   */\n  lineWidth: number;\n  /**\n   *\n   */\n  lineColor: string;\n  /**\n   *\n   */\n  rendered: string;\n}\nexport interface XAxis {\n  /**\n   *\n   */\n  majorTick: XAxisMajorTick;\n}\nexport interface XAxisMajorTick {\n  /**\n   *\n   */\n  lineStyle: string;\n  /**\n   *\n   */\n  lineWidth: number;\n  /**\n   *\n   */\n  lineColor: string;\n  /**\n   *\n   */\n  rendered: string;\n}\nexport interface PlotArea {\n  /**\n   *\n   */\n  backgroundColor: string;\n}\nexport interface ValueFormats {\n  /**\n   *\n   */\n  group: ValueFormatsGroup;\n  /**\n   *\n   */\n  series: ValueFormatsSeries;\n  /**\n   *\n   */\n  value: ValueFormatsValue;\n}\nexport interface ValueFormatsGroup {\n  /**\n   *\n   */\n  tooltipLabel: string;\n  /**\n   *\n   */\n  tooltipDisplay: string;\n}\nexport interface ValueFormatsSeries {\n  /**\n   *\n   */\n  tooltipLabel: string;\n  /**\n   *\n   */\n  tooltipDisplay: string;\n}\nexport interface ValueFormatsValue {\n  /**\n   *\n   */\n  converter: any;\n  /**\n   *\n   */\n  tooltipLabel: string;\n  /**\n   *\n   */\n  tooltipDisplay: string;\n}\nexport interface Legend {\n  /**\n   *\n   */\n  position: string;\n  /**\n   *\n   */\n  rendered: string;\n  /**\n   *\n   */\n  maxSize: number | string;\n  /**\n   *\n   */\n  size: number | string;\n  /**\n   *\n   */\n  symbolHeight: number;\n  /**\n   *\n   */\n  symbolWidth: number;\n}\n"]}