{
  "name": "oj-c",
  "version": "16.0.1",
  "components": {
    "oj-c-area-chart": {
      "name": "area-chart",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAreaChartElement"
      ],
      "description": "An area chart displays information graphically using lines and filled areas, making relationships among the data easier to understand.",
      "displayName": "Area Chart",
      "main": "oj-c/area-chart",
      "help": "oj-c.AreaChart.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/area-chart",
          "defaultColumns": 6,
          "minColumns": 1
        },
        "oracle": {
          "icon": "oj-ux-ico-area-chart",
          "uxSpecs": [
            "area-chart"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "type",
            "orientation",
            "legend.title",
            "legend.position",
            "legend.rendered",
            "stack",
            "xAxis.title",
            "yAxis.title",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "16.0.0",
      "properties": {
        "data": {
          "type": "DataProvider|null",
          "description": "Specifies the DataProvider for the sections and items of the area-chart.",
          "displayName": "Data",
          "help": "#data"
        },
        "seriesComparator": {
          "type": "function",
          "description": "A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data.",
          "displayName": "Series Comparator",
          "help": "#seriesComparator"
        },
        "groupComparator": {
          "type": "function",
          "description": "A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data.",
          "displayName": "Group Comparator",
          "help": "#groupComparator"
        },
        "stack": {
          "type": "string",
          "description": "Defines whether the data items are stacked.",
          "displayName": "stack",
          "help": "#stack",
          "propertyEditorValues": {
            "on": {
              "description": "Data items belonging to same group will be stacked.",
              "displayName": "On"
            },
            "off": {
              "description": "Data items will not be stacked.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled.",
          "displayName": "Drilling",
          "help": "#drilling",
          "propertyEditorValues": {
            "on": {
              "description": "Drilling is enabled on data items, axis labels and legend items.",
              "displayName": "On"
            },
            "off": {
              "description": "Drilling is not enabled.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "orientation": {
          "type": "string",
          "description": "The orientation of the chart.",
          "displayName": "Orientation",
          "help": "#orientation",
          "propertyEditorValues": {
            "horizontal": {
              "description": "Chart will be horizontally oriented.",
              "displayName": "On"
            },
            "vertical": {
              "description": "Chart will be vertically oriented.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "value": "vertical"
        },
        "yAxis": {
          "type": "object",
          "properties": {
            "majorTick": {
              "type": "object",
              "properties": {
                "lineStyle": {
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineWidth": {
                  "type": "number"
                },
                "lineColor": {
                  "type": "string",
                  "propertyEditorValues": {
                    "transparent": {},
                    "inherit": {},
                    "initial": {},
                    "-moz-initial": {},
                    "revert": {},
                    "revert-layer": {},
                    "unset": {},
                    "aliceblue": {},
                    "antiquewhite": {},
                    "aqua": {},
                    "aquamarine": {},
                    "azure": {},
                    "beige": {},
                    "bisque": {},
                    "black": {},
                    "blanchedalmond": {},
                    "blue": {},
                    "blueviolet": {},
                    "brown": {},
                    "burlywood": {},
                    "cadetblue": {},
                    "chartreuse": {},
                    "chocolate": {},
                    "coral": {},
                    "cornflowerblue": {},
                    "cornsilk": {},
                    "crimson": {},
                    "cyan": {},
                    "darkblue": {},
                    "darkcyan": {},
                    "darkgoldenrod": {},
                    "darkgray": {},
                    "darkgreen": {},
                    "darkgrey": {},
                    "darkkhaki": {},
                    "darkmagenta": {},
                    "darkolivegreen": {},
                    "darkorange": {},
                    "darkorchid": {},
                    "darkred": {},
                    "darksalmon": {},
                    "darkseagreen": {},
                    "darkslateblue": {},
                    "darkslategray": {},
                    "darkslategrey": {},
                    "darkturquoise": {},
                    "darkviolet": {},
                    "deeppink": {},
                    "deepskyblue": {},
                    "dimgray": {},
                    "dimgrey": {},
                    "dodgerblue": {},
                    "firebrick": {},
                    "floralwhite": {},
                    "forestgreen": {},
                    "fuchsia": {},
                    "gainsboro": {},
                    "ghostwhite": {},
                    "gold": {},
                    "goldenrod": {},
                    "gray": {},
                    "green": {},
                    "greenyellow": {},
                    "grey": {},
                    "honeydew": {},
                    "hotpink": {},
                    "indianred": {},
                    "indigo": {},
                    "ivory": {},
                    "khaki": {},
                    "lavender": {},
                    "lavenderblush": {},
                    "lawngreen": {},
                    "lemonchiffon": {},
                    "lightblue": {},
                    "lightcoral": {},
                    "lightcyan": {},
                    "lightgoldenrodyellow": {},
                    "lightgray": {},
                    "lightgreen": {},
                    "lightgrey": {},
                    "lightpink": {},
                    "lightsalmon": {},
                    "lightseagreen": {},
                    "lightskyblue": {},
                    "lightslategray": {},
                    "lightslategrey": {},
                    "lightsteelblue": {},
                    "lightyellow": {},
                    "lime": {},
                    "limegreen": {},
                    "linen": {},
                    "magenta": {},
                    "maroon": {},
                    "mediumaquamarine": {},
                    "mediumblue": {},
                    "mediumorchid": {},
                    "mediumpurple": {},
                    "mediumseagreen": {},
                    "mediumslateblue": {},
                    "mediumspringgreen": {},
                    "mediumturquoise": {},
                    "mediumvioletred": {},
                    "midnightblue": {},
                    "mintcream": {},
                    "mistyrose": {},
                    "moccasin": {},
                    "navajowhite": {},
                    "navy": {},
                    "oldlace": {},
                    "olive": {},
                    "olivedrab": {},
                    "orange": {},
                    "orangered": {},
                    "orchid": {},
                    "palegoldenrod": {},
                    "palegreen": {},
                    "paleturquoise": {},
                    "palevioletred": {},
                    "papayawhip": {},
                    "peachpuff": {},
                    "peru": {},
                    "pink": {},
                    "plum": {},
                    "powderblue": {},
                    "purple": {},
                    "rebeccapurple": {},
                    "red": {},
                    "rosybrown": {},
                    "royalblue": {},
                    "saddlebrown": {},
                    "salmon": {},
                    "sandybrown": {},
                    "seagreen": {},
                    "seashell": {},
                    "sienna": {},
                    "silver": {},
                    "skyblue": {},
                    "slateblue": {},
                    "slategray": {},
                    "slategrey": {},
                    "snow": {},
                    "springgreen": {},
                    "steelblue": {},
                    "tan": {},
                    "teal": {},
                    "thistle": {},
                    "tomato": {},
                    "turquoise": {},
                    "violet": {},
                    "wheat": {},
                    "white": {},
                    "whitesmoke": {},
                    "yellow": {},
                    "yellowgreen": {},
                    "ActiveBorder": {},
                    "ActiveCaption": {},
                    "AppWorkspace": {},
                    "Background": {},
                    "ButtonFace": {},
                    "ButtonHighlight": {},
                    "ButtonShadow": {},
                    "ButtonText": {},
                    "CaptionText": {},
                    "GrayText": {},
                    "Highlight": {},
                    "HighlightText": {},
                    "InactiveBorder": {},
                    "InactiveCaption": {},
                    "InactiveCaptionText": {},
                    "InfoBackground": {},
                    "InfoText": {},
                    "Menu": {},
                    "MenuText": {},
                    "Scrollbar": {},
                    "ThreeDDarkShadow": {},
                    "ThreeDFace": {},
                    "ThreeDHighlight": {},
                    "ThreeDLightShadow": {},
                    "ThreeDShadow": {},
                    "Window": {},
                    "WindowFrame": {},
                    "WindowText": {},
                    "currentcolor": {}
                  }
                },
                "rendered": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "minorTick": {
              "type": "object",
              "properties": {
                "lineStyle": {
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineWidth": {
                  "type": "number"
                },
                "lineColor": {
                  "type": "string",
                  "propertyEditorValues": {
                    "transparent": {},
                    "inherit": {},
                    "initial": {},
                    "-moz-initial": {},
                    "revert": {},
                    "revert-layer": {},
                    "unset": {},
                    "aliceblue": {},
                    "antiquewhite": {},
                    "aqua": {},
                    "aquamarine": {},
                    "azure": {},
                    "beige": {},
                    "bisque": {},
                    "black": {},
                    "blanchedalmond": {},
                    "blue": {},
                    "blueviolet": {},
                    "brown": {},
                    "burlywood": {},
                    "cadetblue": {},
                    "chartreuse": {},
                    "chocolate": {},
                    "coral": {},
                    "cornflowerblue": {},
                    "cornsilk": {},
                    "crimson": {},
                    "cyan": {},
                    "darkblue": {},
                    "darkcyan": {},
                    "darkgoldenrod": {},
                    "darkgray": {},
                    "darkgreen": {},
                    "darkgrey": {},
                    "darkkhaki": {},
                    "darkmagenta": {},
                    "darkolivegreen": {},
                    "darkorange": {},
                    "darkorchid": {},
                    "darkred": {},
                    "darksalmon": {},
                    "darkseagreen": {},
                    "darkslateblue": {},
                    "darkslategray": {},
                    "darkslategrey": {},
                    "darkturquoise": {},
                    "darkviolet": {},
                    "deeppink": {},
                    "deepskyblue": {},
                    "dimgray": {},
                    "dimgrey": {},
                    "dodgerblue": {},
                    "firebrick": {},
                    "floralwhite": {},
                    "forestgreen": {},
                    "fuchsia": {},
                    "gainsboro": {},
                    "ghostwhite": {},
                    "gold": {},
                    "goldenrod": {},
                    "gray": {},
                    "green": {},
                    "greenyellow": {},
                    "grey": {},
                    "honeydew": {},
                    "hotpink": {},
                    "indianred": {},
                    "indigo": {},
                    "ivory": {},
                    "khaki": {},
                    "lavender": {},
                    "lavenderblush": {},
                    "lawngreen": {},
                    "lemonchiffon": {},
                    "lightblue": {},
                    "lightcoral": {},
                    "lightcyan": {},
                    "lightgoldenrodyellow": {},
                    "lightgray": {},
                    "lightgreen": {},
                    "lightgrey": {},
                    "lightpink": {},
                    "lightsalmon": {},
                    "lightseagreen": {},
                    "lightskyblue": {},
                    "lightslategray": {},
                    "lightslategrey": {},
                    "lightsteelblue": {},
                    "lightyellow": {},
                    "lime": {},
                    "limegreen": {},
                    "linen": {},
                    "magenta": {},
                    "maroon": {},
                    "mediumaquamarine": {},
                    "mediumblue": {},
                    "mediumorchid": {},
                    "mediumpurple": {},
                    "mediumseagreen": {},
                    "mediumslateblue": {},
                    "mediumspringgreen": {},
                    "mediumturquoise": {},
                    "mediumvioletred": {},
                    "midnightblue": {},
                    "mintcream": {},
                    "mistyrose": {},
                    "moccasin": {},
                    "navajowhite": {},
                    "navy": {},
                    "oldlace": {},
                    "olive": {},
                    "olivedrab": {},
                    "orange": {},
                    "orangered": {},
                    "orchid": {},
                    "palegoldenrod": {},
                    "palegreen": {},
                    "paleturquoise": {},
                    "palevioletred": {},
                    "papayawhip": {},
                    "peachpuff": {},
                    "peru": {},
                    "pink": {},
                    "plum": {},
                    "powderblue": {},
                    "purple": {},
                    "rebeccapurple": {},
                    "red": {},
                    "rosybrown": {},
                    "royalblue": {},
                    "saddlebrown": {},
                    "salmon": {},
                    "sandybrown": {},
                    "seagreen": {},
                    "seashell": {},
                    "sienna": {},
                    "silver": {},
                    "skyblue": {},
                    "slateblue": {},
                    "slategray": {},
                    "slategrey": {},
                    "snow": {},
                    "springgreen": {},
                    "steelblue": {},
                    "tan": {},
                    "teal": {},
                    "thistle": {},
                    "tomato": {},
                    "turquoise": {},
                    "violet": {},
                    "wheat": {},
                    "white": {},
                    "whitesmoke": {},
                    "yellow": {},
                    "yellowgreen": {},
                    "ActiveBorder": {},
                    "ActiveCaption": {},
                    "AppWorkspace": {},
                    "Background": {},
                    "ButtonFace": {},
                    "ButtonHighlight": {},
                    "ButtonShadow": {},
                    "ButtonText": {},
                    "CaptionText": {},
                    "GrayText": {},
                    "Highlight": {},
                    "HighlightText": {},
                    "InactiveBorder": {},
                    "InactiveCaption": {},
                    "InactiveCaptionText": {},
                    "InfoBackground": {},
                    "InfoText": {},
                    "Menu": {},
                    "MenuText": {},
                    "Scrollbar": {},
                    "ThreeDDarkShadow": {},
                    "ThreeDFace": {},
                    "ThreeDHighlight": {},
                    "ThreeDLightShadow": {},
                    "ThreeDShadow": {},
                    "Window": {},
                    "WindowFrame": {},
                    "WindowText": {},
                    "currentcolor": {}
                  }
                },
                "rendered": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            }
          }
        },
        "xAxis": {
          "type": "object",
          "properties": {
            "majorTick": {
              "type": "object",
              "properties": {
                "lineStyle": {
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineWidth": {
                  "type": "number"
                },
                "lineColor": {
                  "type": "string",
                  "propertyEditorValues": {
                    "transparent": {},
                    "inherit": {},
                    "initial": {},
                    "-moz-initial": {},
                    "revert": {},
                    "revert-layer": {},
                    "unset": {},
                    "aliceblue": {},
                    "antiquewhite": {},
                    "aqua": {},
                    "aquamarine": {},
                    "azure": {},
                    "beige": {},
                    "bisque": {},
                    "black": {},
                    "blanchedalmond": {},
                    "blue": {},
                    "blueviolet": {},
                    "brown": {},
                    "burlywood": {},
                    "cadetblue": {},
                    "chartreuse": {},
                    "chocolate": {},
                    "coral": {},
                    "cornflowerblue": {},
                    "cornsilk": {},
                    "crimson": {},
                    "cyan": {},
                    "darkblue": {},
                    "darkcyan": {},
                    "darkgoldenrod": {},
                    "darkgray": {},
                    "darkgreen": {},
                    "darkgrey": {},
                    "darkkhaki": {},
                    "darkmagenta": {},
                    "darkolivegreen": {},
                    "darkorange": {},
                    "darkorchid": {},
                    "darkred": {},
                    "darksalmon": {},
                    "darkseagreen": {},
                    "darkslateblue": {},
                    "darkslategray": {},
                    "darkslategrey": {},
                    "darkturquoise": {},
                    "darkviolet": {},
                    "deeppink": {},
                    "deepskyblue": {},
                    "dimgray": {},
                    "dimgrey": {},
                    "dodgerblue": {},
                    "firebrick": {},
                    "floralwhite": {},
                    "forestgreen": {},
                    "fuchsia": {},
                    "gainsboro": {},
                    "ghostwhite": {},
                    "gold": {},
                    "goldenrod": {},
                    "gray": {},
                    "green": {},
                    "greenyellow": {},
                    "grey": {},
                    "honeydew": {},
                    "hotpink": {},
                    "indianred": {},
                    "indigo": {},
                    "ivory": {},
                    "khaki": {},
                    "lavender": {},
                    "lavenderblush": {},
                    "lawngreen": {},
                    "lemonchiffon": {},
                    "lightblue": {},
                    "lightcoral": {},
                    "lightcyan": {},
                    "lightgoldenrodyellow": {},
                    "lightgray": {},
                    "lightgreen": {},
                    "lightgrey": {},
                    "lightpink": {},
                    "lightsalmon": {},
                    "lightseagreen": {},
                    "lightskyblue": {},
                    "lightslategray": {},
                    "lightslategrey": {},
                    "lightsteelblue": {},
                    "lightyellow": {},
                    "lime": {},
                    "limegreen": {},
                    "linen": {},
                    "magenta": {},
                    "maroon": {},
                    "mediumaquamarine": {},
                    "mediumblue": {},
                    "mediumorchid": {},
                    "mediumpurple": {},
                    "mediumseagreen": {},
                    "mediumslateblue": {},
                    "mediumspringgreen": {},
                    "mediumturquoise": {},
                    "mediumvioletred": {},
                    "midnightblue": {},
                    "mintcream": {},
                    "mistyrose": {},
                    "moccasin": {},
                    "navajowhite": {},
                    "navy": {},
                    "oldlace": {},
                    "olive": {},
                    "olivedrab": {},
                    "orange": {},
                    "orangered": {},
                    "orchid": {},
                    "palegoldenrod": {},
                    "palegreen": {},
                    "paleturquoise": {},
                    "palevioletred": {},
                    "papayawhip": {},
                    "peachpuff": {},
                    "peru": {},
                    "pink": {},
                    "plum": {},
                    "powderblue": {},
                    "purple": {},
                    "rebeccapurple": {},
                    "red": {},
                    "rosybrown": {},
                    "royalblue": {},
                    "saddlebrown": {},
                    "salmon": {},
                    "sandybrown": {},
                    "seagreen": {},
                    "seashell": {},
                    "sienna": {},
                    "silver": {},
                    "skyblue": {},
                    "slateblue": {},
                    "slategray": {},
                    "slategrey": {},
                    "snow": {},
                    "springgreen": {},
                    "steelblue": {},
                    "tan": {},
                    "teal": {},
                    "thistle": {},
                    "tomato": {},
                    "turquoise": {},
                    "violet": {},
                    "wheat": {},
                    "white": {},
                    "whitesmoke": {},
                    "yellow": {},
                    "yellowgreen": {},
                    "ActiveBorder": {},
                    "ActiveCaption": {},
                    "AppWorkspace": {},
                    "Background": {},
                    "ButtonFace": {},
                    "ButtonHighlight": {},
                    "ButtonShadow": {},
                    "ButtonText": {},
                    "CaptionText": {},
                    "GrayText": {},
                    "Highlight": {},
                    "HighlightText": {},
                    "InactiveBorder": {},
                    "InactiveCaption": {},
                    "InactiveCaptionText": {},
                    "InfoBackground": {},
                    "InfoText": {},
                    "Menu": {},
                    "MenuText": {},
                    "Scrollbar": {},
                    "ThreeDDarkShadow": {},
                    "ThreeDFace": {},
                    "ThreeDHighlight": {},
                    "ThreeDLightShadow": {},
                    "ThreeDShadow": {},
                    "Window": {},
                    "WindowFrame": {},
                    "WindowText": {},
                    "currentcolor": {}
                  }
                },
                "rendered": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            }
          }
        },
        "plotArea": {
          "type": "object",
          "properties": {
            "backgroundColor": {
              "type": "string",
              "propertyEditorValues": {
                "transparent": {},
                "inherit": {},
                "initial": {},
                "-moz-initial": {},
                "revert": {},
                "revert-layer": {},
                "unset": {},
                "aliceblue": {},
                "antiquewhite": {},
                "aqua": {},
                "aquamarine": {},
                "azure": {},
                "beige": {},
                "bisque": {},
                "black": {},
                "blanchedalmond": {},
                "blue": {},
                "blueviolet": {},
                "brown": {},
                "burlywood": {},
                "cadetblue": {},
                "chartreuse": {},
                "chocolate": {},
                "coral": {},
                "cornflowerblue": {},
                "cornsilk": {},
                "crimson": {},
                "cyan": {},
                "darkblue": {},
                "darkcyan": {},
                "darkgoldenrod": {},
                "darkgray": {},
                "darkgreen": {},
                "darkgrey": {},
                "darkkhaki": {},
                "darkmagenta": {},
                "darkolivegreen": {},
                "darkorange": {},
                "darkorchid": {},
                "darkred": {},
                "darksalmon": {},
                "darkseagreen": {},
                "darkslateblue": {},
                "darkslategray": {},
                "darkslategrey": {},
                "darkturquoise": {},
                "darkviolet": {},
                "deeppink": {},
                "deepskyblue": {},
                "dimgray": {},
                "dimgrey": {},
                "dodgerblue": {},
                "firebrick": {},
                "floralwhite": {},
                "forestgreen": {},
                "fuchsia": {},
                "gainsboro": {},
                "ghostwhite": {},
                "gold": {},
                "goldenrod": {},
                "gray": {},
                "green": {},
                "greenyellow": {},
                "grey": {},
                "honeydew": {},
                "hotpink": {},
                "indianred": {},
                "indigo": {},
                "ivory": {},
                "khaki": {},
                "lavender": {},
                "lavenderblush": {},
                "lawngreen": {},
                "lemonchiffon": {},
                "lightblue": {},
                "lightcoral": {},
                "lightcyan": {},
                "lightgoldenrodyellow": {},
                "lightgray": {},
                "lightgreen": {},
                "lightgrey": {},
                "lightpink": {},
                "lightsalmon": {},
                "lightseagreen": {},
                "lightskyblue": {},
                "lightslategray": {},
                "lightslategrey": {},
                "lightsteelblue": {},
                "lightyellow": {},
                "lime": {},
                "limegreen": {},
                "linen": {},
                "magenta": {},
                "maroon": {},
                "mediumaquamarine": {},
                "mediumblue": {},
                "mediumorchid": {},
                "mediumpurple": {},
                "mediumseagreen": {},
                "mediumslateblue": {},
                "mediumspringgreen": {},
                "mediumturquoise": {},
                "mediumvioletred": {},
                "midnightblue": {},
                "mintcream": {},
                "mistyrose": {},
                "moccasin": {},
                "navajowhite": {},
                "navy": {},
                "oldlace": {},
                "olive": {},
                "olivedrab": {},
                "orange": {},
                "orangered": {},
                "orchid": {},
                "palegoldenrod": {},
                "palegreen": {},
                "paleturquoise": {},
                "palevioletred": {},
                "papayawhip": {},
                "peachpuff": {},
                "peru": {},
                "pink": {},
                "plum": {},
                "powderblue": {},
                "purple": {},
                "rebeccapurple": {},
                "red": {},
                "rosybrown": {},
                "royalblue": {},
                "saddlebrown": {},
                "salmon": {},
                "sandybrown": {},
                "seagreen": {},
                "seashell": {},
                "sienna": {},
                "silver": {},
                "skyblue": {},
                "slateblue": {},
                "slategray": {},
                "slategrey": {},
                "snow": {},
                "springgreen": {},
                "steelblue": {},
                "tan": {},
                "teal": {},
                "thistle": {},
                "tomato": {},
                "turquoise": {},
                "violet": {},
                "wheat": {},
                "white": {},
                "whitesmoke": {},
                "yellow": {},
                "yellowgreen": {},
                "ActiveBorder": {},
                "ActiveCaption": {},
                "AppWorkspace": {},
                "Background": {},
                "ButtonFace": {},
                "ButtonHighlight": {},
                "ButtonShadow": {},
                "ButtonText": {},
                "CaptionText": {},
                "GrayText": {},
                "Highlight": {},
                "HighlightText": {},
                "InactiveBorder": {},
                "InactiveCaption": {},
                "InactiveCaptionText": {},
                "InfoBackground": {},
                "InfoText": {},
                "Menu": {},
                "MenuText": {},
                "Scrollbar": {},
                "ThreeDDarkShadow": {},
                "ThreeDFace": {},
                "ThreeDHighlight": {},
                "ThreeDLightShadow": {},
                "ThreeDShadow": {},
                "Window": {},
                "WindowFrame": {},
                "WindowText": {},
                "currentcolor": {}
              }
            }
          }
        },
        "zoomAndScroll": {
          "type": "string",
          "enumValues": [
            "off",
            "live"
          ]
        },
        "valueFormats": {
          "type": "object",
          "properties": {
            "group": {
              "type": "object",
              "properties": {
                "tooltipLabel": {
                  "type": "string"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            },
            "series": {
              "type": "object",
              "properties": {
                "tooltipLabel": {
                  "type": "string"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            },
            "value": {
              "type": "object",
              "properties": {
                "converter": {
                  "type": "any"
                },
                "tooltipLabel": {
                  "type": "string"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            }
          }
        },
        "selectionMode": {
          "type": "string",
          "description": "Specifies the selection mode.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "enumValues": [
            "none",
            "multiple",
            "single"
          ],
          "value": "none"
        },
        "selection": {
          "type": "Array<any>",
          "description": "An array containing the ids of the initially selected data items.",
          "displayName": "Selection",
          "help": "#selection",
          "writeback": true,
          "value": []
        },
        "hiddenCategories": {
          "type": "Array<string>",
          "writeback": true,
          "value": []
        },
        "highlightedCategories": {
          "type": "Array<string>",
          "description": "An array of category string used for highlighting.",
          "displayName": "Highlighted Categories",
          "help": "#highlightedCategories",
          "writeback": true,
          "value": []
        },
        "hideAndShowBehavior": {
          "type": "string",
          "description": "Defines the hide and show behavior that is performed when clicking on a leegnd item.",
          "displayName": "Hide and Show Behavior",
          "enumValues": [
            "none",
            "withoutRescale",
            "withRescale"
          ],
          "value": "none"
        },
        "hoverBehavior": {
          "type": "string",
          "description": "Defines the behavior applied when hovering over data items.",
          "displayName": "Hover Behavior",
          "enumValues": [
            "none",
            "dim"
          ],
          "value": "none"
        },
        "highlightMatch": {
          "type": "string",
          "description": "The matching condition for the highlighted property.",
          "displayName": "Highlight Match",
          "enumValues": [
            "all",
            "any"
          ],
          "value": "any"
        },
        "legend": {
          "type": "object",
          "description": "An object defining the style, positioning, and behavior of the legend.",
          "properties": {
            "position": {
              "type": "string",
              "enumValues": [
                "auto",
                "end",
                "start",
                "top",
                "bottom"
              ],
              "value": "auto"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "value": "on"
            },
            "maxSize": {
              "type": "number|string"
            },
            "size": {
              "type": "number|string"
            },
            "symbolHeight": {
              "type": "number"
            },
            "symbolWidth": {
              "type": "number"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the chart. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            }
          }
        },
        "seriesTemplate": {
          "description": "The seriesTemplate slot is used to specify the template for generating the series properties of the chart. See the Help documentation for more information.",
          "displayName": "seriesTemplate",
          "help": "#seriesTemplate",
          "maxItems": 1,
          "data": {
            "items": {
              "type": "Array<object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "type": "any"
                    },
                    "key": {
                      "type": "any"
                    },
                    "index": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "id": {
              "type": "string"
            },
            "index": {
              "type": "number"
            }
          }
        },
        "groupTemplate": {
          "description": "The groupTemplate slot is used to specify the template for generating the group properties of the chart. See the Help documentation for more information.",
          "displayName": "groupTemplate",
          "help": "#groupTemplate",
          "maxItems": 1,
          "data": {
            "items": {
              "type": "Array<object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "type": "any"
                    },
                    "key": {
                      "type": "any"
                    },
                    "index": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "ids": {
              "type": "Array<string>"
            },
            "index": {
              "type": "number"
            },
            "depth": {
              "type": "number"
            }
          }
        }
      },
      "events": {
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
          "help": "#event:ViewportChange",
          "detail": {
            "startGroup": {
              "type": "string",
              "description": "The start group of the new viewport on a chart with categorical axis."
            },
            "endGroup": {
              "type": "string",
              "description": "The end group of the new viewport on a chart with categorical axis."
            },
            "xMax": {
              "type": "number",
              "description": "The maximum x value of the new viewport."
            },
            "xMin": {
              "type": "number",
              "description": "The minimum x value of the new viewport."
            },
            "yMax": {
              "type": "number",
              "description": "The maximum y value of the new viewport."
            },
            "yMin": {
              "type": "number",
              "description": "The minimum y value of the new viewport."
            }
          }
        },
        "ojItemDrill": {
          "description": "Triggered on a chart item (double click if selection is enabled, single click otherwise).",
          "help": "#event:ItemDrill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "series": {
              "type": "any",
              "description": "The series id of the drilled object."
            },
            "group": {
              "type": "any",
              "description": "The group id of the drilled object."
            },
            "data": {
              "type": "object",
              "description": "The data object of the drilled item.",
              "properties": {
                "id": {
                  "type": "any"
                },
                "seriesId": {
                  "type": "string",
                  "description": "The id for the series the item belongs to."
                },
                "groupId": {
                  "type": "Array<string>",
                  "description": "The array of id(s) for the group(s) the item belongs to"
                },
                "value": {
                  "type": "number",
                  "description": "The array of id(s) for the group(s) the item belongs to"
                },
                "color": {
                  "type": "string",
                  "description": "The color of the data item."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers. Only applies to line, area, and scatter series."
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An optional array of category strings corresponding to this data item."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled for the data item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "shortDesc": {
                  "type": "string"
                }
              }
            },
            "itemData": {
              "type": "any",
              "description": "The row data object of the drilled item. This will only be set if a DataProvider is being used."
            },
            "seriesData": {
              "type": "object",
              "description": "The data for the series of the drilled object",
              "properties": {
                "items": {
                  "type": "Array<object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "type": "any"
                        },
                        "seriesId": {
                          "type": "string",
                          "description": "The id for the series the item belongs to.",
                          "displayName": "Series Id",
                          "help": "#seriesId"
                        },
                        "groupId": {
                          "type": "Array<string>",
                          "description": "The array of id(s) for the group(s) the item belongs to",
                          "displayName": "Group Id",
                          "help": "#groupId"
                        },
                        "value": {
                          "type": "number",
                          "description": "The array of id(s) for the group(s) the item belongs to",
                          "displayName": "Value",
                          "help": "#value"
                        },
                        "color": {
                          "type": "string",
                          "description": "The color of the data item.",
                          "displayName": "Color",
                          "help": "#color"
                        },
                        "markerDisplayed": {
                          "type": "string",
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Displayed",
                          "help": "#markerDisplayed",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ]
                        },
                        "markerShape": {
                          "type": "string",
                          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Shape",
                          "help": "#markerShape",
                          "enumValues": [
                            "auto",
                            "square",
                            "circle",
                            "diamond",
                            "human",
                            "plus",
                            "star",
                            "triangleDown",
                            "triangleUp"
                          ]
                        },
                        "markerSize": {
                          "type": "number",
                          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                          "displayName": "Marker Size",
                          "help": "#markerSize"
                        },
                        "categories": {
                          "type": "Array<string>",
                          "description": "An optional array of category strings corresponding to this data item.",
                          "displayName": "Categories",
                          "help": "#categories"
                        },
                        "drilling": {
                          "type": "string",
                          "description": "Whether drilling is enabled for the data item.",
                          "displayName": "Drilling",
                          "help": "#drilling",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ]
                        },
                        "shortDesc": {
                          "type": "string",
                          "displayName": "Short Desc",
                          "help": "#shortDesc"
                        }
                      }
                    }
                  }
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An array of category strings corresponding to the tag cloud items."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the series. The chart legend item will inherit this color value."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled on the series item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "lineType": {
                  "type": "string",
                  "description": "The line type of the data line or area.",
                  "enumValues": [
                    "curved",
                    "straight"
                  ]
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerColor": {
                  "type": "string",
                  "description": "The color of the data markers, if different from the series color."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series."
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the series, displayed in the legend and tooltips."
                },
                "shortDesc": {
                  "type": "string",
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series."
                }
              }
            },
            "groupData": {
              "type": "object",
              "description": "An array of data for the group the drilled object belongs to.",
              "properties": {
                "drilling": {
                  "type": "string",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                }
              }
            }
          }
        },
        "ojGroupDrill": {
          "description": "Triggered on a chart group drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "#event:GroupDrill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "group": {
              "type": "any",
              "description": "The group id of the drilled object."
            },
            "groupData": {
              "type": "object",
              "description": "An array of data for the group the drilled object belongs to.",
              "properties": {
                "drilling": {
                  "type": "string",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                }
              }
            },
            "items": {
              "type": "Array<object>",
              "description": "An array containing objects describing the data items belonging to the drilled group.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "type": "any"
                    },
                    "seriesId": {
                      "type": "string",
                      "description": "The id for the series the item belongs to.",
                      "displayName": "Series Id",
                      "help": "#seriesId"
                    },
                    "groupId": {
                      "type": "Array<string>",
                      "description": "The array of id(s) for the group(s) the item belongs to",
                      "displayName": "Group Id",
                      "help": "#groupId"
                    },
                    "value": {
                      "type": "number",
                      "description": "The array of id(s) for the group(s) the item belongs to",
                      "displayName": "Value",
                      "help": "#value"
                    },
                    "color": {
                      "type": "string",
                      "description": "The color of the data item.",
                      "displayName": "Color",
                      "help": "#color"
                    },
                    "markerDisplayed": {
                      "type": "string",
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Displayed",
                      "help": "#markerDisplayed",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "markerShape": {
                      "type": "string",
                      "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Shape",
                      "help": "#markerShape",
                      "enumValues": [
                        "auto",
                        "square",
                        "circle",
                        "diamond",
                        "human",
                        "plus",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ]
                    },
                    "markerSize": {
                      "type": "number",
                      "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                      "displayName": "Marker Size",
                      "help": "#markerSize"
                    },
                    "categories": {
                      "type": "Array<string>",
                      "description": "An optional array of category strings corresponding to this data item.",
                      "displayName": "Categories",
                      "help": "#categories"
                    },
                    "drilling": {
                      "type": "string",
                      "description": "Whether drilling is enabled for the data item.",
                      "displayName": "Drilling",
                      "help": "#drilling",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "shortDesc": {
                      "type": "string",
                      "displayName": "Short Desc",
                      "help": "#shortDesc"
                    }
                  }
                }
              }
            }
          }
        },
        "ojSeriesDrill": {
          "description": "Triggered on a chart series drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "#event:SeriesDrill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "series": {
              "type": "any",
              "description": "The series id of the drilled object."
            },
            "seriesData": {
              "type": "object",
              "description": "The data for the series of the drilled object",
              "properties": {
                "items": {
                  "type": "Array<object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "type": "any"
                        },
                        "seriesId": {
                          "type": "string",
                          "description": "The id for the series the item belongs to.",
                          "displayName": "Series Id",
                          "help": "#seriesId"
                        },
                        "groupId": {
                          "type": "Array<string>",
                          "description": "The array of id(s) for the group(s) the item belongs to",
                          "displayName": "Group Id",
                          "help": "#groupId"
                        },
                        "value": {
                          "type": "number",
                          "description": "The array of id(s) for the group(s) the item belongs to",
                          "displayName": "Value",
                          "help": "#value"
                        },
                        "color": {
                          "type": "string",
                          "description": "The color of the data item.",
                          "displayName": "Color",
                          "help": "#color"
                        },
                        "markerDisplayed": {
                          "type": "string",
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Displayed",
                          "help": "#markerDisplayed",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ]
                        },
                        "markerShape": {
                          "type": "string",
                          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Shape",
                          "help": "#markerShape",
                          "enumValues": [
                            "auto",
                            "square",
                            "circle",
                            "diamond",
                            "human",
                            "plus",
                            "star",
                            "triangleDown",
                            "triangleUp"
                          ]
                        },
                        "markerSize": {
                          "type": "number",
                          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                          "displayName": "Marker Size",
                          "help": "#markerSize"
                        },
                        "categories": {
                          "type": "Array<string>",
                          "description": "An optional array of category strings corresponding to this data item.",
                          "displayName": "Categories",
                          "help": "#categories"
                        },
                        "drilling": {
                          "type": "string",
                          "description": "Whether drilling is enabled for the data item.",
                          "displayName": "Drilling",
                          "help": "#drilling",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ]
                        },
                        "shortDesc": {
                          "type": "string",
                          "displayName": "Short Desc",
                          "help": "#shortDesc"
                        }
                      }
                    }
                  }
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An array of category strings corresponding to the tag cloud items."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the series. The chart legend item will inherit this color value."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled on the series item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "lineType": {
                  "type": "string",
                  "description": "The line type of the data line or area.",
                  "enumValues": [
                    "curved",
                    "straight"
                  ]
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerColor": {
                  "type": "string",
                  "description": "The color of the data markers, if different from the series color."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series."
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the series, displayed in the legend and tooltips."
                },
                "shortDesc": {
                  "type": "string",
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series."
                }
              }
            },
            "items": {
              "type": "Array<object>",
              "description": "An array containing objects describing the data items belonging to the drilled group.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "type": "any"
                    },
                    "seriesId": {
                      "type": "string",
                      "description": "The id for the series the item belongs to.",
                      "displayName": "Series Id",
                      "help": "#seriesId"
                    },
                    "groupId": {
                      "type": "Array<string>",
                      "description": "The array of id(s) for the group(s) the item belongs to",
                      "displayName": "Group Id",
                      "help": "#groupId"
                    },
                    "value": {
                      "type": "number",
                      "description": "The array of id(s) for the group(s) the item belongs to",
                      "displayName": "Value",
                      "help": "#value"
                    },
                    "color": {
                      "type": "string",
                      "description": "The color of the data item.",
                      "displayName": "Color",
                      "help": "#color"
                    },
                    "markerDisplayed": {
                      "type": "string",
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Displayed",
                      "help": "#markerDisplayed",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "markerShape": {
                      "type": "string",
                      "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Shape",
                      "help": "#markerShape",
                      "enumValues": [
                        "auto",
                        "square",
                        "circle",
                        "diamond",
                        "human",
                        "plus",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ]
                    },
                    "markerSize": {
                      "type": "number",
                      "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                      "displayName": "Marker Size",
                      "help": "#markerSize"
                    },
                    "categories": {
                      "type": "Array<string>",
                      "description": "An optional array of category strings corresponding to this data item.",
                      "displayName": "Categories",
                      "help": "#categories"
                    },
                    "drilling": {
                      "type": "string",
                      "description": "Whether drilling is enabled for the data item.",
                      "displayName": "Drilling",
                      "help": "#drilling",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "shortDesc": {
                      "type": "string",
                      "displayName": "Short Desc",
                      "help": "#shortDesc"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-area-chart-item": {
      "name": "area-chart-item",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAreaChartItemElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-area-chart-item element is used to declare item properties",
      "displayName": "AreaChartItem",
      "main": "oj-c/area-chart-item",
      "help": "oj-c.AreaChartItem.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "seriesId": {
          "type": "string",
          "description": "The id for the series the item belongs to.",
          "displayName": "Series Id",
          "help": "#seriesId"
        },
        "groupId": {
          "type": "Array<string>",
          "description": "The array of id(s) for the group(s) the item belongs to",
          "displayName": "Group Id",
          "help": "#groupId"
        },
        "value": {
          "type": "number",
          "description": "The array of id(s) for the group(s) the item belongs to",
          "displayName": "Value",
          "help": "#value"
        },
        "color": {
          "type": "string",
          "description": "The color of the data item.",
          "displayName": "Color",
          "help": "#color"
        },
        "markerDisplayed": {
          "type": "string",
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed",
          "enumValues": [
            "auto",
            "off",
            "on"
          ]
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "enumValues": [
            "auto",
            "square",
            "circle",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp"
          ]
        },
        "markerSize": {
          "type": "number",
          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
          "displayName": "Marker Size",
          "help": "#markerSize"
        },
        "categories": {
          "type": "Array<string>",
          "description": "An optional array of category strings corresponding to this data item.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled for the data item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ]
        },
        "shortDesc": {
          "type": "string",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-area-chart-series": {
      "name": "area-chart-series",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAreaChartSeriesElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-area-chart-series element is used to declare series properties in the seriesTemplate",
      "displayName": "AreaChartSeries",
      "main": "oj-c/area-chart-series",
      "help": "oj-c.AreaChartSeries.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "categories": {
          "type": "Array<string>",
          "description": "An array of category strings corresponding to the tag cloud items.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "color": {
          "type": "string",
          "description": "The color of the series. The chart legend item will inherit this color value.",
          "displayName": "Color",
          "help": "#color"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled on the series item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ]
        },
        "lineType": {
          "type": "string",
          "description": "The line type of the data line or area.",
          "displayName": "Line Type",
          "help": "#lineType",
          "enumValues": [
            "curved",
            "straight"
          ]
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the data markers.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "enumValues": [
            "auto",
            "square",
            "circle",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp"
          ]
        },
        "markerColor": {
          "type": "string",
          "description": "The color of the data markers, if different from the series color.",
          "displayName": "Marker Color",
          "help": "#markerColor"
        },
        "markerDisplayed": {
          "type": "string",
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed"
        },
        "markerSize": {
          "type": "number",
          "description": "The size of the data markers.",
          "displayName": "Marker Size",
          "help": "#markerSize"
        },
        "name": {
          "type": "string",
          "description": "The name of the series, displayed in the legend and tooltips.",
          "displayName": "Name",
          "help": "#name"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-area-chart-group": {
      "name": "area-chart-group",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAreaChartGroupElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-area-chart-group element is used to declare group properties in the groupTemplate",
      "displayName": "AreaChartGroup",
      "main": "oj-c/area-chart-group",
      "help": "oj-c.AreaChartGroup.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled on the group label.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the group.",
          "displayName": "Name",
          "help": "#name"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of the group.",
          "displayName": "ShortDesc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-highlight-text": {
      "name": "highlight-text",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CHighlightTextElement"
      ],
      "displayName": "Highlight Text",
      "description": "A Highlight Text renders text with highlighting applied.",
      "help": "oj-c.HighlightText.html",
      "main": "oj-c/highlight-text",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "defaultColumns": 6,
          "minColumns": 2,
          "module": "oj-c/highlight-text"
        },
        "oracle": {
          "icon": "oj-ux-ico-background-color"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "text",
            "matchText"
          ]
        }
      ],
      "since": "15.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-highlight-text"
          ]
        }
      ],
      "properties": {
        "matchText": {
          "type": "string",
          "description": "The text string to match.",
          "displayName": "Match Text",
          "help": "#matchText",
          "translatable": true
        },
        "text": {
          "type": "string",
          "description": "The text string to apply highlighting to.",
          "displayName": "Text",
          "help": "#text",
          "translatable": true
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-number": {
      "name": "input-number",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputNumberElement"
      ],
      "displayName": "InputNumber",
      "description": "An input number displays a field that allows a user to enter a number value.",
      "help": "oj-c.InputNumber.html",
      "main": "oj-c/input-number",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-input-number"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-number",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-input-number",
          "uxSpecs": [
            "input-number"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "inputPrefix": {
          "type": "string",
          "description": "The text before the input text.",
          "displayName": "Input Prefix",
          "help": "#inputPrefix",
          "translatable": true
        },
        "inputSuffix": {
          "type": "string",
          "description": "The text after the input text.",
          "displayName": "Input Suffix",
          "help": "#inputSuffix",
          "translatable": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "number|null",
          "description": "The maximum allowed value",
          "displayName": "Max",
          "help": "#max"
        },
        "min": {
          "type": "number|null",
          "description": "The maximum allowed value",
          "displayName": "Max",
          "help": "#max"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "numberRangeExactMessageDetail": {
          "type": "string",
          "description": "Overrides the default NumberRangeValidator's exact message detail.",
          "displayName": "Number Range Exact Message Detail",
          "help": "#numberRangeExactMessageDetail",
          "translatable": true
        },
        "numberRangeOverflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default NumberRangeValidator's exact message detail.",
          "displayName": "Number Range Exact Message Detail",
          "help": "#numberRangeExactMessageDetail",
          "translatable": true
        },
        "numberRangeUnderflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default NumberRangeValidator's exact message detail.",
          "displayName": "Number Range Exact Message Detail",
          "help": "#numberRangeExactMessageDetail",
          "translatable": true
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "step": {
          "type": "number",
          "description": "Specifies the amount to increase or decrease the value when moving in step increments. If 0, no step functionality.",
          "displayName": "Step",
          "help": "#step"
        },
        "stepperVariant": {
          "type": "string",
          "description": "Variant style of step buttons. Quantitative is recommended only for non-negative integers where the step value is 1, which is common in ecommerce or procurement cases.",
          "displayName": "Stepper Variant",
          "help": "#stepperVariant",
          "propertyEditorValues": {
            "directional": {
              "description": "Displays directional buttons, grouped together and located at end of input.",
              "displayName": "Directional"
            },
            "quantitative": {
              "description": "Displays quantitative buttons, separated and located at start and end of input.",
              "displayName": "Quantitative"
            }
          },
          "enumValues": [
            "directional",
            "quantitative"
          ],
          "value": "directional"
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "number|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. If using 'number', you must set the converter attribute to a converter that formats to numeric characters only, otherwise the value will not be shown. The reason for this is oj-c-input-number uses the browser native input type='number' and when you set a value that contains a non-numeric character, browsers do not display the value. For example, '1,000' would not be shown. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            }
          },
          "enumValues": [
            "number",
            "auto",
            "text"
          ],
          "value": "auto"
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "transientValue": {
          "type": "number",
          "description": "Specifies the transient value of the component",
          "displayName": "Transient Value",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-password": {
      "name": "input-password",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputPasswordElement"
      ],
      "displayName": "InputPassword",
      "description": "An input password displays a field that allows a user to enter a password that will be masked.",
      "help": "oj-c.InputPassword.html",
      "main": "oj-c/input-password",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-password",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-password",
          "uxSpecs": [
            "input-password"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-input-password"
          ]
        }
      ],
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "clearIcon": {
          "type": "string",
          "description": "Specifies if an icon to clear the input field should be visible.",
          "displayName": "Clear Icon",
          "help": "#clearIcon",
          "propertyEditorValues": {
            "always": {
              "description": "The clear icon will always be shown.",
              "displayName": "Always"
            },
            "never": {
              "description": "The clear icon will never be shown (default, if unspecified).",
              "displayName": "Never"
            },
            "conditional": {
              "description": "The clear icon is visible under the following conditions: if the component has a non-empty value, and it either has focus or the mouse is over the field.",
              "displayName": "Conditional"
            }
          },
          "enumValues": [
            "conditional",
            "always",
            "never"
          ],
          "value": "never"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "maskIcon": {
          "type": "string",
          "description": "Represents the mask icon.",
          "displayName": "Mask Icon",
          "help": "#maskIcon",
          "propertyEditorValues": {
            "hidden": {
              "description": "The mask visibility icon is never visible.",
              "displayName": "Hidden"
            },
            "visible": {
              "description": "The mask visibility icon is always visible.",
              "displayName": "Visible"
            }
          },
          "enumValues": [
            "hidden",
            "visible"
          ],
          "value": "visible"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-text": {
      "name": "input-text",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputTextElement"
      ],
      "displayName": "InputText",
      "description": "An input text displays a field that allows a user to enter a text value.",
      "help": "oj-c.InputText.html",
      "main": "oj-c/input-text",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-text",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input",
          "uxSpecs": [
            "input-text"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "clearIcon",
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-input-text"
          ]
        }
      ],
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "clearIcon": {
          "type": "string",
          "description": "Specifies if an icon to clear the input field should be visible.",
          "displayName": "Clear Icon",
          "help": "#clearIcon",
          "propertyEditorValues": {
            "always": {
              "description": "The clear icon will always be shown.",
              "displayName": "Always"
            },
            "never": {
              "description": "The clear icon will never be shown (default, if unspecified).",
              "displayName": "Never"
            },
            "conditional": {
              "description": "The clear icon is visible under the following conditions: if the component has a non-empty value, and it either has focus or the mouse is over the field.",
              "displayName": "Conditional"
            }
          },
          "enumValues": [
            "conditional",
            "always",
            "never"
          ],
          "value": "never"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "inputPrefix": {
          "type": "string",
          "description": "The text before the input text.",
          "displayName": "Input Prefix",
          "help": "#inputPrefix",
          "translatable": true
        },
        "inputSuffix": {
          "type": "string",
          "description": "The text after the input text.",
          "displayName": "Input Suffix",
          "help": "#inputSuffix",
          "translatable": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "length": {
          "type": "object",
          "description": "Defines the length limit for the field",
          "displayName": "Length",
          "help": "#length",
          "properties": {
            "countBy": {
              "type": "string",
              "displayName": "Count By",
              "help": "#length.countBy",
              "propertyEditorValues": {
                "codePoint": {
                  "description": "Uses code point to calculate the text length (default, if unspecified)",
                  "displayName": "Code Point"
                },
                "codeUnit": {
                  "description": "Uses code unit to calculate the text length.",
                  "displayName": "Code Unit"
                }
              },
              "enumValues": [
                "codePoint",
                "codeUnit"
              ],
              "value": "codePoint"
            },
            "max": {
              "type": "number|null",
              "value": null
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "any",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. If using 'number', you must set the converter attribute to a converter that formats to numeric characters only, otherwise the value will not be shown. The reason for this is oj-c-input-text uses the browser native input type='number' and when you set a value that contains a non-numeric character, browsers do not display the value. For example, '1,000' would not be shown. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "search",
            "auto",
            "url",
            "text",
            "email",
            "tel"
          ],
          "value": "auto"
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "slots": {
        "end": {
          "description": "The end slot content for the component.",
          "displayName": "End",
          "help": "#end"
        },
        "start": {
          "description": "The start slot content for the component.",
          "displayName": "Start",
          "help": "#start"
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-message-toast": {
      "name": "message-toast",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMessageToastElement"
      ],
      "displayName": "MessageToast",
      "description": "Toast messages are short, noncritical, auto-dismissible messages that communicate non-disruptive contextual messages.",
      "help": "oj-c.MessageToast.html",
      "main": "oj-c/message-toast",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "defaultColumns": 2,
          "minColumns": 1,
          "module": "oj-c/message-toast"
        },
        "oracle": {
          "icon": "oj-ux-ico-messages",
          "uxSpecs": [
            "toast-messages"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "14.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-messages"
          ]
        }
      ],
      "properties": {
        "data": {
          "type": "DataProvider",
          "description": "Data for the Message Toast component.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "15.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "detailTemplateValue": {
          "type": "string|function",
          "description": "A dynamic template key or a function that determines the detail template for the current row.",
          "displayName": "Current Detail Template",
          "help": "#detailTemplateValue",
          "dynamicSlotDef": "MessageToastTemplateContext"
        },
        "iconTemplateValue": {
          "type": "string|function",
          "description": "A dynamic template key or a function that determines the icon template for the current row.",
          "displayName": "Current Icon Template",
          "help": "#iconTemplateValue",
          "dynamicSlotDef": "MessageToastTemplateContext"
        },
        "offset": {
          "type": "number|object",
          "description": "Offset for the Message Toast component's position.",
          "displayName": "Offset",
          "help": "#offset",
          "value": 0
        },
        "position": {
          "type": "string",
          "description": "Position for the Message Toast component.",
          "displayName": "Position",
          "help": "#position",
          "enumValues": [
            "top",
            "bottom",
            "top-start",
            "top-end",
            "bottom-end",
            "bottom-start",
            "top-left",
            "top-right",
            "bottom-left",
            "bottom-right"
          ],
          "value": "bottom"
        }
      },
      "dynamicSlots": {
        "MessageToastTemplateContext": {
          "description": "The dynamic template slots for the Toast message.",
          "displayName": "Dynamic Template Slots",
          "help": "#dynamicTemplates",
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "events": {
        "ojClose": {
          "description": "Event emitted when the user tries to close a message though UI interaction",
          "help": "#event:ojClose",
          "detail": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-select-multiple": {
      "name": "select-multiple",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectMultipleElement"
      ],
      "displayName": "SelectMultiple",
      "description": "A select multiple provides support for multi-select and search filtering",
      "help": "oj-c.SelectMultiple.html",
      "main": "oj-c/select-multiple",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/select-multiple",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-select",
          "uxSpecs": [
            "select-multiple-items"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "itemText",
            "value",
            "valueItems"
          ]
        }
      ],
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-select-many"
          ]
        }
      ],
      "properties": {
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "data": {
          "type": "DataProvider|null",
          "description": "The data source for SelectMultiple.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "15.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          },
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "itemText": {
          "type": "string|number|function",
          "description": "Specifies how to get the text string to render for a data item.",
          "displayName": "Item Text",
          "help": "#itemText",
          "required": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "value": {
          "type": "object|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "valueItems": {
          "type": "object|null",
          "description": "The current value of the element and its associated data.",
          "displayName": "Value Items",
          "help": "#valueItems",
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "search",
            "auto",
            "url",
            "text",
            "email",
            "tel"
          ],
          "value": "auto"
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the dropdown. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "searchText": {
              "type": "string"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "any"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "any"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "selectedKeys": {
              "type": "object"
            },
            "onSelectedKeysChanged": {
              "type": "function"
            }
          }
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "_selectItemsByValue": {
          "params": [
            {
              "name": "value",
              "description": "The value to be selected",
              "type": "object|null"
            }
          ],
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-select-single": {
      "name": "select-single",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectSingleElement"
      ],
      "displayName": "SelectSingle",
      "description": "A select single provides support for single-select and search filtering",
      "help": "oj-c.SelectSingle.html",
      "main": "oj-c/select-single",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/select-single",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-select",
          "uxSpecs": [
            "select-single-items"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "itemText",
            "value",
            "valueItem"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "advancedSearch": {
          "type": "string",
          "description": "Specifies whether the advanced search link is shown in the dropdown when the user filters.",
          "displayName": "Advanced Search",
          "help": "#advancedSearch",
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "data": {
          "type": "DataProvider|null",
          "description": "The data source for SelectSingle.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "15.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          },
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "itemText": {
          "type": "string|number|function",
          "description": "Specifies how to get the text string to render for a data item.",
          "displayName": "Item Text",
          "help": "#itemText",
          "required": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "value": {
          "type": "any",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "valueItem": {
          "type": "object|null",
          "description": "The current value of the element and its associated data.",
          "displayName": "Value Item",
          "help": "#valueItem",
          "properties": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number",
                      "propertyEditorValues": {
                        "error": {},
                        "confirmation": {},
                        "info": {},
                        "warning": {},
                        "fatal": {}
                      }
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          },
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "search",
            "auto",
            "url",
            "text",
            "email",
            "tel"
          ],
          "value": "auto"
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the dropdown. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "searchText": {
              "type": "string"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "any"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "any"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "events": {
        "ojAdvancedSearchAction": {
          "description": "Event triggered when the user clicks or presses Enter on the advanced search link in the dropdown.",
          "displayName": "onOjAdvancedSearchAction",
          "help": "#event:advancedSearchAction",
          "detail": {
            "searchText": {
              "type": "string"
            }
          }
        },
        "ojValueAction": {
          "description": "Event triggered when a value is submitted by the user, even if the value is the same as the previous value.",
          "displayName": "onOjValueAction",
          "help": "#event:valueAction",
          "detail": {
            "itemContext": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "key": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "any"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "any"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "previousValue": {
              "type": "any"
            },
            "value": {
              "type": "any"
            }
          }
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "_doAdvancedSearchAction": {
          "params": [
            {
              "name": "searchText",
              "description": "The search text to include in the event",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "_selectItemByValue": {
          "params": [
            {
              "name": "value",
              "description": "The value to be selected",
              "type": "any"
            }
          ],
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-text-area": {
      "name": "text-area",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTextAreaElement"
      ],
      "displayName": "TextArea",
      "description": "A text area displays a field that allows a user to enter a multi-line text value",
      "help": "oj-c.TextArea.html",
      "main": "oj-c/text-area",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/text-area",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-area"
        }
      },
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-text-area"
          ]
        }
      ],
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "length": {
          "type": "object",
          "description": "Defines the length limit for the field",
          "displayName": "Length",
          "help": "#length",
          "properties": {
            "countBy": {
              "type": "string",
              "enumValues": [
                "codePoint",
                "codeUnit"
              ],
              "value": "codePoint"
            },
            "counter": {
              "type": "string",
              "enumValues": [
                "none",
                "remaining"
              ]
            },
            "max": {
              "type": "number|null",
              "value": null
            }
          }
        },
        "maxRows": {
          "type": "number",
          "description": "The maximum number of visible text lines of the textarea.",
          "displayName": "Max Rows",
          "help": "#maxRows"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "resizeBehavior": {
          "type": "string",
          "description": "Defines the resizeBehavior of the textarea.",
          "displayName": "Resize Behavior",
          "help": "#resizeBehavior",
          "propertyEditorValues": {
            "horizontal": {
              "description": "The textarea will be resizable in the horizontal direction only.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "The textarea will be resizable in the vertical direction only.",
              "displayName": "Vertical"
            },
            "both": {
              "description": "The textarea will be interactively resizable both horizontally and vertically.",
              "displayName": "Both"
            },
            "none": {
              "description": "The textarea will not be resizable by the user.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "both",
            "none",
            "horizontal",
            "vertical"
          ],
          "value": "none"
        },
        "rows": {
          "type": "number",
          "description": "The number of visible text lines in the textarea.",
          "displayName": "Rows",
          "help": "#rows"
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "any",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-progress-bar": {
      "name": "progress-bar",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CProgressBarElement"
      ],
      "description": "A progress bar allows the user to visualize the progression of an extended computer operation.",
      "displayName": "Progress Bar",
      "help": "oj-c.ProgressBar.html",
      "main": "oj-c/progress-bar",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-progress-bar"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/progress-bar"
        },
        "oracle": {
          "icon": "oj-ux-ico-progress-linear",
          "uxSpecs": [
            "progress-indicator"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum allowed value.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 100
        },
        "value": {
          "type": "number",
          "description": "The value of the Progress Bar.",
          "displayName": "Value",
          "eventGroup": "common",
          "help": "value",
          "minimum": -1,
          "value": 0
        },
        "edge": {
          "type": "string",
          "description": "Specifies whether the progress bar is on the top edge of a container",
          "displayName": "edge",
          "help": "#edge",
          "propertyEditorValues": {
            "none": {
              "description": "Not attached progress bar (default, if unspecified)",
              "displayName": "Not Attached Progress Bar"
            },
            "top": {
              "description": "Progress Bar at Top Edge of container",
              "displayName": "Progress Bar Top Edge Container"
            }
          },
          "enumValues": [
            "none",
            "top"
          ],
          "value": "none"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-progress-circle": {
      "name": "progress-circle",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CProgressCircleElement"
      ],
      "description": "A progress circle allows the user to visualize the progression of an extended computer operation.",
      "displayName": "Progress Circle",
      "help": "oj-c.ProgressCircle.html",
      "main": "oj-c/progress-circle",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-progress-circle"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/progress-circle"
        },
        "oracle": {
          "icon": "oj-ux-ico-circular-progress-7",
          "uxSpecs": [
            "progress-indicator"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum allowed value.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 100
        },
        "value": {
          "type": "number",
          "description": "The value of the Progress Circle.",
          "displayName": "Value",
          "eventGroup": "common",
          "help": "value",
          "minimum": -1,
          "value": 0
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the progress circle.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small progress circle",
              "displayName": "Small"
            },
            "md": {
              "description": "medium progress circle (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large progress circle",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-avatar": {
      "name": "avatar",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAvatarElement"
      ],
      "description": "An avatar represents a person or entity as initials or an image.",
      "displayName": "Avatar",
      "help": "oj-c.Avatar.html",
      "main": "oj-c/avatar",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-avatar"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/avatar"
        },
        "oracle": {
          "icon": "oj-ux-ico-avatar",
          "uxSpecs": [
            "avatar"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "size",
            "background"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "background": {
          "type": "string",
          "description": "Specifies the background of the avatar.",
          "displayName": "Background",
          "help": "#background",
          "propertyEditorValues": {
            "neutral": {
              "description": "Neutral background (default, if unspecified)",
              "displayName": "Neutral"
            },
            "orange": {
              "description": "Orange background",
              "displayName": "Orange"
            },
            "green": {
              "description": "Green background",
              "displayName": "Green"
            },
            "teal": {
              "description": "Teal background",
              "displayName": "Teal"
            },
            "blue": {
              "description": "Blue background",
              "displayName": "Blue"
            },
            "slate": {
              "description": "Slate background",
              "displayName": "Slate"
            },
            "pink": {
              "description": "Pink background",
              "displayName": "Pink"
            },
            "purple": {
              "description": "Purple background",
              "displayName": "Purple"
            },
            "lilac": {
              "description": "Lilac background",
              "displayName": "Lilac"
            },
            "gray": {
              "description": "Gray background",
              "displayName": "Gray"
            }
          },
          "enumValues": [
            "blue",
            "gray",
            "green",
            "orange",
            "pink",
            "purple",
            "teal",
            "neutral",
            "slate",
            "lilac"
          ],
          "value": "neutral"
        },
        "initials": {
          "type": "string|null",
          "description": "Specifies the initials of the avatar.",
          "displayName": "Initials",
          "help": "#initials",
          "translatable": true
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the avatar.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "2xs": {
              "description": "extra, extra small avatar",
              "displayName": "Extra Extra Small"
            },
            "xs": {
              "description": "extra small avatar",
              "displayName": "Extra Small"
            },
            "sm": {
              "description": "small avatar",
              "displayName": "Small"
            },
            "md": {
              "description": "medium avatar (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large avatar",
              "displayName": "Large"
            },
            "xl": {
              "description": "extra large avatar",
              "displayName": "Extra Large"
            },
            "2xl": {
              "description": "extra, extra large avatar",
              "displayName": "Extra Extra Large"
            }
          },
          "enumValues": [
            "xs",
            "sm",
            "md",
            "lg",
            "2xs",
            "xl",
            "2xl"
          ],
          "value": "md"
        },
        "src": {
          "type": "string|null",
          "description": "Specifies the source for the image of the avatar.",
          "displayName": "Src",
          "help": "#src"
        },
        "iconClass": {
          "type": "string",
          "description": "The icon class to be displayed.",
          "displayName": "Icon Class",
          "help": "#iconClass"
        },
        "shape": {
          "type": "string",
          "description": "Specifies the shape of the avatar.",
          "displayName": "Shape",
          "help": "#shape",
          "propertyEditorValues": {
            "square": {
              "description": "square avatar (default, if unspecified)",
              "displayName": "Square Avatar"
            },
            "circle": {
              "description": "circular avatar",
              "displayName": "Circular Avatar"
            }
          },
          "enumValues": [
            "square",
            "circle"
          ],
          "value": "square"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-button": {
      "name": "button",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CButtonElement"
      ],
      "description": "Buttons direct users to initiate or take actions and work with a single tap, click, or keystroke.",
      "displayName": "Button",
      "help": "oj-c.Button.html",
      "main": "oj-c/button",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/button"
        },
        "oracle": {
          "icon": "oj-ux-ico-button",
          "uxSpecs": [
            "button"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "display",
            "chroming",
            "disabled",
            "width",
            "size",
            "edge",
            "tooltip"
          ]
        }
      ],
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-button"
          ]
        }
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button.",
          "displayName": "label",
          "help": "#label",
          "translatable": true
        },
        "tooltip": {
          "type": "string",
          "description": "Text to show in the tooltip. This overrides the default tooltip that renders the label when in icon mode.",
          "displayName": "tooltip",
          "help": "#tooltip",
          "translatable": true,
          "value": ""
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "displayName": "disabled",
          "help": "#disabled",
          "value": false
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "displayName": "width",
          "help": "#width"
        },
        "display": {
          "type": "string",
          "description": "Display just the label, the icons, or all. Label is used as tooltip and should be set in all cases.",
          "displayName": "display",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the text label.",
              "displayName": "label"
            }
          },
          "enumValues": [
            "all",
            "label",
            "icons"
          ],
          "value": "all"
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "displayName": "size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "translatable": true,
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "edge": {
          "type": "string",
          "description": "Specifies whether the button is attached to an edge. For example setting edge='bottom' can be used to attach a button to the bottom of a card. The button is then stretched to 100% width, and borders adjusted.",
          "displayName": "edge",
          "help": "#edge",
          "propertyEditorValues": {
            "none": {
              "description": "Display a default standalone button.",
              "displayName": "Small"
            },
            "bottom": {
              "description": "Stretch the button to 100% width and adjust borders for usage at bottom of container.",
              "displayName": "bottom"
            }
          },
          "translatable": true,
          "enumValues": [
            "none",
            "bottom"
          ],
          "value": "none"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has variants in background and border.",
          "displayName": "chroming",
          "help": "#chroming",
          "propertyEditorValues": {
            "ghost": {
              "description": "Ghost buttons are the least prominent variation. Ghost buttons are useful for performing low-priority tasks, such as manipulating the UI.",
              "displayName": "Ghost"
            },
            "borderless": {
              "description": "Borderless buttons are a more prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            },
            "callToAction": {
              "description": "A Call To Action (CTA) button guides the user to take or complete the action that is the main goal of the page or page section. There should only be one CTA button on a page at any given time.",
              "displayName": "Call To Action"
            },
            "danger": {
              "description": "A Danger button alerts the user to a dangerous situation.",
              "displayName": "Danger"
            }
          },
          "enumValues": [
            "solid",
            "ghost",
            "borderless",
            "outlined",
            "callToAction",
            "danger"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          },
          "value": "outlined"
        }
      },
      "slots": {
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-c-button element accepts DOM nodes as children with the startIcon slot.",
          "displayName": "startIcon",
          "help": "#startIcon"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-c-button element accepts DOM nodes as children with the endIcon slot.",
          "displayName": "endIcon",
          "help": "#endIcon"
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "eventGroup": "common",
          "displayName": "onOjAction",
          "help": "#event:action"
        }
      },
      "methods": {
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-rating-gauge": {
      "name": "rating-gauge",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CRatingGaugeElement"
      ],
      "description": "Rating gauges are typically used to display or accept user feedback on a product or service.",
      "displayName": "Rating Gauge",
      "main": "oj-c/rating-gauge",
      "help": "oj-c.RatingGauge.html",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-rating-gauge"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/rating-gauge"
        },
        "oracle": {
          "icon": "oj-ux-ico-gauge-rating",
          "uxSpecs": [
            "rating-gauge"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "max",
            "step"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum value of the gauge.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 5
        },
        "readonly": {
          "type": "boolean",
          "help": "#readonly",
          "displayName": "Readonly",
          "value": false
        },
        "disabled": {
          "type": "boolean",
          "help": "#disabled",
          "displayName": "Disabled",
          "value": false
        },
        "changed": {
          "type": "boolean",
          "description": "Whether there has been a value entered by the user even if it is the same as the initial value.",
          "displayName": "Changed",
          "help": "#changed",
          "writeback": true,
          "value": false
        },
        "value": {
          "type": "number|null",
          "description": "The value of the Rating Gauge.",
          "displayName": "Value",
          "help": "#value",
          "minimum": 0,
          "writeback": true,
          "value": 0
        },
        "step": {
          "type": "number",
          "displayName": "Step",
          "help": "#step",
          "value": 1
        },
        "describedBy": {
          "type": "string|null",
          "displayName": "Described By",
          "help": "#help"
        },
        "labelledBy": {
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the rating gauge items.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small Rating Gauge",
              "displayName": "Small"
            },
            "md": {
              "description": "medium Rating Gauge (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large Rating Gauge",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "color": {
          "type": "string",
          "description": "Specifies the color of the rating gauge items.",
          "displayName": "Color",
          "help": "#color",
          "propertyEditorValues": {
            "neutral": {
              "description": "neutral color Rating Gauge (default, if unspecified)",
              "displayName": "Neutral"
            },
            "gold": {
              "description": "gold color Rating Gauge",
              "displayName": "Gold"
            }
          },
          "enumValues": [
            "gold",
            "neutral"
          ],
          "value": "neutral"
        },
        "thresholds": {
          "type": "Array<object>",
          "displayName": "Thresholds",
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "accessibleLabel": {
                  "type": "string"
                },
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "max": {
                  "type": "number"
                }
              }
            }
          }
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "tooltip": {
          "type": "string",
          "displayName": "Tooltip",
          "help": "#tooltip"
        },
        "transientValue": {
          "type": "number",
          "displayName": "transientValue",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-collapsible": {
      "name": "collapsible",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CCollapsibleElement"
      ],
      "description": "A collapsible displays a header that can be expanded to show its content.",
      "displayName": "Collapsible",
      "help": "oj-c.Collapsible.html",
      "main": "oj-c/collapsible",
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "vbdt": {
          "module": "oj-c/collapsible"
        },
        "oracle": {
          "icon": "oj-ux-ico-collapsible",
          "uxSpecs": [
            "collapsible"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "expanded",
            "iconPosition",
            "variant"
          ]
        }
      ],
      "since": "14.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the collapsible. The oj-c-collapsible element accepts plain text or DOM nodes as children for the default slot.",
          "displayName": "default",
          "help": "#Default"
        },
        "header": {
          "description": "The header slot is the collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.",
          "displayName": "Header",
          "help": "#header"
        }
      },
      "properties": {
        "disabled": {
          "type": "boolean",
          "description": "Disables the collapsible if set to true",
          "displayName": "Disabled",
          "help": "#disabled"
        },
        "expanded": {
          "type": "boolean",
          "description": "Specifies if the content is expanded.",
          "displayName": "Expanded",
          "help": "#expanded",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "getterOnly"
                }
              ]
            }
          },
          "writeback": true
        },
        "iconPosition": {
          "type": "string",
          "description": "Controls placement of the icon in the header.",
          "displayName": "iconPosition",
          "help": "#iconPosition",
          "enumValues": [
            "end",
            "start"
          ]
        },
        "variant": {
          "type": "string",
          "description": "Controls display of the optional divider below the header.",
          "displayName": "variant",
          "help": "#variant",
          "enumValues": [
            "basic",
            "horizontal-rule"
          ]
        }
      },
      "events": {
        "ojBeforeCollapse": {
          "cancelable": true,
          "description": "Triggered immediately before the collapsible is collapsed.",
          "help": "#event:beforeCollapse",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "target": {
              "type": "EventTarget|null"
            }
          }
        },
        "ojBeforeExpand": {
          "cancelable": true,
          "description": "Triggered immediately before the collapsible is expanded.",
          "help": "#event:beforeExpand",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "target": {
              "type": "EventTarget|null"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered after the collapsible has been collapsed.",
          "help": "#event:collapse",
          "detail": {
            "target": {
              "type": "EventTarget|null"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered after the collapsible has been expanded (after animation completes).",
          "help": "#event:expand",
          "detail": {
            "target": {
              "type": "EventTarget|null"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-file-picker": {
      "name": "file-picker",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CFilePickerElement"
      ],
      "description": "A file picker displays a clickable dropzone for selecting files from the device storage.",
      "displayName": "File Picker",
      "help": "oj-c.FilePicker.html",
      "main": "oj-c/file-picker",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-file-picker"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/file-picker"
        },
        "oracle": {
          "icon": "oj-ux-ico-file-image",
          "uxSpecs": [
            "file-picker"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "accept": {
          "type": "Array<string>",
          "description": "An array of strings of allowed MIME types or file extensions that can be uploaded. If not specified, accept all file types",
          "displayName": "Accept",
          "help": "#accept"
        },
        "capture": {
          "type": "string",
          "description": "Specifies the preferred facing mode for the device's media capture mechanism.",
          "displayName": "Capture",
          "help": "#capture",
          "propertyEditorValues": {
            "user": {
              "description": "Specifies user-facing as the preferred mode",
              "displayName": "User"
            },
            "environment": {
              "description": "Specifies environment-facing as the preferred mode",
              "displayName": "Environment"
            },
            "implementation": {
              "description": "Specifies an implementation-specific default as the preferred facing mode",
              "displayName": "Implementation"
            },
            "none": {
              "description": "No capture mechanism is used",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "environment",
            "user",
            "implementation"
          ],
          "value": "none"
        },
        "disabled": {
          "type": "boolean",
          "description": "Disables the filepicker if set to true",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "primaryText": {
          "type": "string|function",
          "description": "The primary text for the default file picker.",
          "displayName": "Primary Text",
          "help": "#primaryText"
        },
        "secondaryText": {
          "type": "string|function",
          "description": "The secondary text for the default file picker.",
          "displayName": "Secondary Text",
          "help": "#secondaryText"
        },
        "selectionMode": {
          "type": "string",
          "description": "Whether to allow single or multiple file selection.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "multiple": {
              "description": "multiple file selection",
              "displayName": "Multiple"
            },
            "single": {
              "description": "single file selection",
              "displayName": "Single"
            }
          },
          "enumValues": [
            "multiple",
            "single"
          ],
          "value": "multiple"
        }
      },
      "slots": {
        "trigger": {
          "description": "The trigger slot is used to replace the default content of the file picker.",
          "help": "#trigger"
        }
      },
      "events": {
        "ojBeforeSelect": {
          "cancelable": true,
          "description": "Triggered before files are selected to allow for custom validation",
          "help": "#event:beforeSelect",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "files": {
              "type": "FileList",
              "description": "The selected files"
            }
          }
        },
        "ojInvalidSelect": {
          "description": "Triggered when invalid files are selected",
          "help": "#event:invalidSelect",
          "detail": {
            "messages": {
              "type": "Array<object>",
              "description": "Messages that should be displayed to the user describing invalid files.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "summary": {
                      "type": "string"
                    },
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string",
                      "enumValues": [
                        "error",
                        "confirmation",
                        "info",
                        "warning"
                      ]
                    }
                  }
                }
              }
            },
            "until": {
              "type": "Promise|null",
              "description": "This property may be populated with a Promise to provide short-term feedback during a user interaction (typically drag and drop); the feedback should be cleared upon the resolution of this Promise."
            }
          }
        },
        "ojSelect": {
          "description": "Triggered after the files are selected",
          "help": "#event:select",
          "detail": {
            "files": {
              "type": "FileList",
              "description": "The files that were just selected."
            }
          }
        }
      },
      "methods": {
        "focus": {
          "description": "Sets focus on the file picker or the first tabbable element for a file picker with custom content.",
          "return": "void"
        },
        "blur": {
          "description": "Blurs the file picker.",
          "return": "void"
        },
        "_doSelectHelper": {
          "description": "This is a private method that should only be called by the webelement API.",
          "params": [
            {
              "name": "fileList",
              "type": "FileList"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-meter-bar": {
      "name": "meter-bar",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMeterBarElement"
      ],
      "description": "A Meter bar displays information graphically in a rectangular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.",
      "displayName": "Meter Bar",
      "main": "oj-c/meter-bar",
      "help": "oj-c.MeterBar.html",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-status-meter-gauge"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/meter-bar"
        },
        "oracle": {
          "icon": "oj-ux-ico-linear-status",
          "uxSpecs": [
            "meter-bar"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation",
            "thresholdDisplay",
            "plotArea.rendered",
            "color",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "min",
            "max",
            "step",
            "thresholds",
            "referenceLines"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum value of the meter bar.",
          "displayName": "Max",
          "help": "#max",
          "value": 100
        },
        "min": {
          "type": "number",
          "description": "The minimum value of the meter bar.",
          "displayName": "Min",
          "help": "#min",
          "value": 0
        },
        "readonly": {
          "type": "boolean",
          "help": "#readonly",
          "displayName": "Readonly",
          "value": false
        },
        "value": {
          "type": "number|null",
          "description": "The value of the meter bar.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": 0
        },
        "step": {
          "type": "number",
          "displayName": "Step",
          "help": "#step",
          "value": 1
        },
        "color": {
          "type": "string",
          "displayName": "Color",
          "help": "#color",
          "format": "color",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ]
        },
        "indicatorSize": {
          "type": "number",
          "displayName": "Indicator Size",
          "help": "#indicatorSize",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ],
          "value": 1
        },
        "plotArea": {
          "type": "object",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "color": {
              "type": "string",
              "format": "color"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "off",
                "on"
              ]
            }
          }
        },
        "orientation": {
          "type": "string",
          "displayName": "Orientation",
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "value": "horizontal"
        },
        "referenceLines": {
          "type": "Array<object>",
          "displayName": "Reference Lines",
          "help": "#referenceLines",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "position": {
                  "type": "string",
                  "enumValues": [
                    "end",
                    "start"
                  ]
                },
                "value": {
                  "type": "number"
                }
              }
            }
          }
        },
        "thresholdDisplay": {
          "type": "string",
          "displayName": "Threshold Display",
          "help": "#thresholdDisplay",
          "enumValues": [
            "all",
            "plotArea",
            "indicator"
          ],
          "value": "indicator"
        },
        "thresholds": {
          "type": "Array<object>",
          "displayName": "Thresholds",
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "accessibleLabel": {
                  "type": "string"
                },
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "max": {
                  "type": "number"
                }
              }
            }
          }
        },
        "describedBy": {
          "type": "string|null",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "labelledBy": {
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the meter bar.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small Meter Bar",
              "displayName": "Small"
            },
            "md": {
              "description": "medium Meter Bar (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large Meter Bar",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "transientValue": {
          "type": "number",
          "displayName": "transientValue",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-meter-circle": {
      "name": "meter-circle",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMeterCircleElement"
      ],
      "description": "A Meter circle displays information graphically in a circular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.",
      "displayName": "Meter circle",
      "main": "oj-c/meter-circle",
      "help": "oj-c.Metercircle.html",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-status-meter-gauge"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/meter-circle"
        },
        "oracle": {
          "icon": "oj-ux-ico-circular-progress-7",
          "uxSpecs": [
            "meter-circle"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "thresholdDisplay",
            "plotArea.rendered",
            "color",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "min",
            "max",
            "step",
            "thresholds",
            "referenceLines"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum value of the meter circle.",
          "displayName": "Max",
          "help": "#max",
          "value": 100
        },
        "min": {
          "type": "number",
          "description": "The minimum value of the meter circle.",
          "displayName": "Min",
          "help": "#min",
          "value": 0
        },
        "readonly": {
          "type": "boolean",
          "help": "#readonly",
          "displayName": "Readonly",
          "value": false
        },
        "value": {
          "type": "number|null",
          "description": "The value of the meter circle.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": 0
        },
        "step": {
          "type": "number",
          "displayName": "Step",
          "help": "#step",
          "value": 1
        },
        "color": {
          "type": "string",
          "displayName": "Color",
          "help": "#color",
          "format": "color",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ]
        },
        "indicatorSize": {
          "type": "number",
          "displayName": "Indicator Size",
          "help": "#indicatorSize",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ],
          "value": 1
        },
        "innerRadius": {
          "type": "number",
          "displayName": "Inner Radius",
          "help": "innerRadius",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ]
        },
        "plotArea": {
          "type": "object",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "color": {
              "type": "string",
              "format": "color"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "off",
                "on"
              ]
            }
          }
        },
        "angleExtent": {
          "type": "number",
          "displayName": "Angle Extent",
          "help": "#angleExtent",
          "value": 360
        },
        "startAngle": {
          "type": "number",
          "displayName": "Start Angle",
          "help": "#startAngle",
          "value": 90
        },
        "referenceLines": {
          "type": "Array<object>",
          "displayName": "Reference Lines",
          "help": "#referenceLines",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "value": {
                  "type": "number"
                }
              }
            }
          }
        },
        "thresholdDisplay": {
          "type": "string",
          "displayName": "Threshold Display",
          "help": "#thresholdDisplay",
          "enumValues": [
            "all",
            "plotArea",
            "indicator"
          ],
          "value": "indicator"
        },
        "thresholds": {
          "type": "Array<object>",
          "displayName": "Thresholds",
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "accessibleLabel": {
                  "type": "string"
                },
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "max": {
                  "type": "number"
                }
              }
            }
          }
        },
        "describedBy": {
          "type": "string|null",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "labelledBy": {
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the meter circle.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small Meter circle",
              "displayName": "Small"
            },
            "md": {
              "description": "medium Meter circle (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large Meter circle",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "transientValue": {
          "type": "number",
          "displayName": "transientValue",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        }
      },
      "slots": {
        "centerTemplate": {
          "data": {
            "innerBounds": {
              "type": "object",
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              }
            },
            "outerBounds": {
              "type": "object",
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              }
            },
            "value": {
              "type": "number|null"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-line-chart": {
      "name": "line-chart",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLineChartElement"
      ],
      "description": "A line chart displays information graphically using data points connected by straight or curved lines, making relationships among the data easier to understand.",
      "displayName": "Line Chart",
      "main": "oj-c/line-chart",
      "help": "oj-c.LineChart.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/line-chart",
          "defaultColumns": 6,
          "minColumns": 1
        },
        "oracle": {
          "icon": "oj-ux-ico-line-chart",
          "uxSpecs": [
            "line-chart"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "type",
            "orientation",
            "legend.title",
            "legend.position",
            "legend.rendered",
            "stack",
            "xAxis.title",
            "yAxis.title",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "16.0.0",
      "properties": {
        "groupComparator": {
          "type": "function",
          "description": "A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data.",
          "displayName": "Group Comparator",
          "help": "#groupComparator"
        },
        "stack": {
          "type": "string",
          "description": "Defines whether the data items are stacked.",
          "displayName": "stack",
          "help": "#stack",
          "propertyEditorValues": {
            "on": {
              "description": "Data items belonging to same group will be stacked.",
              "displayName": "On"
            },
            "off": {
              "description": "Data items will not be stacked.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an <code class=\"prettyprint\">ojDrill</code> event on click (double click if selection is enabled). Use \"on\" to enable drilling for all series objects (legend items), group objects (x-axis labels), and data items. Use \"seriesOnly\" or \"groupsOnly\" to enable drilling for series objects or group objects only. To enable or disable drilling on individual series, group, or data item, use the drilling attribute in each series, group, or data item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "propertyEditorValues": {
            "on": {
              "description": "Drilling is enabled on data items, axis labels and legend items.",
              "displayName": "On"
            },
            "seriesOnly": {
              "description": "Drilling is enabled only on legend items. Use multiSeriesDrilling attribute to enable drilling on the legend item for Other.",
              "displayName": "Off"
            },
            "groupsOnly": {
              "description": "Drilling is enabled only on axis labels.",
              "displayName": "On"
            },
            "off": {
              "description": "Drilling is not enabled.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on",
            "groupsOnly",
            "seriesOnly"
          ],
          "value": "off"
        },
        "orientation": {
          "type": "string",
          "description": "The orientation of the chart.",
          "displayName": "Orientation",
          "help": "#orientation",
          "propertyEditorValues": {
            "horizontal": {
              "description": "Chart will be horizontally oriented.",
              "displayName": "On"
            },
            "vertical": {
              "description": "Chart will be vertically oriented.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "value": "vertical"
        },
        "yAxis": {
          "type": "object",
          "description": "The yAxis options for the chart.",
          "properties": {
            "majorTick": {
              "type": "object",
              "properties": {
                "lineStyle": {
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineWidth": {
                  "type": "number"
                },
                "lineColor": {
                  "type": "string",
                  "propertyEditorValues": {
                    "transparent": {},
                    "inherit": {},
                    "initial": {},
                    "-moz-initial": {},
                    "revert": {},
                    "revert-layer": {},
                    "unset": {},
                    "aliceblue": {},
                    "antiquewhite": {},
                    "aqua": {},
                    "aquamarine": {},
                    "azure": {},
                    "beige": {},
                    "bisque": {},
                    "black": {},
                    "blanchedalmond": {},
                    "blue": {},
                    "blueviolet": {},
                    "brown": {},
                    "burlywood": {},
                    "cadetblue": {},
                    "chartreuse": {},
                    "chocolate": {},
                    "coral": {},
                    "cornflowerblue": {},
                    "cornsilk": {},
                    "crimson": {},
                    "cyan": {},
                    "darkblue": {},
                    "darkcyan": {},
                    "darkgoldenrod": {},
                    "darkgray": {},
                    "darkgreen": {},
                    "darkgrey": {},
                    "darkkhaki": {},
                    "darkmagenta": {},
                    "darkolivegreen": {},
                    "darkorange": {},
                    "darkorchid": {},
                    "darkred": {},
                    "darksalmon": {},
                    "darkseagreen": {},
                    "darkslateblue": {},
                    "darkslategray": {},
                    "darkslategrey": {},
                    "darkturquoise": {},
                    "darkviolet": {},
                    "deeppink": {},
                    "deepskyblue": {},
                    "dimgray": {},
                    "dimgrey": {},
                    "dodgerblue": {},
                    "firebrick": {},
                    "floralwhite": {},
                    "forestgreen": {},
                    "fuchsia": {},
                    "gainsboro": {},
                    "ghostwhite": {},
                    "gold": {},
                    "goldenrod": {},
                    "gray": {},
                    "green": {},
                    "greenyellow": {},
                    "grey": {},
                    "honeydew": {},
                    "hotpink": {},
                    "indianred": {},
                    "indigo": {},
                    "ivory": {},
                    "khaki": {},
                    "lavender": {},
                    "lavenderblush": {},
                    "lawngreen": {},
                    "lemonchiffon": {},
                    "lightblue": {},
                    "lightcoral": {},
                    "lightcyan": {},
                    "lightgoldenrodyellow": {},
                    "lightgray": {},
                    "lightgreen": {},
                    "lightgrey": {},
                    "lightpink": {},
                    "lightsalmon": {},
                    "lightseagreen": {},
                    "lightskyblue": {},
                    "lightslategray": {},
                    "lightslategrey": {},
                    "lightsteelblue": {},
                    "lightyellow": {},
                    "lime": {},
                    "limegreen": {},
                    "linen": {},
                    "magenta": {},
                    "maroon": {},
                    "mediumaquamarine": {},
                    "mediumblue": {},
                    "mediumorchid": {},
                    "mediumpurple": {},
                    "mediumseagreen": {},
                    "mediumslateblue": {},
                    "mediumspringgreen": {},
                    "mediumturquoise": {},
                    "mediumvioletred": {},
                    "midnightblue": {},
                    "mintcream": {},
                    "mistyrose": {},
                    "moccasin": {},
                    "navajowhite": {},
                    "navy": {},
                    "oldlace": {},
                    "olive": {},
                    "olivedrab": {},
                    "orange": {},
                    "orangered": {},
                    "orchid": {},
                    "palegoldenrod": {},
                    "palegreen": {},
                    "paleturquoise": {},
                    "palevioletred": {},
                    "papayawhip": {},
                    "peachpuff": {},
                    "peru": {},
                    "pink": {},
                    "plum": {},
                    "powderblue": {},
                    "purple": {},
                    "rebeccapurple": {},
                    "red": {},
                    "rosybrown": {},
                    "royalblue": {},
                    "saddlebrown": {},
                    "salmon": {},
                    "sandybrown": {},
                    "seagreen": {},
                    "seashell": {},
                    "sienna": {},
                    "silver": {},
                    "skyblue": {},
                    "slateblue": {},
                    "slategray": {},
                    "slategrey": {},
                    "snow": {},
                    "springgreen": {},
                    "steelblue": {},
                    "tan": {},
                    "teal": {},
                    "thistle": {},
                    "tomato": {},
                    "turquoise": {},
                    "violet": {},
                    "wheat": {},
                    "white": {},
                    "whitesmoke": {},
                    "yellow": {},
                    "yellowgreen": {},
                    "ActiveBorder": {},
                    "ActiveCaption": {},
                    "AppWorkspace": {},
                    "Background": {},
                    "ButtonFace": {},
                    "ButtonHighlight": {},
                    "ButtonShadow": {},
                    "ButtonText": {},
                    "CaptionText": {},
                    "GrayText": {},
                    "Highlight": {},
                    "HighlightText": {},
                    "InactiveBorder": {},
                    "InactiveCaption": {},
                    "InactiveCaptionText": {},
                    "InfoBackground": {},
                    "InfoText": {},
                    "Menu": {},
                    "MenuText": {},
                    "Scrollbar": {},
                    "ThreeDDarkShadow": {},
                    "ThreeDFace": {},
                    "ThreeDHighlight": {},
                    "ThreeDLightShadow": {},
                    "ThreeDShadow": {},
                    "Window": {},
                    "WindowFrame": {},
                    "WindowText": {},
                    "currentcolor": {}
                  }
                },
                "rendered": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "minorTick": {
              "type": "object",
              "properties": {
                "lineStyle": {
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineWidth": {
                  "type": "number"
                },
                "lineColor": {
                  "type": "string",
                  "propertyEditorValues": {
                    "transparent": {},
                    "inherit": {},
                    "initial": {},
                    "-moz-initial": {},
                    "revert": {},
                    "revert-layer": {},
                    "unset": {},
                    "aliceblue": {},
                    "antiquewhite": {},
                    "aqua": {},
                    "aquamarine": {},
                    "azure": {},
                    "beige": {},
                    "bisque": {},
                    "black": {},
                    "blanchedalmond": {},
                    "blue": {},
                    "blueviolet": {},
                    "brown": {},
                    "burlywood": {},
                    "cadetblue": {},
                    "chartreuse": {},
                    "chocolate": {},
                    "coral": {},
                    "cornflowerblue": {},
                    "cornsilk": {},
                    "crimson": {},
                    "cyan": {},
                    "darkblue": {},
                    "darkcyan": {},
                    "darkgoldenrod": {},
                    "darkgray": {},
                    "darkgreen": {},
                    "darkgrey": {},
                    "darkkhaki": {},
                    "darkmagenta": {},
                    "darkolivegreen": {},
                    "darkorange": {},
                    "darkorchid": {},
                    "darkred": {},
                    "darksalmon": {},
                    "darkseagreen": {},
                    "darkslateblue": {},
                    "darkslategray": {},
                    "darkslategrey": {},
                    "darkturquoise": {},
                    "darkviolet": {},
                    "deeppink": {},
                    "deepskyblue": {},
                    "dimgray": {},
                    "dimgrey": {},
                    "dodgerblue": {},
                    "firebrick": {},
                    "floralwhite": {},
                    "forestgreen": {},
                    "fuchsia": {},
                    "gainsboro": {},
                    "ghostwhite": {},
                    "gold": {},
                    "goldenrod": {},
                    "gray": {},
                    "green": {},
                    "greenyellow": {},
                    "grey": {},
                    "honeydew": {},
                    "hotpink": {},
                    "indianred": {},
                    "indigo": {},
                    "ivory": {},
                    "khaki": {},
                    "lavender": {},
                    "lavenderblush": {},
                    "lawngreen": {},
                    "lemonchiffon": {},
                    "lightblue": {},
                    "lightcoral": {},
                    "lightcyan": {},
                    "lightgoldenrodyellow": {},
                    "lightgray": {},
                    "lightgreen": {},
                    "lightgrey": {},
                    "lightpink": {},
                    "lightsalmon": {},
                    "lightseagreen": {},
                    "lightskyblue": {},
                    "lightslategray": {},
                    "lightslategrey": {},
                    "lightsteelblue": {},
                    "lightyellow": {},
                    "lime": {},
                    "limegreen": {},
                    "linen": {},
                    "magenta": {},
                    "maroon": {},
                    "mediumaquamarine": {},
                    "mediumblue": {},
                    "mediumorchid": {},
                    "mediumpurple": {},
                    "mediumseagreen": {},
                    "mediumslateblue": {},
                    "mediumspringgreen": {},
                    "mediumturquoise": {},
                    "mediumvioletred": {},
                    "midnightblue": {},
                    "mintcream": {},
                    "mistyrose": {},
                    "moccasin": {},
                    "navajowhite": {},
                    "navy": {},
                    "oldlace": {},
                    "olive": {},
                    "olivedrab": {},
                    "orange": {},
                    "orangered": {},
                    "orchid": {},
                    "palegoldenrod": {},
                    "palegreen": {},
                    "paleturquoise": {},
                    "palevioletred": {},
                    "papayawhip": {},
                    "peachpuff": {},
                    "peru": {},
                    "pink": {},
                    "plum": {},
                    "powderblue": {},
                    "purple": {},
                    "rebeccapurple": {},
                    "red": {},
                    "rosybrown": {},
                    "royalblue": {},
                    "saddlebrown": {},
                    "salmon": {},
                    "sandybrown": {},
                    "seagreen": {},
                    "seashell": {},
                    "sienna": {},
                    "silver": {},
                    "skyblue": {},
                    "slateblue": {},
                    "slategray": {},
                    "slategrey": {},
                    "snow": {},
                    "springgreen": {},
                    "steelblue": {},
                    "tan": {},
                    "teal": {},
                    "thistle": {},
                    "tomato": {},
                    "turquoise": {},
                    "violet": {},
                    "wheat": {},
                    "white": {},
                    "whitesmoke": {},
                    "yellow": {},
                    "yellowgreen": {},
                    "ActiveBorder": {},
                    "ActiveCaption": {},
                    "AppWorkspace": {},
                    "Background": {},
                    "ButtonFace": {},
                    "ButtonHighlight": {},
                    "ButtonShadow": {},
                    "ButtonText": {},
                    "CaptionText": {},
                    "GrayText": {},
                    "Highlight": {},
                    "HighlightText": {},
                    "InactiveBorder": {},
                    "InactiveCaption": {},
                    "InactiveCaptionText": {},
                    "InfoBackground": {},
                    "InfoText": {},
                    "Menu": {},
                    "MenuText": {},
                    "Scrollbar": {},
                    "ThreeDDarkShadow": {},
                    "ThreeDFace": {},
                    "ThreeDHighlight": {},
                    "ThreeDLightShadow": {},
                    "ThreeDShadow": {},
                    "Window": {},
                    "WindowFrame": {},
                    "WindowText": {},
                    "currentcolor": {}
                  }
                },
                "rendered": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            }
          }
        },
        "xAxis": {
          "type": "object",
          "description": "The xAxis options for the chart.",
          "properties": {
            "majorTick": {
              "type": "object",
              "properties": {
                "lineStyle": {
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineWidth": {
                  "type": "number"
                },
                "lineColor": {
                  "type": "string",
                  "propertyEditorValues": {
                    "transparent": {},
                    "inherit": {},
                    "initial": {},
                    "-moz-initial": {},
                    "revert": {},
                    "revert-layer": {},
                    "unset": {},
                    "aliceblue": {},
                    "antiquewhite": {},
                    "aqua": {},
                    "aquamarine": {},
                    "azure": {},
                    "beige": {},
                    "bisque": {},
                    "black": {},
                    "blanchedalmond": {},
                    "blue": {},
                    "blueviolet": {},
                    "brown": {},
                    "burlywood": {},
                    "cadetblue": {},
                    "chartreuse": {},
                    "chocolate": {},
                    "coral": {},
                    "cornflowerblue": {},
                    "cornsilk": {},
                    "crimson": {},
                    "cyan": {},
                    "darkblue": {},
                    "darkcyan": {},
                    "darkgoldenrod": {},
                    "darkgray": {},
                    "darkgreen": {},
                    "darkgrey": {},
                    "darkkhaki": {},
                    "darkmagenta": {},
                    "darkolivegreen": {},
                    "darkorange": {},
                    "darkorchid": {},
                    "darkred": {},
                    "darksalmon": {},
                    "darkseagreen": {},
                    "darkslateblue": {},
                    "darkslategray": {},
                    "darkslategrey": {},
                    "darkturquoise": {},
                    "darkviolet": {},
                    "deeppink": {},
                    "deepskyblue": {},
                    "dimgray": {},
                    "dimgrey": {},
                    "dodgerblue": {},
                    "firebrick": {},
                    "floralwhite": {},
                    "forestgreen": {},
                    "fuchsia": {},
                    "gainsboro": {},
                    "ghostwhite": {},
                    "gold": {},
                    "goldenrod": {},
                    "gray": {},
                    "green": {},
                    "greenyellow": {},
                    "grey": {},
                    "honeydew": {},
                    "hotpink": {},
                    "indianred": {},
                    "indigo": {},
                    "ivory": {},
                    "khaki": {},
                    "lavender": {},
                    "lavenderblush": {},
                    "lawngreen": {},
                    "lemonchiffon": {},
                    "lightblue": {},
                    "lightcoral": {},
                    "lightcyan": {},
                    "lightgoldenrodyellow": {},
                    "lightgray": {},
                    "lightgreen": {},
                    "lightgrey": {},
                    "lightpink": {},
                    "lightsalmon": {},
                    "lightseagreen": {},
                    "lightskyblue": {},
                    "lightslategray": {},
                    "lightslategrey": {},
                    "lightsteelblue": {},
                    "lightyellow": {},
                    "lime": {},
                    "limegreen": {},
                    "linen": {},
                    "magenta": {},
                    "maroon": {},
                    "mediumaquamarine": {},
                    "mediumblue": {},
                    "mediumorchid": {},
                    "mediumpurple": {},
                    "mediumseagreen": {},
                    "mediumslateblue": {},
                    "mediumspringgreen": {},
                    "mediumturquoise": {},
                    "mediumvioletred": {},
                    "midnightblue": {},
                    "mintcream": {},
                    "mistyrose": {},
                    "moccasin": {},
                    "navajowhite": {},
                    "navy": {},
                    "oldlace": {},
                    "olive": {},
                    "olivedrab": {},
                    "orange": {},
                    "orangered": {},
                    "orchid": {},
                    "palegoldenrod": {},
                    "palegreen": {},
                    "paleturquoise": {},
                    "palevioletred": {},
                    "papayawhip": {},
                    "peachpuff": {},
                    "peru": {},
                    "pink": {},
                    "plum": {},
                    "powderblue": {},
                    "purple": {},
                    "rebeccapurple": {},
                    "red": {},
                    "rosybrown": {},
                    "royalblue": {},
                    "saddlebrown": {},
                    "salmon": {},
                    "sandybrown": {},
                    "seagreen": {},
                    "seashell": {},
                    "sienna": {},
                    "silver": {},
                    "skyblue": {},
                    "slateblue": {},
                    "slategray": {},
                    "slategrey": {},
                    "snow": {},
                    "springgreen": {},
                    "steelblue": {},
                    "tan": {},
                    "teal": {},
                    "thistle": {},
                    "tomato": {},
                    "turquoise": {},
                    "violet": {},
                    "wheat": {},
                    "white": {},
                    "whitesmoke": {},
                    "yellow": {},
                    "yellowgreen": {},
                    "ActiveBorder": {},
                    "ActiveCaption": {},
                    "AppWorkspace": {},
                    "Background": {},
                    "ButtonFace": {},
                    "ButtonHighlight": {},
                    "ButtonShadow": {},
                    "ButtonText": {},
                    "CaptionText": {},
                    "GrayText": {},
                    "Highlight": {},
                    "HighlightText": {},
                    "InactiveBorder": {},
                    "InactiveCaption": {},
                    "InactiveCaptionText": {},
                    "InfoBackground": {},
                    "InfoText": {},
                    "Menu": {},
                    "MenuText": {},
                    "Scrollbar": {},
                    "ThreeDDarkShadow": {},
                    "ThreeDFace": {},
                    "ThreeDHighlight": {},
                    "ThreeDLightShadow": {},
                    "ThreeDShadow": {},
                    "Window": {},
                    "WindowFrame": {},
                    "WindowText": {},
                    "currentcolor": {}
                  }
                },
                "rendered": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            }
          }
        },
        "plotArea": {
          "type": "object",
          "description": "The plot area of the chart.",
          "properties": {
            "backgroundColor": {
              "type": "string",
              "propertyEditorValues": {
                "transparent": {},
                "inherit": {},
                "initial": {},
                "-moz-initial": {},
                "revert": {},
                "revert-layer": {},
                "unset": {},
                "aliceblue": {},
                "antiquewhite": {},
                "aqua": {},
                "aquamarine": {},
                "azure": {},
                "beige": {},
                "bisque": {},
                "black": {},
                "blanchedalmond": {},
                "blue": {},
                "blueviolet": {},
                "brown": {},
                "burlywood": {},
                "cadetblue": {},
                "chartreuse": {},
                "chocolate": {},
                "coral": {},
                "cornflowerblue": {},
                "cornsilk": {},
                "crimson": {},
                "cyan": {},
                "darkblue": {},
                "darkcyan": {},
                "darkgoldenrod": {},
                "darkgray": {},
                "darkgreen": {},
                "darkgrey": {},
                "darkkhaki": {},
                "darkmagenta": {},
                "darkolivegreen": {},
                "darkorange": {},
                "darkorchid": {},
                "darkred": {},
                "darksalmon": {},
                "darkseagreen": {},
                "darkslateblue": {},
                "darkslategray": {},
                "darkslategrey": {},
                "darkturquoise": {},
                "darkviolet": {},
                "deeppink": {},
                "deepskyblue": {},
                "dimgray": {},
                "dimgrey": {},
                "dodgerblue": {},
                "firebrick": {},
                "floralwhite": {},
                "forestgreen": {},
                "fuchsia": {},
                "gainsboro": {},
                "ghostwhite": {},
                "gold": {},
                "goldenrod": {},
                "gray": {},
                "green": {},
                "greenyellow": {},
                "grey": {},
                "honeydew": {},
                "hotpink": {},
                "indianred": {},
                "indigo": {},
                "ivory": {},
                "khaki": {},
                "lavender": {},
                "lavenderblush": {},
                "lawngreen": {},
                "lemonchiffon": {},
                "lightblue": {},
                "lightcoral": {},
                "lightcyan": {},
                "lightgoldenrodyellow": {},
                "lightgray": {},
                "lightgreen": {},
                "lightgrey": {},
                "lightpink": {},
                "lightsalmon": {},
                "lightseagreen": {},
                "lightskyblue": {},
                "lightslategray": {},
                "lightslategrey": {},
                "lightsteelblue": {},
                "lightyellow": {},
                "lime": {},
                "limegreen": {},
                "linen": {},
                "magenta": {},
                "maroon": {},
                "mediumaquamarine": {},
                "mediumblue": {},
                "mediumorchid": {},
                "mediumpurple": {},
                "mediumseagreen": {},
                "mediumslateblue": {},
                "mediumspringgreen": {},
                "mediumturquoise": {},
                "mediumvioletred": {},
                "midnightblue": {},
                "mintcream": {},
                "mistyrose": {},
                "moccasin": {},
                "navajowhite": {},
                "navy": {},
                "oldlace": {},
                "olive": {},
                "olivedrab": {},
                "orange": {},
                "orangered": {},
                "orchid": {},
                "palegoldenrod": {},
                "palegreen": {},
                "paleturquoise": {},
                "palevioletred": {},
                "papayawhip": {},
                "peachpuff": {},
                "peru": {},
                "pink": {},
                "plum": {},
                "powderblue": {},
                "purple": {},
                "rebeccapurple": {},
                "red": {},
                "rosybrown": {},
                "royalblue": {},
                "saddlebrown": {},
                "salmon": {},
                "sandybrown": {},
                "seagreen": {},
                "seashell": {},
                "sienna": {},
                "silver": {},
                "skyblue": {},
                "slateblue": {},
                "slategray": {},
                "slategrey": {},
                "snow": {},
                "springgreen": {},
                "steelblue": {},
                "tan": {},
                "teal": {},
                "thistle": {},
                "tomato": {},
                "turquoise": {},
                "violet": {},
                "wheat": {},
                "white": {},
                "whitesmoke": {},
                "yellow": {},
                "yellowgreen": {},
                "ActiveBorder": {},
                "ActiveCaption": {},
                "AppWorkspace": {},
                "Background": {},
                "ButtonFace": {},
                "ButtonHighlight": {},
                "ButtonShadow": {},
                "ButtonText": {},
                "CaptionText": {},
                "GrayText": {},
                "Highlight": {},
                "HighlightText": {},
                "InactiveBorder": {},
                "InactiveCaption": {},
                "InactiveCaptionText": {},
                "InfoBackground": {},
                "InfoText": {},
                "Menu": {},
                "MenuText": {},
                "Scrollbar": {},
                "ThreeDDarkShadow": {},
                "ThreeDFace": {},
                "ThreeDHighlight": {},
                "ThreeDLightShadow": {},
                "ThreeDShadow": {},
                "Window": {},
                "WindowFrame": {},
                "WindowText": {},
                "currentcolor": {}
              }
            }
          }
        },
        "zoomAndScroll": {
          "type": "string",
          "description": "The zoom and scroll behavior.",
          "enumValues": [
            "off",
            "live"
          ]
        },
        "valueFormats": {
          "type": "object",
          "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to the attribute names on the data items.",
          "properties": {
            "group": {
              "type": "object",
              "properties": {
                "tooltipLabel": {
                  "type": "string"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            },
            "series": {
              "type": "object",
              "properties": {
                "tooltipLabel": {
                  "type": "string"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            },
            "value": {
              "type": "object",
              "properties": {
                "converter": {
                  "type": "any"
                },
                "tooltipLabel": {
                  "type": "string"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            }
          }
        },
        "seriesComparator": {
          "type": "function",
          "description": "A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data.",
          "displayName": "Series Comparator",
          "help": "#seriesComparator"
        },
        "data": {
          "type": "DataProvider|null",
          "description": "Specifies the DataProvider for the sections and items of the line-chart.",
          "displayName": "Data",
          "help": "#data"
        },
        "selectionMode": {
          "type": "string",
          "description": "Specifies the selection mode.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "enumValues": [
            "none",
            "multiple",
            "single"
          ],
          "value": "none"
        },
        "selection": {
          "type": "Array<any>",
          "description": "An array containing the ids of the initially selected data items.",
          "displayName": "Selection",
          "help": "#selection",
          "writeback": true,
          "value": []
        },
        "hiddenCategories": {
          "type": "Array<string>",
          "writeback": true,
          "value": []
        },
        "highlightedCategories": {
          "type": "Array<string>",
          "description": "An array of category string used for highlighting.",
          "displayName": "Highlighted Categories",
          "help": "#highlightedCategories",
          "writeback": true,
          "value": []
        },
        "hideAndShowBehavior": {
          "type": "string",
          "description": "Defines the hide and show behavior that is performed when clicking on a leegnd item.",
          "displayName": "Hide and Show Behavior",
          "enumValues": [
            "none",
            "withoutRescale",
            "withRescale"
          ],
          "value": "none"
        },
        "hoverBehavior": {
          "type": "string",
          "description": "Defines the behavior applied when hovering over data items.",
          "displayName": "Hover Behavior",
          "enumValues": [
            "none",
            "dim"
          ],
          "value": "none"
        },
        "highlightMatch": {
          "type": "string",
          "description": "The matching condition for the highlighted property.",
          "displayName": "Highlight Match",
          "enumValues": [
            "all",
            "any"
          ],
          "value": "any"
        },
        "legend": {
          "type": "object",
          "description": "An object defining the style, positioning, and behavior of the legend.",
          "properties": {
            "position": {
              "type": "string",
              "enumValues": [
                "auto",
                "end",
                "start",
                "top",
                "bottom"
              ],
              "value": "auto"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "value": "on"
            },
            "maxSize": {
              "type": "number|string"
            },
            "size": {
              "type": "number|string"
            },
            "symbolHeight": {
              "type": "number"
            },
            "symbolWidth": {
              "type": "number"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the chart. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            }
          }
        },
        "seriesTemplate": {
          "description": "The seriesTemplate slot is used to specify the template for generating the series properties of the chart. See the Help documentation for more information.",
          "displayName": "seriesTemplate",
          "help": "#seriesTemplate",
          "maxItems": 1,
          "data": {
            "items": {
              "type": "Array<object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "type": "any"
                    },
                    "key": {
                      "type": "any"
                    },
                    "index": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "id": {
              "type": "string"
            },
            "index": {
              "type": "number"
            }
          }
        },
        "groupTemplate": {
          "description": "The groupTemplate slot is used to specify the template for generating the group properties of the chart. See the Help documentation for more information.",
          "displayName": "groupTemplate",
          "help": "#groupTemplate",
          "maxItems": 1,
          "data": {
            "items": {
              "type": "Array<object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "type": "any"
                    },
                    "key": {
                      "type": "any"
                    },
                    "index": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "ids": {
              "type": "Array<string>"
            },
            "index": {
              "type": "number"
            },
            "depth": {
              "type": "number"
            }
          }
        }
      },
      "events": {
        "ojItemDrill": {
          "description": "Triggered on a chart item (double click if selection is enabled, single click otherwise).",
          "help": "#event:ItemDrill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "series": {
              "type": "any",
              "description": "The series id of the drilled object."
            },
            "group": {
              "type": "any",
              "description": "The group id of the drilled object."
            },
            "data": {
              "type": "object",
              "description": "The data object of the drilled item.",
              "properties": {
                "id": {
                  "type": "any"
                },
                "seriesId": {
                  "type": "string",
                  "description": "The id for the series the item belongs to."
                },
                "groupId": {
                  "type": "Array<string>",
                  "description": "The array of id(s) for the group(s) the item belongs to"
                },
                "value": {
                  "type": "number",
                  "description": "The array of id(s) for the group(s) the item belongs to"
                },
                "color": {
                  "type": "string",
                  "description": "The color of the data item."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers. Only applies to line, area, and scatter series."
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An optional array of category strings corresponding to this data item."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled for the data item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "shortDesc": {
                  "type": "string"
                }
              }
            },
            "itemData": {
              "type": "any",
              "description": "The row data object of the drilled item. This will only be set if a DataProvider is being used."
            },
            "seriesData": {
              "type": "object",
              "description": "The data for the series of the drilled object",
              "properties": {
                "items": {
                  "type": "Array<object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "type": "any"
                        },
                        "seriesId": {
                          "type": "string",
                          "description": "The id for the series the item belongs to.",
                          "displayName": "Series Id",
                          "help": "#seriesId"
                        },
                        "groupId": {
                          "type": "Array<string>",
                          "description": "The array of id(s) for the group(s) the item belongs to",
                          "displayName": "Group Id",
                          "help": "#groupId"
                        },
                        "value": {
                          "type": "number",
                          "description": "The array of id(s) for the group(s) the item belongs to",
                          "displayName": "Valus",
                          "help": "#value"
                        },
                        "color": {
                          "type": "string",
                          "description": "The color of the data item.",
                          "displayName": "Color",
                          "help": "#color"
                        },
                        "markerDisplayed": {
                          "type": "string",
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Displayed",
                          "help": "#markerDisplayed",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ]
                        },
                        "markerShape": {
                          "type": "string",
                          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Shape",
                          "help": "#markerShape",
                          "enumValues": [
                            "auto",
                            "square",
                            "circle",
                            "diamond",
                            "human",
                            "plus",
                            "star",
                            "triangleDown",
                            "triangleUp"
                          ]
                        },
                        "markerSize": {
                          "type": "number",
                          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                          "displayName": "Marker Size",
                          "help": "#markerSize"
                        },
                        "categories": {
                          "type": "Array<string>",
                          "description": "An optional array of category strings corresponding to this data item.",
                          "displayName": "Categories",
                          "help": "#categories"
                        },
                        "drilling": {
                          "type": "string",
                          "description": "Whether drilling is enabled for the data item.",
                          "displayName": "Drilling",
                          "help": "#drilling",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ]
                        },
                        "shortDesc": {
                          "type": "string",
                          "displayName": "Short Desc",
                          "help": "#shortDesc"
                        }
                      }
                    }
                  }
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An array of category strings corresponding to the tag cloud items."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the series. The chart legend item will inherit this color value."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled on the series item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The line style of the data line.",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineType": {
                  "type": "string",
                  "description": "The line type of the data line or area.",
                  "enumValues": [
                    "curved",
                    "straight"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the data line."
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerColor": {
                  "type": "string",
                  "description": "The color of the data markers, if different from the series color."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series."
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the series, displayed in the legend and tooltips."
                },
                "shortDesc": {
                  "type": "string",
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series."
                }
              }
            },
            "groupData": {
              "type": "object",
              "description": "An array of data for the group the drilled object belongs to.",
              "properties": {
                "drilling": {
                  "type": "string",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                }
              }
            }
          }
        },
        "ojSeriesDrill": {
          "description": "Triggered on a chart series drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "#event:SeriesDrill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "series": {
              "type": "any",
              "description": "The series id of the drilled object."
            },
            "seriesData": {
              "type": "object",
              "description": "The data for the series of the drilled object",
              "properties": {
                "items": {
                  "type": "Array<object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "type": "any"
                        },
                        "seriesId": {
                          "type": "string",
                          "description": "The id for the series the item belongs to.",
                          "displayName": "Series Id",
                          "help": "#seriesId"
                        },
                        "groupId": {
                          "type": "Array<string>",
                          "description": "The array of id(s) for the group(s) the item belongs to",
                          "displayName": "Group Id",
                          "help": "#groupId"
                        },
                        "value": {
                          "type": "number",
                          "description": "The array of id(s) for the group(s) the item belongs to",
                          "displayName": "Valus",
                          "help": "#value"
                        },
                        "color": {
                          "type": "string",
                          "description": "The color of the data item.",
                          "displayName": "Color",
                          "help": "#color"
                        },
                        "markerDisplayed": {
                          "type": "string",
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Displayed",
                          "help": "#markerDisplayed",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ]
                        },
                        "markerShape": {
                          "type": "string",
                          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Shape",
                          "help": "#markerShape",
                          "enumValues": [
                            "auto",
                            "square",
                            "circle",
                            "diamond",
                            "human",
                            "plus",
                            "star",
                            "triangleDown",
                            "triangleUp"
                          ]
                        },
                        "markerSize": {
                          "type": "number",
                          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                          "displayName": "Marker Size",
                          "help": "#markerSize"
                        },
                        "categories": {
                          "type": "Array<string>",
                          "description": "An optional array of category strings corresponding to this data item.",
                          "displayName": "Categories",
                          "help": "#categories"
                        },
                        "drilling": {
                          "type": "string",
                          "description": "Whether drilling is enabled for the data item.",
                          "displayName": "Drilling",
                          "help": "#drilling",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ]
                        },
                        "shortDesc": {
                          "type": "string",
                          "displayName": "Short Desc",
                          "help": "#shortDesc"
                        }
                      }
                    }
                  }
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An array of category strings corresponding to the tag cloud items."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the series. The chart legend item will inherit this color value."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled on the series item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The line style of the data line.",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineType": {
                  "type": "string",
                  "description": "The line type of the data line or area.",
                  "enumValues": [
                    "curved",
                    "straight"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the data line."
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerColor": {
                  "type": "string",
                  "description": "The color of the data markers, if different from the series color."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series."
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the series, displayed in the legend and tooltips."
                },
                "shortDesc": {
                  "type": "string",
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series."
                }
              }
            },
            "items": {
              "type": "Array<object>",
              "description": "An array containing objects describing the data items belonging to the drilled group.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "type": "any"
                    },
                    "seriesId": {
                      "type": "string",
                      "description": "The id for the series the item belongs to.",
                      "displayName": "Series Id",
                      "help": "#seriesId"
                    },
                    "groupId": {
                      "type": "Array<string>",
                      "description": "The array of id(s) for the group(s) the item belongs to",
                      "displayName": "Group Id",
                      "help": "#groupId"
                    },
                    "value": {
                      "type": "number",
                      "description": "The array of id(s) for the group(s) the item belongs to",
                      "displayName": "Valus",
                      "help": "#value"
                    },
                    "color": {
                      "type": "string",
                      "description": "The color of the data item.",
                      "displayName": "Color",
                      "help": "#color"
                    },
                    "markerDisplayed": {
                      "type": "string",
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Displayed",
                      "help": "#markerDisplayed",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "markerShape": {
                      "type": "string",
                      "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Shape",
                      "help": "#markerShape",
                      "enumValues": [
                        "auto",
                        "square",
                        "circle",
                        "diamond",
                        "human",
                        "plus",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ]
                    },
                    "markerSize": {
                      "type": "number",
                      "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                      "displayName": "Marker Size",
                      "help": "#markerSize"
                    },
                    "categories": {
                      "type": "Array<string>",
                      "description": "An optional array of category strings corresponding to this data item.",
                      "displayName": "Categories",
                      "help": "#categories"
                    },
                    "drilling": {
                      "type": "string",
                      "description": "Whether drilling is enabled for the data item.",
                      "displayName": "Drilling",
                      "help": "#drilling",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "shortDesc": {
                      "type": "string",
                      "displayName": "Short Desc",
                      "help": "#shortDesc"
                    }
                  }
                }
              }
            }
          }
        },
        "ojGroupDrill": {
          "description": "Triggered on a chart group drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "#event:GroupDrill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "group": {
              "type": "any",
              "description": "The group id of the drilled object."
            },
            "groupData": {
              "type": "object",
              "description": "An array of data for the group the drilled object belongs to.",
              "properties": {
                "drilling": {
                  "type": "string",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                }
              }
            },
            "items": {
              "type": "Array<object>",
              "description": "An array containing objects describing the data items belonging to the drilled group.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "type": "any"
                    },
                    "seriesId": {
                      "type": "string",
                      "description": "The id for the series the item belongs to.",
                      "displayName": "Series Id",
                      "help": "#seriesId"
                    },
                    "groupId": {
                      "type": "Array<string>",
                      "description": "The array of id(s) for the group(s) the item belongs to",
                      "displayName": "Group Id",
                      "help": "#groupId"
                    },
                    "value": {
                      "type": "number",
                      "description": "The array of id(s) for the group(s) the item belongs to",
                      "displayName": "Valus",
                      "help": "#value"
                    },
                    "color": {
                      "type": "string",
                      "description": "The color of the data item.",
                      "displayName": "Color",
                      "help": "#color"
                    },
                    "markerDisplayed": {
                      "type": "string",
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Displayed",
                      "help": "#markerDisplayed",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "markerShape": {
                      "type": "string",
                      "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Shape",
                      "help": "#markerShape",
                      "enumValues": [
                        "auto",
                        "square",
                        "circle",
                        "diamond",
                        "human",
                        "plus",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ]
                    },
                    "markerSize": {
                      "type": "number",
                      "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                      "displayName": "Marker Size",
                      "help": "#markerSize"
                    },
                    "categories": {
                      "type": "Array<string>",
                      "description": "An optional array of category strings corresponding to this data item.",
                      "displayName": "Categories",
                      "help": "#categories"
                    },
                    "drilling": {
                      "type": "string",
                      "description": "Whether drilling is enabled for the data item.",
                      "displayName": "Drilling",
                      "help": "#drilling",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "shortDesc": {
                      "type": "string",
                      "displayName": "Short Desc",
                      "help": "#shortDesc"
                    }
                  }
                }
              }
            }
          }
        },
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
          "help": "#event:ViewportChange",
          "detail": {
            "startGroup": {
              "type": "string",
              "description": "The start group of the new viewport on a chart with categorical axis."
            },
            "endGroup": {
              "type": "string",
              "description": "The end group of the new viewport on a chart with categorical axis."
            },
            "xMax": {
              "type": "number",
              "description": "The maximum x value of the new viewport."
            },
            "xMin": {
              "type": "number",
              "description": "The minimum x value of the new viewport."
            },
            "yMax": {
              "type": "number",
              "description": "The maximum y value of the new viewport."
            },
            "yMin": {
              "type": "number",
              "description": "The minimum y value of the new viewport."
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-line-chart-item": {
      "name": "line-chart-item",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLineChartItemElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-line-chart-item element is used to declare item properties",
      "displayName": "LineChartItem",
      "main": "oj-c/line-chart-item",
      "help": "oj-c.LineChartItem.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "seriesId": {
          "type": "string",
          "description": "The id for the series the item belongs to.",
          "displayName": "Series Id",
          "help": "#seriesId"
        },
        "groupId": {
          "type": "Array<string>",
          "description": "The array of id(s) for the group(s) the item belongs to",
          "displayName": "Group Id",
          "help": "#groupId"
        },
        "value": {
          "type": "number",
          "description": "The array of id(s) for the group(s) the item belongs to",
          "displayName": "Valus",
          "help": "#value"
        },
        "color": {
          "type": "string",
          "description": "The color of the data item.",
          "displayName": "Color",
          "help": "#color"
        },
        "markerDisplayed": {
          "type": "string",
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed",
          "enumValues": [
            "auto",
            "off",
            "on"
          ]
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "enumValues": [
            "auto",
            "square",
            "circle",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp"
          ]
        },
        "markerSize": {
          "type": "number",
          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
          "displayName": "Marker Size",
          "help": "#markerSize"
        },
        "categories": {
          "type": "Array<string>",
          "description": "An optional array of category strings corresponding to this data item.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled for the data item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ]
        },
        "shortDesc": {
          "type": "string",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-line-chart-series": {
      "name": "line-chart-series",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLineChartSeriesElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-line-chart-series element is used to declare series properties in the seriesTemplate",
      "displayName": "LineChartSeries",
      "main": "oj-c/line-chart-series",
      "help": "oj-c.LineChartSeries.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "categories": {
          "type": "Array<string>",
          "description": "An array of category strings corresponding to the tag cloud items.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "color": {
          "type": "string",
          "description": "The color of the series. The chart legend item will inherit this color value.",
          "displayName": "Color",
          "help": "#color"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled on the series item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ]
        },
        "lineStyle": {
          "type": "string",
          "description": "The line style of the data line.",
          "displayName": "LineStyle",
          "help": "#lineStyle",
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ]
        },
        "lineType": {
          "type": "string",
          "description": "The line type of the data line or area.",
          "displayName": "Line Type",
          "help": "#lineType",
          "enumValues": [
            "curved",
            "straight"
          ]
        },
        "lineWidth": {
          "type": "number",
          "description": "The width of the data line.",
          "displayName": "Line Width",
          "help": "#lineWidth"
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the data markers.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "enumValues": [
            "auto",
            "square",
            "circle",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp"
          ]
        },
        "markerColor": {
          "type": "string",
          "description": "The color of the data markers, if different from the series color.",
          "displayName": "Marker Color",
          "help": "#markerColor"
        },
        "markerDisplayed": {
          "type": "string",
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed"
        },
        "markerSize": {
          "type": "number",
          "description": "The size of the data markers.",
          "displayName": "Marker Size",
          "help": "#markerSize"
        },
        "name": {
          "type": "string",
          "description": "The name of the series, displayed in the legend and tooltips.",
          "displayName": "Name",
          "help": "#name"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-line-chart-group": {
      "name": "line-chart-group",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLineChartGroupElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-line-chart-group element is used to declare group properties in the groupTemplate",
      "displayName": "LineChartGroup",
      "main": "oj-c/line-chart-group",
      "help": "oj-c.LineChartGroup.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled on the group label.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the group.",
          "displayName": "Name",
          "help": "#name"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of the group.",
          "displayName": "ShortDesc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-list-item-layout": {
      "name": "list-item-layout",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CListItemLayoutElement"
      ],
      "description": "A List Item Layout represents layout used for list view item elements.",
      "displayName": "List Item Layout",
      "main": "oj-c/list-item-layout",
      "help": "oj-c.ListItemLayout.html",
      "status": [
        {
          "type": "supersedes",
          "since": "14.0.0",
          "value": [
            "oj-list-item-layout"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "oracle": {
          "uxSpecs": [
            "list-item-layout"
          ],
          "icon": "oj-ux-ico-list-item-layout"
        },
        "vbdt": {
          "module": "oj-c/list-item-layout",
          "defaultColumns": "12",
          "minColumns": "2"
        }
      },
      "since": "14.0.0",
      "slots": {
        "": {
          "description": "The default slot accepts the primary data to be displayed.",
          "displayName": "Default",
          "help": "#default"
        },
        "overline": {
          "description": "The overline slot is for adding a overline text above the default slot.",
          "displayName": "Overline",
          "help": "#overline"
        },
        "selector": {
          "description": "The selector slot can accept a oj-selector component and is optional.",
          "displayName": "Selector",
          "help": "#selector"
        },
        "leading": {
          "description": "The leading slot is used for adding a leading visual next to the selector.",
          "displayName": "Leading",
          "help": "#leading"
        },
        "secondary": {
          "description": "The secondary slot is for adding a secondary text below the default text.",
          "displayName": "Secondary",
          "help": "#secondary"
        },
        "tertiary": {
          "description": "The tertiary slot is for adding a tertiary text below the secondary text.",
          "displayName": "Tertiary",
          "help": "#tertiary"
        },
        "metadata": {
          "description": "The metadata for adding extra trailing information. Examples of metadata are author, date etc.",
          "displayName": "Metadata",
          "help": "#metadata"
        },
        "trailing": {
          "description": "The trailing slot is used for adding a trailing visual.",
          "displayName": "Trailing",
          "help": "#trailing"
        },
        "action": {
          "description": "Action slot often uses a toolbar. In general, the action slot should display either one primary action or one or more secondary actions.",
          "displayName": "Action",
          "help": "#action"
        },
        "quaternary": {
          "description": "The quaternary slot is for adding a quaternary text below the tertiary text.",
          "displayName": "Quaternary",
          "help": "#quaternary"
        },
        "navigation": {
          "description": "The navigation slot is used for adding links below the trailing slot.",
          "displayName": "Navigation",
          "help": "#navigation"
        }
      },
      "properties": {
        "inset": {
          "type": "string",
          "description": "Controls padding around outside of list item layouts.",
          "displayName": "Inset",
          "help": "#inset",
          "enumValues": [
            "none",
            "listInset"
          ]
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-list-view": {
      "name": "list-view",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CListViewElement"
      ],
      "displayName": "List View",
      "description": "A list view displays data items as a list or a grid with highly interactive features.",
      "help": "oj-c.ListView.html",
      "main": "oj-c/list-view",
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "vbdt": {
          "module": "oj-c/list-view"
        },
        "oracle": {
          "uxSpecs": [
            "list-view"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "selectionMode"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selected"
          ]
        }
      ],
      "since": "15.0.0",
      "properties": {
        "currentItem": {
          "type": "any",
          "description": "The item that currently has keyboard focus",
          "displayName": "Current Item",
          "help": "#currentItem",
          "readOnly": true,
          "writeback": true
        },
        "data": {
          "type": "DataProvider|null",
          "description": "The data source for ListView.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported"
                }
              ]
            }
          }
        },
        "gridlines": {
          "type": "object",
          "description": "Specifies whether the grid lines should be visible.",
          "displayName": "Gridlines",
          "help": "#gridlines",
          "properties": {
            "item": {
              "type": "string",
              "enumValues": [
                "hidden",
                "visible"
              ]
            },
            "top": {
              "type": "string",
              "enumValues": [
                "hidden",
                "visible"
              ]
            },
            "bottom": {
              "type": "string",
              "enumValues": [
                "hidden",
                "visible"
              ]
            }
          }
        },
        "scrollPolicyOptions": {
          "type": "object",
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches.",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "type": "number"
            },
            "scroller": {
              "type": "string"
            }
          }
        },
        "selected": {
          "type": "object",
          "description": "The selected property",
          "displayName": "Selected Items Changed",
          "help": "#selected",
          "writeback": true
        },
        "selectionMode": {
          "type": "string",
          "description": "Type of selection behavior for the ListView",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          },
          "enumValues": [
            "none",
            "multiple",
            "single"
          ],
          "value": "none"
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the component. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "any"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "any"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "isTabbable": {
              "type": "boolean"
            }
          }
        },
        "noData": {
          "description": "The noData slot is used to specify the content to show when there is no data. See the Help documentation for more information.",
          "displayName": "noData",
          "help": "#noData",
          "maxItems": 1,
          "data": {}
        }
      },
      "events": {
        "ojItemAction": {
          "description": "Triggered when user performs an action gesture on an item.",
          "displayName": "Item Action",
          "help": "#event:itemAction",
          "detail": {
            "context": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "item": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "any"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "indexFromParent": {
                          "type": "number"
                        },
                        "isLeaf": {
                          "type": "boolean"
                        },
                        "key": {
                          "type": "any"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "detail": {
                              "type": "string"
                            },
                            "severity": {
                              "type": "string|number"
                            },
                            "summary": {
                              "type": "string"
                            }
                          }
                        },
                        "parentKey": {
                          "type": "any"
                        },
                        "suggestion": {
                          "type": "object"
                        },
                        "treeDepth": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-split-menu-button": {
      "name": "split-menu-button",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSplitMenuButtonElement"
      ],
      "description": "A Split Menu Button combines a push button and menu button.",
      "displayName": "Split Menu Button",
      "help": "oj-c.SplitMenuButton.html",
      "main": "oj-c/split-menu-button",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/split-menu-button"
        },
        "oracle": {
          "icon": "oj-ux-ico-menu-button",
          "uxSpecs": [
            "menu-button"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "disabled",
            "width",
            "chroming",
            "size",
            "items"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button.",
          "displayName": "label",
          "help": "#label",
          "translatable": true,
          "value": ""
        },
        "items": {
          "type": "Array<object>",
          "description": "Items describe the menu items rendered by the menu button.",
          "displayName": "items",
          "help": "#items",
          "value": []
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "displayName": "disabled",
          "help": "#disabled",
          "value": false
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "displayName": "size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "translatable": true,
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "displayName": "width",
          "help": "#width"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has chromings in background and border.",
          "displayName": "chroming",
          "help": "#chroming",
          "propertyEditorValues": {
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            },
            "callToAction": {
              "description": "A Call To Action (CTA) button guides the user to take or complete the action that is the main goal of the page or page section. There should only be one CTA button on a page at any given time.",
              "displayName": "Call To Action"
            }
          },
          "enumValues": [
            "solid",
            "outlined",
            "callToAction"
          ],
          "value": "outlined"
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "eventGroup": "common",
          "displayName": "onOjAction",
          "help": "#event:action"
        }
      },
      "methods": {
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "doAction": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-selector": {
      "name": "selector",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectorElement"
      ],
      "description": "The selector component renders checkboxes in collections to support selection.",
      "displayName": "Selector",
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "vbdt": {
          "module": "oj-c/selector"
        }
      },
      "help": "oj-c.Selector.html",
      "since": "15.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-selector"
          ]
        }
      ],
      "main": "oj-c/selector",
      "properties": {
        "rowKey": {
          "type": "any",
          "description": "Specifies the row key of each selector.",
          "displayName": "Row Key",
          "help": "#rowKey"
        },
        "selectedKeys": {
          "type": "object",
          "description": "Specifies the selectedKeys, should be hooked into the collection component.",
          "displayName": "Selected Keys",
          "help": "#selectedKeys",
          "required": true,
          "writeback": true
        },
        "indeterminate": {
          "type": "boolean",
          "description": "Visual only state to indicate partial selection",
          "displayName": "indeterminate",
          "help": "#indeterminate",
          "value": false
        },
        "selectionMode": {
          "type": "string",
          "description": "Specifies the selection mode.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          },
          "enumValues": [
            "multiple",
            "single"
          ],
          "value": "multiple"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-selector-all": {
      "name": "selector-all",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectorAllElement"
      ],
      "description": "The selector all component renders a checkbox in collections to support selection.",
      "displayName": "SelectorAll",
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "vbdt": {
          "module": "oj-c/selectorAll"
        }
      },
      "help": "oj-c.SelectorAll.html",
      "since": "15.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-selector"
          ]
        }
      ],
      "main": "oj-c/selector-all",
      "properties": {
        "selectedKeys": {
          "type": "object",
          "description": "Specifies the selectedKeys, should be hooked into the collection component.",
          "displayName": "Selected Keys",
          "help": "#selectedKeys",
          "required": true,
          "writeback": true
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-date-text": {
      "name": "input-date-text",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputDateTextElement"
      ],
      "displayName": "InputDateText",
      "description": "An input date text field allows a user to enter a date value. Input date text fields should have labels that explicitly identify the input as a date.",
      "help": "oj-c.InputDateText.html",
      "main": "oj-c/input-date-text",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-date-text",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-date",
          "uxSpecs": [
            "input-date"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "15.0.0",
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported"
                }
              ]
            }
          },
          "properties": {
            "format": {
              "type": "function"
            },
            "parse": {
              "type": "function"
            }
          }
        },
        "dateRangeOverflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default validator's rangeOverflow message detail.",
          "displayName": "Date Range Overflow Message Detail",
          "help": "#dateRangeOverflowMessageDetail",
          "translatable": true
        },
        "dateRangeUnderflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default validator's rangeUnderflow message detail.",
          "displayName": "Date Range Underflow Message Detail",
          "help": "#dateRangeUnderflowMessageDetail",
          "translatable": true
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "string|null",
          "description": "The maximum selectable date, in ISO string format",
          "displayName": "Max",
          "help": "#max",
          "format": "date"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "min": {
          "type": "string|null",
          "description": "The minimum selectable date, in ISO string format",
          "displayName": "Min",
          "help": "#min",
          "format": "date"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "format": "date",
          "writeback": true,
          "value": null
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-date-mask": {
      "name": "input-date-mask",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputDateMaskElement"
      ],
      "displayName": "InputDateMask",
      "description": "An input date mask field allows a user to individually edit, step, or spin the values of the month, day, and year fields of a calendar date.",
      "help": "oj-c.InputDateMask.html",
      "main": "oj-c/input-date-mask",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-date-mask",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-date",
          "uxSpecs": [
            "input-date"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "16.0.0",
      "properties": {
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "dateRangeOverflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default validator's rangeOverflow message detail.",
          "displayName": "Date Range Overflow Message Detail",
          "help": "#dateRangeOverflowMessageDetail",
          "translatable": true
        },
        "dateRangeUnderflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default validator's rangeUnderflow message detail.",
          "displayName": "Date Range Underflow Message Detail",
          "help": "#dateRangeUnderflowMessageDetail",
          "translatable": true
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "string|null",
          "description": "The maximum selectable date, in ISO string format",
          "displayName": "Max",
          "help": "#max",
          "format": "date"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "min": {
          "type": "string|null",
          "description": "The minimum selectable date, in ISO string format",
          "displayName": "Min",
          "help": "#min",
          "format": "date"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "format": "date",
          "writeback": true,
          "value": null
        },
        "rawValue": {
          "type": "object",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "properties": {
            "year": {
              "type": "number"
            },
            "month": {
              "type": "number"
            },
            "day": {
              "type": "number"
            }
          },
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the validation process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-legend": {
      "name": "legend",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLegendElement"
      ],
      "description": "A legend displays an interactive description of symbols, colors, etc., used in graphical information representations.",
      "displayName": "Legend",
      "main": "oj-c/legend",
      "help": "oj-c.Legend.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/legend",
          "defaultColumns": 2,
          "minColumns": 1
        },
        "oracle": {
          "icon": "oj-ux-ico-legend",
          "uxSpecs": [
            "legend"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation",
            "halign",
            "valign",
            "hoverBehavior",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "15.0.0",
      "properties": {
        "data": {
          "type": "DataProvider|null",
          "description": "Specifies the DataProvider for the sections and items of the legend.",
          "displayName": "Data",
          "help": "#data",
          "value": null
        },
        "drilling": {
          "type": "string",
          "description": "Specifies whether drilling is enabled.",
          "displayName": "Drilling",
          "help": "#drilling",
          "propertyEditorValues": {
            "on": {
              "description": "Legend items will be drillable",
              "displayName": "On"
            },
            "off": {
              "description": "Legend items will not be drillable",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "halign": {
          "type": "string",
          "description": "Defines the horizontal alignment of the legend contents.",
          "displayName": "Halign",
          "help": "#halign",
          "propertyEditorValues": {
            "center": {
              "description": "Legend contents will be center aligned",
              "displayName": "Center"
            },
            "end": {
              "description": "Legend contents will be end aligned",
              "displayName": "End"
            },
            "start": {
              "description": "Legend contents will be start aligned",
              "displayName": "Start"
            }
          },
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "value": "start"
        },
        "hiddenCategories": {
          "type": "Array<string>",
          "description": "An array of categories that will be hidden.",
          "displayName": "Hidden Categories",
          "help": "#hiddenCategories",
          "writeback": true,
          "value": []
        },
        "hideAndShowBehavior": {
          "type": "string",
          "description": "Defines whether the legend can be used to initiate hide and show behavior on referenced data items.",
          "displayName": "Hide And Show Behavior",
          "help": "#hideAndShowBehavior",
          "propertyEditorValues": {
            "on": {
              "description": "Legend can be used to initiate hide and show behavior on referenced data items.",
              "displayName": "On"
            },
            "off": {
              "description": "legend cannot be used to initiate hide and show behavior on referenced data items.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "highlightedCategories": {
          "type": "Array<string>",
          "description": "An array of categories that will be highlighted.",
          "displayName": "Highlighted Categories",
          "help": "#highlightedCategories",
          "writeback": true,
          "value": []
        },
        "hoverBehavior": {
          "type": "string",
          "description": "Defines the behavior applied when hovering over a legend item.",
          "displayName": "Hover Behavior",
          "help": "#hoverBehavior",
          "propertyEditorValues": {
            "dim": {
              "description": "Dimming hover behavior is applied.",
              "displayName": "Dim"
            },
            "none": {
              "description": "No hover behavior will be applied.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "dim"
          ],
          "value": "none"
        },
        "orientation": {
          "type": "string",
          "description": "Defines the orientation of the legend, which determines the direction in which the legend items are laid out.",
          "displayName": "Orientation",
          "help": "#orientation",
          "propertyEditorValues": {
            "horizontal": {
              "description": "Legend items will be horizontally placed in available space.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Legend items will be vertically stacked.",
              "displayName": "Vertical"
            }
          },
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "value": "vertical"
        },
        "symbolHeight": {
          "type": "number",
          "description": "The height of the legend symbol in pixels.",
          "displayName": "Symbol Height",
          "help": "#symbolHeight",
          "value": 0
        },
        "symbolWidth": {
          "type": "number",
          "description": "The width of the legend symbol in pixels.",
          "displayName": "Symbol Width",
          "help": "#symbolWidth",
          "value": 0
        },
        "textStyle": {
          "type": "object",
          "description": "The CSS style object defining the style of the legend item text.",
          "displayName": "Text Style",
          "help": "#textStyle",
          "properties": {
            "color": {
              "type": "string"
            },
            "fontFamily": {
              "type": "string"
            },
            "fontSize": {
              "type": "string"
            },
            "fontStyle": {
              "type": "string"
            },
            "fontWeight": {
              "type": "string"
            },
            "textDecoration": {
              "type": "string"
            }
          }
        },
        "valign": {
          "type": "string",
          "description": "Defines the vertical alignment of the legend contents.",
          "displayName": "valign",
          "help": "#valign",
          "propertyEditorValues": {
            "middle": {
              "description": "The legend items will be middle aligned.",
              "displayName": "Middle"
            },
            "bottom": {
              "description": "The legend items will be bottom aligned.",
              "displayName": "Bottom"
            },
            "top": {
              "description": "The legend items will be top aligned.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "top",
            "bottom",
            "middle"
          ],
          "value": "top"
        },
        "sectionTitleStyle": {
          "type": "object",
          "description": "The CSS style object defining the style of the section titles' text.",
          "displayName": "Section Title Style",
          "help": "#sectionTitleStyle",
          "properties": {
            "color": {
              "type": "string"
            },
            "fontFamily": {
              "type": "string"
            },
            "fontSize": {
              "type": "string"
            },
            "fontStyle": {
              "type": "string"
            },
            "fontWeight": {
              "type": "string"
            },
            "textDecoration": {
              "type": "string"
            }
          }
        },
        "sectionTitleHalign": {
          "type": "string",
          "description": "The horizontal alignment of the section titles.",
          "displayName": "Section Title Halign",
          "help": "#sectionTitleHalign",
          "propertyEditorValues": {
            "center": {
              "description": "The section title will be center aligned.",
              "displayName": "Center"
            },
            "end": {
              "description": "The section title will be end aligned.",
              "displayName": "End"
            },
            "start": {
              "description": "The section title will be start aligned.",
              "displayName": "Start"
            }
          },
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "value": "start"
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to map each data item in the component. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            },
            "parentData": {
              "type": "Array<any>"
            },
            "parentKey": {
              "type": "any"
            }
          }
        },
        "sectionTemplate": {
          "description": "The sectionTemplate slot is used to map each data item in the component. See the Help documentation for more information.",
          "displayName": "sectionTemplate",
          "help": "#sectionTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            }
          }
        }
      },
      "events": {
        "ojDrill": {
          "description": "Triggered during a drill gesture (single click on the legend item).",
          "help": "#event:drill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled item."
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-legend-item": {
      "name": "legend-item",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLegendItemElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-legend-item element is used to declare properties for legend items.",
      "displayName": "LegendItem",
      "main": "oj-c/legend-item",
      "help": "oj-c.LegendItem.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "15.0.0",
      "properties": {
        "text": {
          "type": "string",
          "description": "The legend item text.",
          "displayName": "Text",
          "help": "#text"
        },
        "categories": {
          "type": "Array<string>",
          "description": "An array of categories for the legend item. Legend items currently only support a single category.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "symbolType": {
          "type": "string",
          "description": "The type of legend symbol to display.",
          "displayName": "Symbol Type",
          "help": "#symbolType",
          "propertyEditorValues": {
            "line": {
              "description": "The legend symbol will be a line.",
              "displayName": "Line"
            },
            "lineWithMarker": {
              "description": "The legend symbol will be a line and a marker.",
              "displayName": "LineWithMarker"
            },
            "image": {
              "description": "The legend symbol will be an image.",
              "displayName": "Image"
            },
            "marker": {
              "description": "The legend symbol will be a marker.",
              "displayName": "Marker"
            }
          },
          "enumValues": [
            "marker",
            "image",
            "line",
            "lineWithMarker"
          ]
        },
        "source": {
          "type": "string",
          "description": "The URI of the image of the legend symbol.",
          "displayName": "Source",
          "help": "#source"
        },
        "color": {
          "type": "string",
          "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color.",
          "displayName": "Color",
          "help": "#color"
        },
        "borderColor": {
          "type": "string",
          "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker.",
          "displayName": "Border Color",
          "help": "#borderColor"
        },
        "lineStyle": {
          "type": "string",
          "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
          "displayName": "Line Style",
          "help": "#lineStyle",
          "propertyEditorValues": {
            "dotted": {
              "description": "Line will have dotted strokes.",
              "displayName": "Dotted"
            },
            "dashed": {
              "description": "Line will have dashed strokes.",
              "displayName": "Dashed"
            },
            "solid": {
              "description": "Line will have a solid stroke.",
              "displayName": "Solid"
            }
          },
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ]
        },
        "lineWidth": {
          "type": "number",
          "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker.",
          "displayName": "Line Width",
          "help": "#lineWidth"
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\". Does not apply if a custom image is specified.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "propertyEditorValues": {
            "circle": {
              "description": "The marker will be of circular shape.",
              "displayName": "Circle"
            },
            "diamond": {
              "description": "The marker will be of diamond shape.",
              "displayName": "Diamond"
            },
            "ellipse": {
              "description": "The marker will be of ellipse shape.",
              "displayName": "Ellipse"
            },
            "human": {
              "description": "The marker will be of human shape.",
              "displayName": "Human"
            },
            "plus": {
              "description": "The marker will be of plus shape.",
              "displayName": "Plus"
            },
            "rectangle": {
              "description": "The marker will be of rectangular shape.",
              "displayName": "Rectangle"
            },
            "square": {
              "description": "The marker will be of square shape.",
              "displayName": "Square"
            },
            "star": {
              "description": "The marker will be of star shape.",
              "displayName": "Star"
            },
            "triangleDown": {
              "description": "The  marker will be of triangular shape facing down.",
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "description": "The  marker will be of triangular shape facing up.",
              "displayName": "Triangle Up"
            }
          },
          "enumValues": [
            "square",
            "circle",
            "ellipse",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp",
            "rectangle"
          ]
        },
        "markerColor": {
          "type": "string",
          "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\".",
          "displayName": "sections",
          "help": "#sections"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text.",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-legend-section": {
      "name": "legend-section",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLegendSectionElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-legend-section element is used to declare properties for legend sections.",
      "displayName": "LegendSection",
      "main": "oj-c/legend-section",
      "help": "oj-c.LegendSection.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "15.0.0",
      "properties": {
        "text": {
          "type": "string",
          "description": "The title of the legend section.",
          "displayName": "Text",
          "help": "#text"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-tag-cloud": {
      "name": "tag-cloud",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTagCloudElement"
      ],
      "description": "A tag cloud is an interactive data visualization of textual data, where the importance of each tagged word or phrase is represented by font size or color.",
      "displayName": "Tag Cloud",
      "main": "oj-c/tag-cloud",
      "help": "oj-c.TagCloud.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/tag-cloud",
          "defaultColumns": 12,
          "minColumns": 6
        },
        "oracle": {
          "icon": "oj-ux-ico-cloud-tag",
          "uxSpecs": [
            "tag-cloud"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "layout",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selection"
          ]
        }
      ],
      "since": "15.0.0",
      "properties": {
        "data": {
          "type": "DataProvider|null",
          "description": "Specifies the DataProvider for the sections and items of the tag-cloud",
          "displayName": "Data",
          "help": "#data",
          "value": null
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "hiddenCategories": {
          "type": "Array<string>",
          "description": "An array of categories that will be hidden.",
          "displayName": "Hidden Categories",
          "help": "#hiddenCategories",
          "writeback": true,
          "value": []
        },
        "touchResponse": {
          "type": "string",
          "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if element panning is not available for those elements that support the feature.",
          "displayName": "Touch Response",
          "help": "#touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ]
        },
        "highlightMatch": {
          "type": "string",
          "description": "The matching condition for the highlightedCategories option. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
          "displayName": "Highlight Match",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "value": "all"
        },
        "highlightedCategories": {
          "type": "Array<string>",
          "description": "An array of categories that will be highlighted.",
          "displayName": "Highlighted Categories",
          "help": "#highlightedCategories",
          "writeback": true,
          "value": []
        },
        "hoverBehavior": {
          "type": "string",
          "description": "Defines the behavior applied when hovering over data items.",
          "displayName": "Hover Behavior",
          "help": "#hoverBehavior",
          "propertyEditorValues": {
            "dim": {
              "description": "Dimming hover behavior is applied.",
              "displayName": "Dim"
            },
            "none": {
              "description": "No hover behavior will be applied.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "dim"
          ],
          "value": "none"
        },
        "layout": {
          "type": "string",
          "description": "The layout to use for tag display.",
          "displayName": "Layout",
          "help": "#layout",
          "propertyEditorValues": {
            "cloud": {
              "description": "Items will be horizontally placed in available space.",
              "displayName": "Cloud"
            },
            "rectangular": {
              "description": "Items will be vertically stacked.",
              "displayName": "Rectangular"
            }
          },
          "enumValues": [
            "cloud",
            "rectangular"
          ],
          "value": "rectangular"
        },
        "selectionMode": {
          "type": "string",
          "description": "Specifies the selection mode.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "enumValues": [
            "none",
            "multiple",
            "single"
          ],
          "value": "none"
        },
        "selection": {
          "type": "Array<any>",
          "description": "An array containing the ids of the initially selected data items.",
          "displayName": "Selection",
          "help": "#selection",
          "writeback": true,
          "value": []
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to map each data item in the component. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-tag-cloud-item": {
      "name": "tag-cloud-item",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTagCloudItemElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-tag-cloud-item element is used to declare properties for tag cloud items",
      "displayName": "TagCloudItem",
      "main": "oj-c/tag-cloud-item",
      "help": "oj-c.TagCloudItem.html",
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "15.0.0",
      "properties": {
        "categories": {
          "type": "Array<string>",
          "description": "An array of category strings corresponding to the tag cloud items.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "color": {
          "type": "string",
          "description": "The color of the text. Will be overridden by any color defined in the style option. The default value comes from the CSS and varies based on theme.",
          "displayName": "Color",
          "help": "#color"
        },
        "label": {
          "type": "string",
          "description": "The text of the item.",
          "displayName": "Label",
          "help": "#label"
        },
        "value": {
          "type": "number|null",
          "description": "The value of this item is used to scale its font size within the tag cloud.",
          "displayName": "Value",
          "help": "#value"
        },
        "url": {
          "type": "string",
          "description": "The url this item references.",
          "displayName": "Url",
          "help": "#url"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of the item. This is used for customizing the tooltip text.",
          "displayName": "ShortDesc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-message-banner": {
      "name": "message-banner",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMessageBannerElement"
      ],
      "description": "Message Banners are brief, moderately disruptive, semi-permanent messages that help communicate relevant and useful information.",
      "displayName": "Message Banner",
      "main": "oj-c/message-banner",
      "help": "oj-c.MessageBanner.html",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "oracle": {
          "icon": "oj-ux-ico-message-banner",
          "uxSpecs": [
            "banner-messages"
          ]
        },
        "vbdt": {
          "defaultColumns": "2",
          "minColumns": "1",
          "module": "oj-c/message-banner"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "type"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "16.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-messages",
            "oj-message-banner"
          ]
        }
      ],
      "properties": {
        "data": {
          "type": "DataProvider",
          "description": "Data for the Message Banner component.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported"
                }
              ]
            }
          }
        },
        "type": {
          "type": "string",
          "description": "The type of the Banner message.",
          "displayName": "Type",
          "help": "#type",
          "propertyEditorValues": {
            "page": {
              "description": "Renders the messages as edge-to-edge messages with no gap in between them.",
              "displayName": "Page"
            },
            "section": {
              "description": "Renders the messages as section messages - with rounded corners, outline and gap between messages.",
              "displayName": "Section"
            }
          },
          "enumValues": [
            "page",
            "section"
          ],
          "value": "section"
        },
        "detailTemplateValue": {
          "type": "string|function",
          "description": "The function that determines the detail template for the current row.",
          "displayName": "Current Detail Template",
          "help": "#detailTemplateValue",
          "dynamicSlotDef": "MessageBannerTemplateContext"
        }
      },
      "dynamicSlots": {
        "MessageBannerTemplateContext": {
          "description": "The dynamic template slots for the Banner message.",
          "displayName": "Dynamic Template Slots",
          "help": "#dynamicTemplates",
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "events": {
        "ojClose": {
          "description": "Event emitted when the user tries to close a message though UI interaction",
          "help": "#event:ojClose",
          "detail": {
            "data": {
              "type": "any",
              "description": "The data that was used to render the message."
            },
            "key": {
              "type": "any",
              "description": "The key for the message."
            },
            "metadata": {
              "type": "object",
              "description": "The metadata of the message.",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-radioset": {
      "name": "radioset",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CRadiosetElement"
      ],
      "description": "A radio set allows the user to select one option from a set of mutually exclusive options.",
      "displayName": "Radioset",
      "help": "oj-c.Radioset.html",
      "main": "oj-c/radioset",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-radioset"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/radioset"
        },
        "oracle": {
          "icon": "oj-ux-ico-radioset",
          "uxSpecs": [
            "radioset"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "direction",
            "placeholder",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "options",
            "value"
          ]
        }
      ],
      "since": "16.0.0",
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "direction": {
          "type": "string",
          "description": "Layout direction of the radioset radio elements.",
          "displayName": "Direction",
          "help": "#direction",
          "enumValues": [
            "row",
            "column"
          ],
          "value": "column"
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that describes whether or not the auxiliary content should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component relative to the field.",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label will be placed on top of the radioset, but is smaller than the 'top' option.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The radioset will not create a label, but instead will set the aria-label property on the radioset.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the radioset.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the radioset.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "options": {
          "type": "Array<object>|DataProvider",
          "description": "The data provided to the radioset that represents one or more radio items.",
          "displayName": "Options",
          "help": "#options"
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly or not.",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "value": {
          "type": "any",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        }
      },
      "methods": {
        "blur": {
          "description": "Sets focus on the radioset or the first tabbable radio item.",
          "return": "void"
        },
        "focus": {
          "description": "Blurs the radioset.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages.",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-action-card": {
      "name": "action-card",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CActionCardElement"
      ],
      "description": "An Action Card is an actionable container rendering related information",
      "displayName": "Action Card",
      "help": "oj-c.ActionCard.html",
      "main": "oj-c/action-card",
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "oracle": {
          "icon": "oj-ux-ico-object-card",
          "uxSpecs": [
            "card"
          ]
        },
        "vbdt": {
          "module": "oj-c/action-card",
          "defaultColumns": "1",
          "minColumns": "1"
        }
      },
      "since": "16.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the card.",
          "displayName": "Default",
          "help": "#default"
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a card is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click is to listen for this event.",
          "eventGroup": "common",
          "displayName": "onOjAction",
          "help": "#event:action"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-selection-card": {
      "name": "selection-card",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectionCardElement"
      ],
      "description": "A Selection Card is a container that can be set as selected with a collection",
      "displayName": "Selection Card",
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "oracle": {
          "icon": "oj-ux-ico-object-card",
          "uxSpecs": [
            "card"
          ]
        },
        "vbdt": {
          "module": "oj-c/selection-card",
          "defaultColumns": "1",
          "minColumns": "1"
        }
      },
      "since": "16.0.0",
      "main": "oj-c/selection-card",
      "slots": {
        "": {
          "description": "The default slot is the content of the card.",
          "displayName": "Default",
          "help": "#default"
        }
      },
      "properties": {
        "selected": {
          "type": "boolean",
          "description": "Boolean that marks this card as selected.",
          "displayName": "Selected",
          "help": "#selected"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-checkbox": {
      "name": "checkbox",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CCheckboxElement"
      ],
      "displayName": "Checkbox",
      "description": "Checkbox is a single standalone checkbox control. It represents a boolean value.",
      "help": "oj-c.Checkbox.html",
      "main": "oj-c/checkbox",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/checkbox",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-checkbox-on",
          "uxSpecs": [
            "checkbox"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "16.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content associated with the checkbox. This can be a label or a block of text.",
          "displayName": "Default",
          "help": "#default"
        }
      },
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that describes whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages and required are shown inline under the field with no reserved space. Help & hints will appear in a popup with a help icon.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages and required are shown inline under the field with reserved space. Help & hints will appear in a popup with a help icon.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages and required are shown inline under the field with reserved space. Help & hints will appear in a popup with a help icon.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        },
        "value": {
          "type": "boolean",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": false
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-checkboxset": {
      "name": "checkboxset",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CCheckboxsetElement"
      ],
      "displayName": "Checkboxset",
      "description": "A checkbox set allows the user to select one or more options from a set and creates the necessary dom elements for the actual checkboxes.",
      "help": "oj-c.Checkboxset.html",
      "main": "oj-c/checkboxset",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-checkboxset"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/checkboxset",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-checkbox-on",
          "uxSpecs": [
            "checkboxset"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "16.0.0",
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "direction": {
          "type": "string",
          "description": "Layout direction of the checkbox elements.",
          "displayName": "Direction",
          "help": "#direction",
          "enumValues": [
            "row",
            "column"
          ]
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that describes whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label will be placed on top of the checkboxset, but is smaller than 'top' option.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The checkboxset will not create a label, but instead set the aria-label property on the checkboxset.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the checkboxset.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the checkboxset.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Help and hints are shown above under the field. Messages and required are shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Help and hints are shown above under the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Help and hints are shown above under the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "options": {
          "type": "Array<object>|DataProvider",
          "description": "An array of data items or a data provider that returns the option items for the Checkboxset.",
          "displayName": "Options",
          "help": "#options"
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        },
        "value": {
          "type": "Array<any>|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-drawer-popup": {
      "name": "drawer-popup",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CDrawerPopupElement"
      ],
      "description": "Drawer Popup adds a single slide-in side content alongside some primary content to an application window.",
      "displayName": "Drawer Popup",
      "help": "oj-c.DrawerPopup.html",
      "main": "oj-c/drawer-popup",
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "vbdt": {
          "module": "oj-c/drawer-popup"
        },
        "oracle": {
          "icon": "oj-ux-ico-drawer",
          "uxSpecs": [
            "drawer"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "opened",
            "modality",
            "edge",
            "autoDismiss"
          ]
        }
      ],
      "since": "16.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the Drawer Popup.",
          "displayName": "default",
          "help": "#Default"
        }
      },
      "properties": {
        "opened": {
          "type": "boolean",
          "description": "Specifies whether the Drawer is open.",
          "displayName": "Opened",
          "help": "#opened",
          "writeback": true,
          "value": false
        },
        "modality": {
          "type": "string",
          "description": "Controls the modality of the drawer.",
          "displayName": "Modality",
          "help": "#modality",
          "enumValues": [
            "modal",
            "modeless"
          ],
          "value": "modal"
        },
        "edge": {
          "type": "string",
          "description": "Specifies at what edge the drawer opens.",
          "displayName": "Edge",
          "help": "#edge",
          "enumValues": [
            "end",
            "start",
            "bottom"
          ],
          "value": "start"
        },
        "autoDismiss": {
          "type": "string",
          "description": "Specifies the close auto-dismiss behaviour to close the drawer.",
          "displayName": "Auto Dismiss",
          "help": "#autoDismiss",
          "enumValues": [
            "none",
            "focus-loss"
          ],
          "value": "focus-loss"
        },
        "closeGesture": {
          "type": "string",
          "description": "Specifies whether a gesture closes the drawer.",
          "displayName": "Close gesture",
          "help": "#closeGesture",
          "enumValues": [
            "none",
            "swipe"
          ],
          "value": "swipe"
        }
      },
      "events": {
        "ojBeforeClose": {
          "cancelable": true,
          "description": "Triggered immediately before the drawer closes",
          "displayName": "Beforeclose",
          "help": "#event:beforeClose",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-form-layout": {
      "name": "form-layout",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CFormLayoutElement"
      ],
      "displayName": "Form Layout",
      "description": "A form layout will lay out its children responsively in the row or column direction.",
      "help": "oj-c.FormLayout.html",
      "main": "oj-c/form-layout",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/form-layout",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-form-layout",
          "uxSpecs": [
            "form-layout"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "columns",
            "columnSpan",
            "direction",
            "labelEdge",
            "labelStartWidth",
            "labelWrapping",
            "maxColumns",
            "readonly",
            "userAssistanceDensity"
          ]
        }
      ],
      "since": "16.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the form layout. The oj-c-form-layout element expects core pack form component children for the default slot.",
          "displayName": "default",
          "help": "#Default"
        }
      },
      "properties": {
        "columns": {
          "type": "number",
          "description": "Specifies how many columns should be displayed (fixed). If positive, overrides maxColumns.",
          "displayName": "Columns",
          "help": "#columns",
          "value": 0
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span when this it is a child of a form layout.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "direction": {
          "type": "string",
          "description": "Specifies the layout direction of the form layout children.",
          "displayName": "Direction",
          "help": "#direction",
          "propertyEditorValues": {
            "column": {
              "description": "Components are laid out in columns.",
              "displayName": "Column"
            },
            "row": {
              "description": "Components are laid out in rows.",
              "displayName": "Row"
            }
          },
          "enumValues": [
            "row",
            "column"
          ],
          "value": "row"
        },
        "fullWidth": {
          "type": "boolean",
          "description": "Indicates if the form layout will use 100% of the container's width.",
          "displayName": "Full Width",
          "help": "#fullWidth",
          "value": false
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the child form components should position their labels.",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            },
            "provide": [
              {
                "name": "containerLabelEdge"
              },
              {
                "name": "labelEdge"
              }
            ]
          },
          "value": "inside"
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            },
            "provide": [
              {
                "name": "labelStartWidth"
              },
              {
                "name": "labelWidth"
              }
            ]
          },
          "value": "33%"
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            },
            "provide": [
              {
                "name": "labelWrapping"
              }
            ]
          },
          "value": "wrap"
        },
        "maxColumns": {
          "type": "number",
          "description": "Specifies how many columns should be displayed (responsive). This prop is ignored if columns has a positive value.",
          "displayName": "Max Columns",
          "help": "#maxColumns",
          "value": 1
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the child components should be rendered as readonly.",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            },
            "provide": [
              {
                "name": "containerReadonly",
                "default": false
              },
              {
                "name": "readonly"
              }
            ]
          }
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the children form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            },
            "provide": [
              {
                "name": "containerUserAssistanceDensity",
                "default": "efficient"
              },
              {
                "name": "userAssistanceDensity",
                "default": "efficient"
              }
            ]
          },
          "value": "efficient"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-labelled-link": {
      "name": "labelled-link",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLabelledLinkElement"
      ],
      "displayName": "LabelledLink",
      "description": "The Labelled Link component displays a readonly field that has a link for its content.",
      "help": "oj-c.LabelledLink.html",
      "main": "oj-c/labelled-link",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/labelled-link",
          "defaultColumns": 6,
          "minColumns": 2,
          "componentPalette": {
            "visibility": "never"
          }
        },
        "oracle": {
          "icon": "oj-ux-ico-link",
          "uxSpecs": [
            "input-text"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "textAlign"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "href",
            "target",
            "text"
          ]
        }
      ],
      "since": "16.0.0",
      "properties": {
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan"
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "href": {
          "type": "string",
          "description": "Sets the URL that the link points to.",
          "displayName": "Href",
          "help": "#href"
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label will be placed inside the component and above the link (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-labelledby property on the anchor element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "target": {
          "type": "string",
          "description": "Sets the target attribute of the link.",
          "displayName": "Target",
          "help": "#target"
        },
        "text": {
          "type": "string",
          "description": "Specifies the text that should appear in the field.",
          "displayName": "Text",
          "help": "#text"
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "The field will not reserve any space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "The field will reserve space to prevent reflow.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "The field will not reserve any space.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        }
      },
      "events": {
        "ojAction": {
          "description": "Triggered when the link is clicked, whether by keyboard, mouse, or touch events. This event is triggered only when the href is not provided. If the href is provided, clicking the link will not trigger this event.",
          "eventGroup": "common",
          "displayName": "onOjAction",
          "help": "#event:action"
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the link.",
          "return": "void"
        },
        "focus": {
          "description": "Sets focus on the link.",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-menu-button": {
      "name": "menu-button",
      "version": "16.0.1",
      "jetVersion": "^16.0.1",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMenuButtonElement"
      ],
      "description": "A menu button launches a menu when clicked.",
      "displayName": "Menu Button",
      "help": "oj-c.MenuButton.html",
      "main": "oj-c/menu-button",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/menu-button"
        },
        "oracle": {
          "icon": "oj-ux-ico-menu-button",
          "uxSpecs": [
            "menu-button"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "suffix",
            "tooltip",
            "items",
            "selection",
            "display",
            "disabled",
            "size",
            "width",
            "chroming"
          ]
        }
      ],
      "since": "16.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-menu-button",
            "oj-menu-select-many"
          ]
        }
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button.",
          "displayName": "label",
          "help": "#label",
          "required": true,
          "translatable": true,
          "value": ""
        },
        "suffix": {
          "type": "string",
          "description": "Suffix appended to menu label to indicate last selection.",
          "displayName": "suffix",
          "help": "#label",
          "translatable": true
        },
        "tooltip": {
          "type": "string",
          "description": "Text to show in the tooltip. This overrides the default tooltip that renders the label when in icon mode.",
          "displayName": "tooltip",
          "help": "#tooltip",
          "translatable": true
        },
        "items": {
          "type": "Array<object>",
          "description": "Items describe the menu items rendered by the menu button.",
          "displayName": "items",
          "help": "#items",
          "value": []
        },
        "selection": {
          "type": "object",
          "description": "An array containing key/value objects for menu selection groups.",
          "displayName": "Selection",
          "help": "#selection",
          "writeback": true
        },
        "display": {
          "type": "string",
          "description": "Display just the label, the icons, or all. Label is used as tooltip and should be set in all cases.",
          "displayName": "display",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the text label.",
              "displayName": "label"
            }
          },
          "enumValues": [
            "all",
            "label",
            "icons"
          ],
          "value": "all"
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "displayName": "disabled",
          "help": "#disabled",
          "value": false
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "displayName": "size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "translatable": true,
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "displayName": "width",
          "help": "#width"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has chromings in background and border.",
          "displayName": "chroming",
          "help": "#chroming",
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are a more prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            }
          },
          "enumValues": [
            "solid",
            "borderless",
            "outlined"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          },
          "value": "outlined"
        }
      },
      "slots": {
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-c-menu-button element accepts DOM nodes as children with the startIcon slot.",
          "displayName": "startIcon",
          "help": "#startIcon"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-c-menu-button element accepts DOM nodes as children with the endIcon slot.",
          "displayName": "endIcon",
          "help": "#endIcon"
        }
      },
      "events": {
        "ojMenuAction": {
          "bubbles": true,
          "description": "Triggered when a menu item is clicked, whether by keyboard, mouse, or touch events. Detail indicates which menu item was clicked.",
          "eventGroup": "common",
          "displayName": "onOjMenuAction",
          "help": "#event:ojMenuAction",
          "detail": {
            "key": {
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    }
  }
}
