{"version":3,"file":"ListViewWebElementBase.js","sourceRoot":"","sources":["ListViewWebElementBase.ts"],"names":[],"mappings":";;;AAAA,iEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,sBAAuB,SAAQ,uBAAY;IACtD;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAM,aAAa,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,CAAY,WAAW,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,sBAAsB;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAsB,qBAAqB,CAAC,CAAC;IACtE,CAAC;IAED;;;;;OAKG;IACI,cAAc,CAAC,QAAgB;QACpC,OAAO,IAAI,CAAC,WAAW,CAAS,UAAU,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAS,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAS,eAAe,CAAC,CAAC;IACnD,CAAC;CACF;AA5DD,wDA4DC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-list-view WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, ListViewWebElement.ts.\n */\nexport class ListViewWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>currentItem</code> property.\n   * The item that currently has keyboard focus\n   * @return The value of <code>currentItem</code> property.\n   *\n   */\n  public getCurrentItem(): Promise<any> {\n    return this.getProperty<any>('currentItem');\n  }\n\n  /**\n   * Gets the value of <code>gridlines</code> property.\n   * Specifies whether the grid lines should be visible.\n   * @return The value of <code>gridlines</code> property.\n   *\n   */\n  public getGridlines(): Promise<Gridlines> {\n    return this.getProperty<Gridlines>('gridlines');\n  }\n\n  /**\n   * Gets the value of <code>scrollPolicyOptions</code> property.\n   * Specifies fetch options for scrolling behaviors that trigger data fetches.\n   * @return The value of <code>scrollPolicyOptions</code> property.\n   *\n   */\n  public getScrollPolicyOptions(): Promise<ScrollPolicyOptions> {\n    return this.getProperty<ScrollPolicyOptions>('scrollPolicyOptions');\n  }\n\n  /**\n   * Sets the value of <code>selected</code> property.\n   * The selected property\n   * @param selected The value to set for <code>selected</code>\n   *\n   */\n  public changeSelected(selected: object): Promise<void> {\n    return this.setProperty<object>('selected', selected);\n  }\n\n  /**\n   * Gets the value of <code>selected</code> property.\n   * The selected property\n   * @return The value of <code>selected</code> property.\n   *\n   */\n  public getSelected(): Promise<object> {\n    return this.getProperty<object>('selected');\n  }\n\n  /**\n   * Gets the value of <code>selectionMode</code> property.\n   * Type of selection behavior for the ListView\n   * @return The value of <code>selectionMode</code> property.\n   *\n   */\n  public getSelectionMode(): Promise<string> {\n    return this.getProperty<string>('selectionMode');\n  }\n}\nexport interface Gridlines {\n  /**\n   *\n   */\n  item: string;\n  /**\n   *\n   */\n  top: string;\n  /**\n   *\n   */\n  bottom: string;\n}\nexport interface ScrollPolicyOptions {\n  /**\n   *\n   */\n  fetchSize: number;\n  /**\n   *\n   */\n  scroller: string;\n}\n"]}