{
  "name": "select-single",
  "version": "16.0.1",
  "jetVersion": "^16.0.1",
  "pack": "oj-c",
  "type": "composite",
  "dependencyScope": "runtime",
  "license": "https://opensource.org/licenses/UPL",
  "implements": [
    "CSelectSingleElement"
  ],
  "displayName": "SelectSingle",
  "description": "A select single provides support for single-select and search filtering",
  "help": "oj-c.SelectSingle.html",
  "main": "oj-c/select-single",
  "extension": {
    "catalog": {
      "category": "Forms"
    },
    "vbdt": {
      "module": "oj-c/select-single",
      "defaultColumns": 6,
      "minColumns": 2
    },
    "oracle": {
      "icon": "oj-ux-ico-select",
      "uxSpecs": [
        "select-single-items"
      ]
    }
  },
  "propertyLayout": [
    {
      "propertyGroup": "common",
      "items": [
        "disabled",
        "labelHint",
        "placeholder",
        "readonly",
        "required",
        "virtualKeyboard"
      ]
    },
    {
      "propertyGroup": "data",
      "items": [
        "data",
        "itemText",
        "value",
        "valueItem"
      ]
    }
  ],
  "since": "14.0.0",
  "properties": {
    "advancedSearch": {
      "type": "string",
      "description": "Specifies whether the advanced search link is shown in the dropdown when the user filters.",
      "displayName": "Advanced Search",
      "help": "#advancedSearch",
      "enumValues": [
        "off",
        "on"
      ],
      "value": "off"
    },
    "columnSpan": {
      "type": "number",
      "description": "Specifies how many columns this component should span.",
      "displayName": "Column Span",
      "help": "#columnSpan",
      "value": 1
    },
    "containerReadonly": {
      "type": "boolean",
      "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
      "displayName": "Container Readonly",
      "help": "#containerReadonly",
      "binding": {
        "consume": {
          "name": "containerReadonly"
        }
      }
    },
    "data": {
      "type": "DataProvider|null",
      "description": "The data source for SelectSingle.",
      "displayName": "Data",
      "help": "#data",
      "extension": {
        "webelement": {
          "exceptionStatus": [
            {
              "type": "deprecated",
              "since": "15.0.0",
              "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
            }
          ]
        }
      },
      "value": null
    },
    "disabled": {
      "type": "boolean",
      "description": "Specifies whether the component is disabled.",
      "displayName": "Disabled",
      "help": "#disabled",
      "value": false
    },
    "displayOptions": {
      "type": "object",
      "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
      "displayName": "Display Options",
      "help": "#displayOptions",
      "properties": {
        "messages": {
          "type": "string",
          "enumValues": [
            "none",
            "display"
          ],
          "value": "display"
        }
      }
    },
    "help": {
      "type": "object",
      "description": "Form component help information.",
      "displayName": "Help",
      "help": "#help",
      "properties": {
        "instruction": {
          "type": "string",
          "value": ""
        }
      }
    },
    "helpHints": {
      "type": "object",
      "description": "The helpHints object contains a definition property and a source property.",
      "displayName": "Help Hints",
      "help": "#helpHints",
      "properties": {
        "definition": {
          "type": "string",
          "value": ""
        },
        "source": {
          "type": "string",
          "value": ""
        },
        "sourceText": {
          "type": "string"
        }
      }
    },
    "itemText": {
      "type": "string|number|function",
      "description": "Specifies how to get the text string to render for a data item.",
      "displayName": "Item Text",
      "help": "#itemText",
      "required": true
    },
    "labelEdge": {
      "type": "string",
      "description": "Specifies how the label is positioned for the component",
      "displayName": "Label Edge",
      "help": "#labelEdge",
      "propertyEditorValues": {
        "inside": {
          "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
          "displayName": "Inside"
        },
        "none": {
          "description": "The component will not create a label, but instead set the aria-label property on the input element.",
          "displayName": "None"
        },
        "start": {
          "description": "The label will be placed before the start of the component.",
          "displayName": "Start"
        },
        "top": {
          "description": "The label will be placed on top of the component.",
          "displayName": "Top"
        }
      },
      "enumValues": [
        "none",
        "start",
        "top",
        "inside"
      ],
      "binding": {
        "consume": {
          "name": "containerLabelEdge"
        }
      }
    },
    "labelHint": {
      "type": "string",
      "description": "Represents a hint for rendering a label on the component.",
      "displayName": "Label Hint",
      "help": "#labelHint",
      "required": true,
      "translatable": true
    },
    "labelStartWidth": {
      "type": "number|string",
      "description": "The width of the label when labelEdge is 'start'",
      "displayName": "Label Start Width",
      "help": "#labelStartWidth",
      "binding": {
        "consume": {
          "name": "labelWidth"
        }
      }
    },
    "labelWrapping": {
      "type": "string",
      "description": "Should the labels wrap or truncate when there is not enough available space.",
      "displayName": "Label Wrapping",
      "help": "#labelWrapping",
      "propertyEditorValues": {
        "truncate": {
          "description": "Label will truncate if needed.",
          "displayName": "Truncate"
        },
        "wrap": {
          "description": "Label will wrap if needed.",
          "displayName": "Wrap"
        }
      },
      "enumValues": [
        "truncate",
        "wrap"
      ],
      "binding": {
        "consume": {
          "name": "labelWrapping"
        }
      }
    },
    "messagesCustom": {
      "type": "Array<object>",
      "description": "List of custom component messages",
      "displayName": "Messages Custom",
      "help": "#messagesCustom",
      "extension": {
        "vbdt": {
          "itemProperties": {
            "summary": {
              "type": "string"
            },
            "detail": {
              "type": "string"
            },
            "severity": {
              "type": "string",
              "enumValues": [
                "error",
                "confirmation",
                "info",
                "warning"
              ]
            }
          }
        }
      },
      "writeback": true,
      "value": []
    },
    "placeholder": {
      "type": "string",
      "description": "The placeholder text to set on the element.",
      "displayName": "Placeholder",
      "help": "#placeholder",
      "translatable": true
    },
    "readonly": {
      "type": "boolean",
      "description": "Whether the component is readonly",
      "displayName": "Readonly",
      "help": "#readonly",
      "binding": {
        "consume": {
          "name": "containerReadonly"
        }
      },
      "value": false
    },
    "required": {
      "type": "boolean",
      "description": "Specifies whether or not the component is required.",
      "displayName": "Required",
      "help": "#required",
      "value": false
    },
    "requiredMessageDetail": {
      "type": "string",
      "description": "Overrides the default Required error message.",
      "displayName": "Required Message Detail",
      "help": "#requiredMessageDetail",
      "translatable": true
    },
    "textAlign": {
      "type": "string",
      "description": "Specifies how the text is aligned within the text field",
      "displayName": "Text Align",
      "help": "#textAlign",
      "propertyEditorValues": {
        "start": {
          "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
          "displayName": "Start"
        },
        "end": {
          "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
          "displayName": "End"
        },
        "right": {
          "description": "Aligns text right regardless of reading direction, often used for numbers.",
          "displayName": "Right"
        }
      },
      "enumValues": [
        "end",
        "start",
        "right"
      ]
    },
    "unsafe_labelledBy": {
      "type": "string"
    },
    "userAssistanceDensity": {
      "type": "string",
      "description": "Specifies the density of the form component's user assistance presentation.",
      "displayName": "User Assistance Density",
      "help": "#userAssistanceDensity",
      "propertyEditorValues": {
        "reflow": {
          "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
          "displayName": "Reflow"
        },
        "efficient": {
          "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
          "displayName": "Efficient"
        },
        "compact": {
          "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
          "displayName": "Compact"
        }
      },
      "enumValues": [
        "compact",
        "reflow",
        "efficient"
      ],
      "binding": {
        "consume": {
          "name": "containerUserAssistanceDensity"
        }
      },
      "value": "reflow"
    },
    "value": {
      "type": "any",
      "description": "The value of the component.",
      "displayName": "Value",
      "help": "#value",
      "writeback": true,
      "value": null
    },
    "valueItem": {
      "type": "object|null",
      "description": "The current value of the element and its associated data.",
      "displayName": "Value Item",
      "help": "#valueItem",
      "properties": {
        "data": {
          "type": "any"
        },
        "key": {
          "type": "any"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "indexFromParent": {
              "type": "number"
            },
            "isLeaf": {
              "type": "boolean"
            },
            "key": {
              "type": "any"
            },
            "message": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string|number",
                  "propertyEditorValues": {
                    "error": {},
                    "confirmation": {},
                    "info": {},
                    "warning": {},
                    "fatal": {}
                  }
                },
                "summary": {
                  "type": "string"
                }
              }
            },
            "parentKey": {
              "type": "any"
            },
            "suggestion": {
              "type": "object"
            },
            "treeDepth": {
              "type": "number"
            }
          }
        }
      },
      "writeback": true,
      "value": null
    },
    "virtualKeyboard": {
      "type": "string",
      "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
      "displayName": "Virtual Keyboard",
      "help": "#virtualKeyboard",
      "propertyEditorValues": {
        "number": {
          "description": "Use a mobile virtual keyboard for entering numbers. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
          "displayName": "Number"
        },
        "auto": {
          "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
          "displayName": "Auto"
        },
        "email": {
          "description": "Use a mobile virtual keyboard for entering email addresses.",
          "displayName": "Email"
        },
        "search": {
          "description": "Use a mobile virtual keyboard for entering search terms.",
          "displayName": "Search"
        },
        "tel": {
          "description": "Use a mobile virtual keyboard for entering telephone numbers.",
          "displayName": "Tel"
        },
        "text": {
          "description": "Use a mobile virtual keyboard for entering text.",
          "displayName": "Text"
        },
        "url": {
          "description": "Use a mobile virtual keyboard for URL entry.",
          "displayName": "URL"
        }
      },
      "enumValues": [
        "number",
        "search",
        "auto",
        "url",
        "text",
        "email",
        "tel"
      ],
      "value": "auto"
    },
    "valid": {
      "type": "string",
      "description": "Specifies how the valid state of the component",
      "displayName": "Valid",
      "help": "#valid",
      "propertyEditorValues": {
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
          "displayName": "Pending"
        },
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
          "displayName": "Invalid Shown"
        }
      },
      "enumValues": [
        "pending",
        "valid",
        "invalidHidden",
        "invalidShown"
      ],
      "readOnly": true,
      "writeback": true
    }
  },
  "slots": {
    "itemTemplate": {
      "description": "The itemTemplate slot is used to specify the template for rendering each item in the dropdown. See the Help documentation for more information.",
      "displayName": "itemTemplate",
      "help": "#itemTemplate",
      "maxItems": 1,
      "data": {
        "searchText": {
          "type": "string"
        },
        "item": {
          "type": "object",
          "properties": {
            "data": {
              "type": "any"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    }
  },
  "events": {
    "ojAdvancedSearchAction": {
      "description": "Event triggered when the user clicks or presses Enter on the advanced search link in the dropdown.",
      "displayName": "onOjAdvancedSearchAction",
      "help": "#event:advancedSearchAction",
      "detail": {
        "searchText": {
          "type": "string"
        }
      }
    },
    "ojValueAction": {
      "description": "Event triggered when a value is submitted by the user, even if the value is the same as the previous value.",
      "displayName": "onOjValueAction",
      "help": "#event:valueAction",
      "detail": {
        "itemContext": {
          "type": "object",
          "properties": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        },
        "previousValue": {
          "type": "any"
        },
        "value": {
          "type": "any"
        }
      }
    }
  },
  "methods": {
    "reset": {
      "return": "any"
    },
    "showMessages": {
      "return": "any"
    },
    "validate": {
      "return": "Promise"
    },
    "blur": {
      "return": "any"
    },
    "focus": {
      "return": "any"
    },
    "_doAdvancedSearchAction": {
      "params": [
        {
          "name": "searchText",
          "description": "The search text to include in the event",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "_selectItemByValue": {
      "params": [
        {
          "name": "value",
          "description": "The value to be selected",
          "type": "any"
        }
      ],
      "return": "any"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
      "help": "#setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves the value of a property or a subproperty.",
      "help": "#getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "#setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  }
}