{"version":3,"file":"InputTextWebElement.js","sourceRoot":"","sources":["InputTextWebElement.ts"],"names":[],"mappings":";;;AAAA,qEAAoE;AACpE,yDAA6C;AAE7C;;;;GAIG;AACH,MAAa,mBAAoB,SAAQ,iDAAuB;IAC9D;;;OAGG;IACI,KAAK,CAAC,WAAW,CAAC,KAA6B;QACpD,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAElC,0EAA0E;YAC1E,iFAAiF;YACjF,0EAA0E;YAC1E,sEAAsE;YACtE,IAAI,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACnD,OAAO,SAAS,EAAE,CAAC;gBACjB,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAG,CAAC,UAAU,CAAC,CAAC;gBACxE,qDAAqD;gBACrD,MAAM,IAAI,CAAC,QAAQ,CAAC,CAAC,wBAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpD,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACjD,CAAC;YAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;YACtD,KAAK,IAAI,CAAC,MAAM,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAEvC,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CACxC;;;;OAID,EACC,IAAI,CACL,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK;QACH,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;CACF;AA5CD,kDA4CC","sourcesContent":["import { InputTextWebElementBase } from './InputTextWebElementBase';\nimport { By, Key } from 'selenium-webdriver';\n\n/**\n * The component WebElement for [oj-c-input-text](../../../oj-c/docs/oj.InputText.html).\n * Do not instantiate this class directly, instead, use\n * [findInputText](../functions/findInputText.html).\n */\nexport class InputTextWebElement extends InputTextWebElementBase {\n  /**\n   * Sets the value of the \"value\" property of the input component.\n   * @param value The value to set for the <code>value</code>\n   */\n  public async changeValue(value: string | number | null): Promise<void> {\n    await this.getDriver().executeScript('arguments[0].focus()', this);\n    const readonly = await this.getReadonly();\n    const disabled = await this.getDisabled();\n    if (!(disabled || readonly)) {\n      await this.whenBusyContextReady();\n\n      // Note that using element.clear() will blur, which commits the change and\n      // calls onValueChanged, which we don't want until we're done updating the value.\n      // Instead, we simulate the user clearing the text in the field and typing\n      // in a new value. We mock committing the value by calling validate().\n      let currValue = await this.getProperty('rawValue');\n      while (currValue) {\n        const backspaces = new Array(currValue.length + 1).join(Key.BACK_SPACE);\n        // First move the cursor to the end, then backspaces.\n        await this.sendKeys([Key.END, backspaces].join(''));\n        currValue = await this.getProperty('rawValue');\n      }\n\n      const input = await this.findElement(By.css('input'));\n      value && (await input.sendKeys(value));\n\n      return this.getDriver().executeAsyncScript(\n        `\n        let el = arguments[0];\n        let done = arguments[1];\n        el.validate().then(done).catch(done);\n      `,\n        this\n      );\n    }\n  }\n\n  /**\n   * Clears the value of the component.\n   */\n  clear(): Promise<void> {\n    return this.changeValue(null);\n  }\n}\n"]}