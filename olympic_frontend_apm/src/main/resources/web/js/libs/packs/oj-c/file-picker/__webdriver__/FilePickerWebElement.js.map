{"version":3,"file":"FilePickerWebElement.js","sourceRoot":"","sources":["FilePickerWebElement.ts"],"names":[],"mappings":";;;AAAA,uEAAsE;AACtE,uBAAyB;AACzB,2BAA6B;AAE7B;;;;GAIG;AACH,MAAa,oBAAqB,SAAQ,mDAAwB;IAChE;;;;;;;OAOG;IACH,KAAK,CAAC,QAAQ,CAAC,KAA4C;QACzD,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAe,EAAE,CAAC;QAChC,IAAI,IAAS,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC/B,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC/B,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,IAAI,EAAE,CAAC;gBACT,IAAI,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;gBAClF,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;QACD,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CACvC;;;;;;;iEAO2D,EAC3D,IAAI,EACJ,QAAQ,CACT,CAAC;IACJ,CAAC;CACF;AArCD,oDAqCC","sourcesContent":["import { FilePickerWebElementBase } from './FilePickerWebElementBase';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * The component WebElement for [oj-c-file-picker](../../../oj-c/docs/oj.FilePicker.html).\n * Do not instantiate this class directly, instead, use\n * [findFilePicker](../functions/findFilePicker.html).\n */\nexport class FilePickerWebElement extends FilePickerWebElementBase {\n  /**\n   * Takes an Array of objects containing file paths + types.\n   * These files will be read from the local filesystem and then sent\n   * to the oj-file-picker to simulate user file selection. Only the basename of\n   * the file will be sent, not the entire path to make it consistent with how\n   * the browser sets the value.\n   * @param files An array of objects containing the path and type of selected files\n   */\n  async doSelect(files: Array<{ path: string; type: string }>) {\n    await this.whenReady();\n    const dataList: Array<any> = [];\n    let file: any;\n    for (let i = 0; i < files.length; i++) {\n      const fileInfo = files[i];\n      const filePath = fileInfo.path;\n      const fileType = fileInfo.type;\n      const data = fs.readFileSync(filePath);\n      if (data) {\n        file = { bytes: Array.from(data), path: path.basename(filePath), type: fileType };\n        dataList.push(file);\n      }\n    }\n    await this.whenBusyContextReady();\n    await this.getDriver().executeAsyncScript(\n      `const fileList = [];\n      const list = arguments[1];\n      for(var i = 0; i < list.length; i++) {\n      const data = list[i];\n      fileList.push(new File([Uint8Array.from(data.bytes)], data.path, {type: data.type}));\n      }\n      fileList.item = function(i){return fileList[i];}\n      arguments[0]._doSelectHelper(fileList).then(arguments[2]);`,\n      this,\n      dataList\n    );\n  }\n}\n"]}