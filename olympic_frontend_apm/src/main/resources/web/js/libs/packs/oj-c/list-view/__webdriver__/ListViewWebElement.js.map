{"version":3,"file":"ListViewWebElement.js","sourceRoot":"","sources":["ListViewWebElement.ts"],"names":[],"mappings":";;;AAAA,mEAAkE;AAClE,yDAAoD;AACpD,mEAAmE;AACnE;;;;GAIG;AACH,MAAa,kBAAmB,SAAQ,+CAAsB;IAC5D,qBAAqB;IACrB;;;;;;OAMG;IACH,KAAK,CAAC,cAAc,CAAI,QAAkB;QACxC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACvB,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAClC;;;;;;OAMC,EACD,IAAI,EACJ,QAAQ,CACT,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,WAAW;QACf,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAa,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAC7D;;;;;KAKD,EACC,IAAI,CACL,CAAC;QACF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ,CAAI,WAAuB;QACvC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACvB,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAC3C;;;;;;;KAOD,EACC,IAAI,EACJ,WAAW,CAAC,GAAG,CAChB,CAAC;QAEF,IAAI,EAAE,EAAE,CAAC;YACP,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,uBAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACjD,OAAO,IAAA,+BAAS,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;aAAM,CAAC;YACN,MAAM,KAAK,CAAC,iDAAiD,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;CACF;AAvED,gDAuEC","sourcesContent":["import { ListViewWebElementBase } from './ListViewWebElementBase';\nimport { By, WebElement } from 'selenium-webdriver';\nimport { SlotProxy, slotProxy } from '@oracle/oraclejet-webdriver';\n/**\n * The component WebElement for [oj-c-list-view](../../../oj-c/docs/oj.ListView.html).\n * Do not instantiate this class directly, instead, use\n * [findListView](../functions/findListView.html).\n */\nexport class ListViewWebElement extends ListViewWebElementBase {\n  // Put overrides here\n  /**\n   * Sets the value of \"selected\" property.\n   * Specifies the current selected items in the listview. See the Help documentation for more information.\n   * @param selected The value to set for \"selected\"\n   * @override\n   * @typeparam K Type of keys\n   */\n  async changeSelected<K>(selected: Array<K>) {\n    await this.whenReady();\n    await this.getDriver().executeScript(\n      `\n        const ele = arguments[0];\n        const selected = arguments[1];\n        require(['ojs/ojkeyset'], (keySet) => {\n          ele.selected = new keySet.KeySetImpl(selected);\n        });\n      `,\n      this,\n      selected\n    );\n  }\n\n  /**\n   * Gets the value of \"selected\" property.\n   * Retrieves the current selected items in the listview. See the Help documentation for more information.\n   * @override\n   * @typeparam K Type of keys\n   * @return The value of \"selected\" property.\n   */\n  async getSelected<K>(): Promise<Array<K>> {\n    await this.whenReady();\n    const selected: Array<K> = await this.getDriver().executeScript(\n      `\n      const ele = arguments[0];\n      const selected = ele.selected.isAddAll() ? Array.from(ele.selected.deletedValues())\n      : Array.from(ele.selected.values())\n      return selected;\n    `,\n      this\n    );\n    return selected;\n  }\n\n  /**\n   * Retrieve a SlotProxy which represents a single listview item.\n   * @param key The key within the Collection's dataset associated with the item.\n   */\n  async findItem<T>(itemLocator: { key: T }): Promise<SlotProxy> {\n    await this.whenReady();\n    let el = await this.getDriver().executeScript<WebElement>(\n      `\n      const ele = arguments[0].querySelectorAll('[role = row]')\n      for(let i = 0; i<ele.length; i++){\n        if(ele[i].getAttribute('data-oj-key') === arguments[1].toString()){\n          return ele[i];\n        }\n      }\n    `,\n      this,\n      itemLocator.key\n    );\n\n    if (el) {\n      el = el.findElement(By.css('[role=\"gridcell\"]'));\n      return slotProxy(el, this);\n    } else {\n      throw Error(`No corresponding item found for the itemLocator`);\n    }\n  }\n}\n"]}